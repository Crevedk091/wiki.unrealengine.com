<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>Pong Tutorial - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,follow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;printable=1&amp;skin=epic&amp;*" />
<link rel="stylesheet" href="/extensions/EpicVideoSystem/CSS/VideoSystem.css" /><meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;printable=1&amp;skin=epic&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Pong_Tutorial","wgTitle":"Pong Tutorial","wgCurRevisionId":15454,"wgRevisionId":15454,"wgArticleId":4184,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Tutorials","Community Created Content"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Pong_Tutorial","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"epic","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:2197af7670c41256853f340e275ede1b */
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=skins.epic.extras.js%7Cskins.epic.fancybox.js%7Cskins.epic.js%7Cskins.epic.qtip.js%7Cskins.epic.slimscroll.js&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/epic/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
var experimentID = false;
var cxApi = null;
var variation = 0;
var fancyTitle = "";
var CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML;
$(document).ready(function(){
	if(experimentID != false)
	{
		$(head).append('<script src="//www.google-analytics.com/cx/api.js?experiment=' + experimentID + '" />' + '</scr' + 'ipt>');
		HandleExperiment();
	}
	else
	{
		CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);	
	}
});
function HandleExperiment()
{
	CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
	if(cxApi != null)
	{
		variation = cxApi.chooseVariation();
		cxApi.setChosenVariation(variation, experimentID);
		if(variation != cxApi.ORIGINAL_VARIATION && variation != cxApi.NO_CHOSEN_VARIATION && variation != cxApi.NOT_PARTICIPATING)
		{
			//var URL = document.location.href + (document.location.search != '' ? '&var=' : '?var=') + variation;
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
			//document.location.href = URL; 
			CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML + ' (variation ' + variation + ')';
			var test = "";
		}
		else
		{
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
		}
		ToggleExperimentContent(variation);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);
	}
	else
	{
		setTimeout("HandleExperiment()", 500);
	}
}

function ToggleExperimentContent(variation)
{
	$('.AB').hide();
	$('#variation_' + variation).show();
}
</script></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Pong_Tutorial skin-epic action-view vector-animateLayout">
		<!--<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>-->
		<!-- Google Tag Manager -->
		<noscript>
			<iframe src="//www.googletagmanager.com/ns.html?id=GTM-KWRD6D"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
		<script>
		(function (w, d, s, l, i) {
		w[l] = w[l] || []; w[l].push({
		'gtm.start':
		new Date().getTime(), event: 'gtm.js'
		}); var f = d.getElementsByTagName(s)[0],
		j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
		'//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
		})(window, document, 'script', 'dataLayer', 'GTM-KWRD6D');</script>
		<!-- End Google Tag Manager -->
		<div id="webThree">
		<div id="head">
		





<input type="hidden" id="updateenable" value="true">

    <script src="https://cdn1.unrealengine.com/2670222/unifiedHeaderBundle-c133cbefbece60d20fd29c5b1819fa39.js" defer></script>
    <link rel="stylesheet" href="https://cdn1.unrealengine.com/2670222/unifiedHeader-dd083735d5017970978496baee5b916e.css">


<header id="header" data-path="/" data-sitepath="https://www.unrealengine.com">
<input type="hidden" id="isUnified" value="1" />
    <input type="hidden" id="current_locale" value="en_US"/>
    <input type="hidden" id="header-host" value="https://www.unrealengine.com" />
    <nav class="main-menu">
        <div class="menu-mobile">
            <span class="menu-mobile-icon"></span>
            <ul>

                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">About</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/what-is-unreal-engine-4">Overview</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/unreal-engine-4">Features</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/vr-page">Virtual Reality</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/showcase">Showcase</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/49-release-notes-overview">What&#39;s New</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/faq">FAQ / EULA</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/previous-versions">Previous Versions</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Learn</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://docs.unrealengine.com/" target="_blank">Documentation</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://wiki.unrealengine.com/Videos " target="_blank">Video Tutorials</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://wiki.unrealengine.com/Main_Page" target="_blank">Wiki</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Community</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/blog">Blog</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://forums.unrealengine.com/" target="_blank">Forums</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://answers.unrealengine.com/" target="_blank">AnswerHub</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://trello.com/b/gHooNW9I/ue4-roadmap" target="_blank">Roadmap</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/unrealdevgrants">Unreal Dev Grants</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="http://www.unrealtournament.com/blog/" target="_blank">Unreal Tournament</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Marketplace</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/marketplace">Browse</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://publish.unrealengine.com/faq" target="_blank">Business Terms</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://publish.unrealengine.com/submission-guidelines" target="_blank">Submission Guidelines</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://publish.unrealengine.com/welcome" target="_blank">Submit Your Content</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://forums.unrealengine.com/forumdisplay.php?56-Marketplace" target="_blank">Marketplace Forums</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Academia</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/education">Education Program</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/academic-partners">Academic Partners</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                
                <li class="btn-account ignore" style="display: none">
                    <a href="https://www.unrealengine.com/dashboard">Account</a>
                </li>
                <li class="btn-signout ignore" style="display: none">
                    <a class="sso-sign-out" href="">Log Out</a>
                </li>
                <li class="btn-signin ignore" style="display: none">
                    <a class="sso-sign-in" href="">Sign in</a>
                </li>
            </ul>
        </div>

        <ul class="menu-items">
            <li class="logo ignore">
                
                    <a href="https://www.unrealengine.com/blog"></a>
                
            </li>

            
                

                    
                        <li>
                            
                                <a>About</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/what-is-unreal-engine-4">Overview</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/unreal-engine-4">Features</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/vr-page">Virtual Reality</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/showcase">Showcase</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/49-release-notes-overview">What&#39;s New</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/faq">FAQ / EULA</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/previous-versions">Previous Versions</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Learn</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://docs.unrealengine.com/" target="_blank">Documentation</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://wiki.unrealengine.com/Videos " target="_blank">Video Tutorials</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://wiki.unrealengine.com/Main_Page" target="_blank">Wiki</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Community</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/blog">Blog</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://forums.unrealengine.com/" target="_blank">Forums</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://answers.unrealengine.com/" target="_blank">AnswerHub</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://trello.com/b/gHooNW9I/ue4-roadmap" target="_blank">Roadmap</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/unrealdevgrants">Unreal Dev Grants</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="http://www.unrealtournament.com/blog/" target="_blank">Unreal Tournament</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Marketplace</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/marketplace">Browse</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://publish.unrealengine.com/faq" target="_blank">Business Terms</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://publish.unrealengine.com/submission-guidelines" target="_blank">Submission Guidelines</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://publish.unrealengine.com/welcome" target="_blank">Submit Your Content</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://forums.unrealengine.com/forumdisplay.php?56-Marketplace" target="_blank">Marketplace Forums</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Academia</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/education">Education Program</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/academic-partners">Academic Partners</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
        </ul>


        <div class="menu-download" data-sub="dl">
            <a class="sso-register" href="">
                <span class="isUpdateEnabled">Get Unreal</span>
            </a>
        </div>
        

        <div id="search" class="menu-search ignore">
                <span></span>
        </div>
        
        <div class="search-header">
            <div class="input-search">
                <div id="search-tips" class="search-tips-en_US">
                    You may be unable to view the results of this search unless you connect to a VPN first.
                </div>
                <span></span>
                <input type="text" name="search" value="" style="background:none !important" id="isearch" class="text" placeholder="Search..." />
                <p class="search-btn">Search</p>
            </div>
        </div>

        <ul class="menu-icons">
            <li id="btn-account" class="ignore" data-sub="account" style="display: none">
                <a href="/dashboard">Account</a>
                <ul class="account-sub-menu">
                    <li>
                        <a href="/dashboard">Personal</a>
                    </li>
                    <li>
                        <a href="https://publish.unrealengine.com/">Seller</a>
                    </li>
                </ul>
            </li>
            <li id="btn-signout" class="ignore" data-sub="account" style="display: none">
                <a class="sso-sign-out last-border" href="">Log Out</a>
            </li>
            <li id="btn-signin" class="ignore" data-sub="account" style="display: none">
                <a class="sso-sign-in last-border" href="">Sign in</a>
            </li>
        </ul>
        
    </nav>
</header>

		</div>
		<div id="pagedefault">		
                    <div id="pagenav">
                        <div>
                            <!-- Start of Other language links -->
                            <!-- End of Other language links -->
                            <div class="homelink_container">
                                <a href="https://wiki.unrealengine.com" title="UE4 Wiki Home" class="homelink">HOME</a>
                            </div>
                        </div>
                        <div style="clear:both;">
                        </div>
                    </div>	
		<div id="mw-navigation" style="max-width:972px;margin:1em auto 0 auto;">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="jumplink" onclick="$('#sidebar').toggle();">
					Navigation
				</div>
				<div id="sidebar">
					<!-- Start of jump page links -->
					<div class="largetitle">
						Quick Links
					</div>
					<div class="arrowlist">
						<!-- End of jump page links -->
						<!-- Start of related page links -->
						<!-- End of related page links -->								
						<div id="mw-panel">
							<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Videos"><a href="/Videos">Videos</a></li>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Code"><a href="/Category:Code">Code</a></li>
			<li id="n-Games"><a href="/Category:Games">Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Pong_Tutorial" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Pong_Tutorial" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="/index.php?title=Pong_Tutorial&amp;oldid=15454" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="/index.php?title=Pong_Tutorial&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
						</div>
					</div>
				</div>				
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/Pong_Tutorial"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/index.php?title=Talk:Pong_Tutorial&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/Pong_Tutorial" >View</a></span></li>
					<li id="ca-viewsource"><span><a href="/index.php?title=Pong_Tutorial&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Pong_Tutorial&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=Pong+Tutorial&amp;returntoquery=printable%3Dyes&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Pong+Tutorial&amp;returntoquery=printable%3Dyes" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				</div>
			</div>
		</div>
		<div id="maincol">
		<div class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- Start of crumbs links -->
			<div class="crumbs">
			<p>
							</p>
			</div>
			<!-- End of crumbs links -->
			<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Pong Tutorial</span></h1>
			<div id="bodyContent">
				<div id="contentSub"></div>
																<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p><br />
<b>This tutorial was recently finished and due to its length, there may be some grammatical/syntax errors scattered throughout it.  If you are going through this and find anything confusing or that you think should be there, please change it!  I am certain that I was not able to cover everything.</b>
</p><p>Hi everyone.  I recently went through the UE4 code base and created a pong game to help myself become familiarized with the Engine.  Just a heads up that I am in no way sure that the implementation of this game follows the best practices for development.  However, the goal of this tutorial was to implement everything via C++, which I managed.  Hopefully by the end of this tutorial you will have a much better feel for working with the Engine in C++ and also a better feel for how awesome blueprints can be.
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Creating_the_Project"><span class="tocnumber">1</span> <span class="toctext">Creating the Project</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Setting_Up_the_World"><span class="tocnumber">2</span> <span class="toctext">Setting Up the World</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Creating_the_Assets"><span class="tocnumber">3</span> <span class="toctext">Creating the Assets</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Opening_up_the_Code"><span class="tocnumber">4</span> <span class="toctext">Opening up the Code</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Creating_the_Background"><span class="tocnumber">5</span> <span class="toctext">Creating the Background</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Background.h"><span class="tocnumber">5.1</span> <span class="toctext">Background.h</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Background.cpp"><span class="tocnumber">5.2</span> <span class="toctext">Background.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="#Creating_the_Other_Sprites"><span class="tocnumber">6</span> <span class="toctext">Creating the Other Sprites</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="#Ball.h"><span class="tocnumber">6.1</span> <span class="toctext">Ball.h</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Ball.cpp"><span class="tocnumber">6.2</span> <span class="toctext">Ball.cpp</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Paddle.h"><span class="tocnumber">6.3</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Paddle.cpp"><span class="tocnumber">6.4</span> <span class="toctext">Paddle.cpp</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Bounds.h"><span class="tocnumber">6.5</span> <span class="toctext">Bounds.h</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Bounds.cpp"><span class="tocnumber">6.6</span> <span class="toctext">Bounds.cpp</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Goal.h"><span class="tocnumber">6.7</span> <span class="toctext">Goal.h</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Goal.cpp"><span class="tocnumber">6.8</span> <span class="toctext">Goal.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="#Creating_the_GameMode"><span class="tocnumber">7</span> <span class="toctext">Creating the GameMode</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="#PongGameMode.h"><span class="tocnumber">7.1</span> <span class="toctext">PongGameMode.h</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#PongGameMode.cpp"><span class="tocnumber">7.2</span> <span class="toctext">PongGameMode.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-20"><a href="#Initializing_the_Background.2FCamera.2FPaddle.2FBall"><span class="tocnumber">8</span> <span class="toctext">Initializing the Background/Camera/Paddle/Ball</span></a>
<ul>
<li class="toclevel-2 tocsection-21"><a href="#Background"><span class="tocnumber">8.1</span> <span class="toctext">Background</span></a>
<ul>
<li class="toclevel-3 tocsection-22"><a href="#Background.h_2"><span class="tocnumber">8.1.1</span> <span class="toctext">Background.h</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Background.cpp_2"><span class="tocnumber">8.1.2</span> <span class="toctext">Background.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-24"><a href="#PongCamera"><span class="tocnumber">8.2</span> <span class="toctext">PongCamera</span></a>
<ul>
<li class="toclevel-3 tocsection-25"><a href="#PongCamera.h"><span class="tocnumber">8.2.1</span> <span class="toctext">PongCamera.h</span></a></li>
<li class="toclevel-3 tocsection-26"><a href="#PongCamera.cpp"><span class="tocnumber">8.2.2</span> <span class="toctext">PongCamera.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-27"><a href="#Paddle"><span class="tocnumber">8.3</span> <span class="toctext">Paddle</span></a>
<ul>
<li class="toclevel-3 tocsection-28"><a href="#Paddle.h_2"><span class="tocnumber">8.3.1</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="#Paddle.cpp_2"><span class="tocnumber">8.3.2</span> <span class="toctext">Paddle.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-30"><a href="#Ball"><span class="tocnumber">8.4</span> <span class="toctext">Ball</span></a>
<ul>
<li class="toclevel-3 tocsection-31"><a href="#Ball.h_2"><span class="tocnumber">8.4.1</span> <span class="toctext">Ball.h</span></a></li>
<li class="toclevel-3 tocsection-32"><a href="#Ball.cpp_2"><span class="tocnumber">8.4.2</span> <span class="toctext">Ball.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-33"><a href="#PongGameMode"><span class="tocnumber">8.5</span> <span class="toctext">PongGameMode</span></a>
<ul>
<li class="toclevel-3 tocsection-34"><a href="#PongGameMode.h_2"><span class="tocnumber">8.5.1</span> <span class="toctext">PongGameMode.h</span></a></li>
<li class="toclevel-3 tocsection-35"><a href="#PongGameMode.cpp_2"><span class="tocnumber">8.5.2</span> <span class="toctext">PongGameMode.cpp</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-36"><a href="#Moving_the_Paddle"><span class="tocnumber">9</span> <span class="toctext">Moving the Paddle</span></a>
<ul>
<li class="toclevel-2 tocsection-37"><a href="#Paddle.h_3"><span class="tocnumber">9.1</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-2 tocsection-38"><a href="#Paddle.cpp_3"><span class="tocnumber">9.2</span> <span class="toctext">Paddle.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-39"><a href="#Adding_Bounds"><span class="tocnumber">10</span> <span class="toctext">Adding Bounds</span></a>
<ul>
<li class="toclevel-2 tocsection-40"><a href="#Bounds"><span class="tocnumber">10.1</span> <span class="toctext">Bounds</span></a>
<ul>
<li class="toclevel-3 tocsection-41"><a href="#Bounds.h_2"><span class="tocnumber">10.1.1</span> <span class="toctext">Bounds.h</span></a></li>
<li class="toclevel-3 tocsection-42"><a href="#Bounds.cpp_2"><span class="tocnumber">10.1.2</span> <span class="toctext">Bounds.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-43"><a href="#Background.h_3"><span class="tocnumber">10.2</span> <span class="toctext">Background.h</span></a></li>
<li class="toclevel-2 tocsection-44"><a href="#Background.cpp_3"><span class="tocnumber">10.3</span> <span class="toctext">Background.cpp</span></a></li>
<li class="toclevel-2 tocsection-45"><a href="#PongGameMode.h_3"><span class="tocnumber">10.4</span> <span class="toctext">PongGameMode.h</span></a></li>
<li class="toclevel-2 tocsection-46"><a href="#PongGameMode.cpp_3"><span class="tocnumber">10.5</span> <span class="toctext">PongGameMode.cpp</span></a></li>
<li class="toclevel-2 tocsection-47"><a href="#Paddle.h_4"><span class="tocnumber">10.6</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-2 tocsection-48"><a href="#Paddle.cpp_4"><span class="tocnumber">10.7</span> <span class="toctext">Paddle.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-49"><a href="#Creating_the_GameState"><span class="tocnumber">11</span> <span class="toctext">Creating the GameState</span></a>
<ul>
<li class="toclevel-2 tocsection-50"><a href="#PongGameState.h"><span class="tocnumber">11.1</span> <span class="toctext">PongGameState.h</span></a></li>
<li class="toclevel-2 tocsection-51"><a href="#PongGameState.cpp"><span class="tocnumber">11.2</span> <span class="toctext">PongGameState.cpp</span></a></li>
<li class="toclevel-2 tocsection-52"><a href="#PongGameMode.h_4"><span class="tocnumber">11.3</span> <span class="toctext">PongGameMode.h</span></a></li>
<li class="toclevel-2 tocsection-53"><a href="#PongGameMode.cpp_4"><span class="tocnumber">11.4</span> <span class="toctext">PongGameMode.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-54"><a href="#Adding_Movement_to_the_Ball"><span class="tocnumber">12</span> <span class="toctext">Adding Movement to the Ball</span></a>
<ul>
<li class="toclevel-2 tocsection-55"><a href="#Ball.h_3"><span class="tocnumber">12.1</span> <span class="toctext">Ball.h</span></a></li>
<li class="toclevel-2 tocsection-56"><a href="#Ball.cpp_3"><span class="tocnumber">12.2</span> <span class="toctext">Ball.cpp</span></a></li>
<li class="toclevel-2 tocsection-57"><a href="#Paddle.h_5"><span class="tocnumber">12.3</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-2 tocsection-58"><a href="#Paddle.cpp_5"><span class="tocnumber">12.4</span> <span class="toctext">Paddle.cpp</span></a></li>
<li class="toclevel-2 tocsection-59"><a href="#PongGameState.h_2"><span class="tocnumber">12.5</span> <span class="toctext">PongGameState.h</span></a></li>
<li class="toclevel-2 tocsection-60"><a href="#PongGameState.cpp_2"><span class="tocnumber">12.6</span> <span class="toctext">PongGameState.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-61"><a href="#Goals.2FPaddle_AI"><span class="tocnumber">13</span> <span class="toctext">Goals/Paddle AI</span></a>
<ul>
<li class="toclevel-2 tocsection-62"><a href="#Paddle_2"><span class="tocnumber">13.1</span> <span class="toctext">Paddle</span></a>
<ul>
<li class="toclevel-3 tocsection-63"><a href="#Paddle.h_6"><span class="tocnumber">13.1.1</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-3 tocsection-64"><a href="#Paddle.cpp_6"><span class="tocnumber">13.1.2</span> <span class="toctext">Paddle.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-65"><a href="#PaddleAI"><span class="tocnumber">13.2</span> <span class="toctext">PaddleAI</span></a>
<ul>
<li class="toclevel-3 tocsection-66"><a href="#PaddleAI.h"><span class="tocnumber">13.2.1</span> <span class="toctext">PaddleAI.h</span></a></li>
<li class="toclevel-3 tocsection-67"><a href="#PaddleAI.cpp"><span class="tocnumber">13.2.2</span> <span class="toctext">PaddleAI.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-68"><a href="#Goal"><span class="tocnumber">13.3</span> <span class="toctext">Goal</span></a>
<ul>
<li class="toclevel-3 tocsection-69"><a href="#Goal.h_2"><span class="tocnumber">13.3.1</span> <span class="toctext">Goal.h</span></a></li>
<li class="toclevel-3 tocsection-70"><a href="#Goal.cpp_2"><span class="tocnumber">13.3.2</span> <span class="toctext">Goal.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-71"><a href="#GameMode"><span class="tocnumber">13.4</span> <span class="toctext">GameMode</span></a>
<ul>
<li class="toclevel-3 tocsection-72"><a href="#PongGameMode.h_5"><span class="tocnumber">13.4.1</span> <span class="toctext">PongGameMode.h</span></a></li>
<li class="toclevel-3 tocsection-73"><a href="#PongGameMode.cpp_5"><span class="tocnumber">13.4.2</span> <span class="toctext">PongGameMode.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-74"><a href="#GameState"><span class="tocnumber">13.5</span> <span class="toctext">GameState</span></a>
<ul>
<li class="toclevel-3 tocsection-75"><a href="#PongGameState.h_3"><span class="tocnumber">13.5.1</span> <span class="toctext">PongGameState.h</span></a></li>
<li class="toclevel-3 tocsection-76"><a href="#PongGameState.cpp_3"><span class="tocnumber">13.5.2</span> <span class="toctext">PongGameState.cpp</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-77"><a href="#Creating_the_HUD_.2F_Finishing_up"><span class="tocnumber">14</span> <span class="toctext">Creating the HUD / Finishing up</span></a>
<ul>
<li class="toclevel-2 tocsection-78"><a href="#Pong_HUD"><span class="tocnumber">14.1</span> <span class="toctext">Pong HUD</span></a>
<ul>
<li class="toclevel-3 tocsection-79"><a href="#PongHUD.h"><span class="tocnumber">14.1.1</span> <span class="toctext">PongHUD.h</span></a></li>
<li class="toclevel-3 tocsection-80"><a href="#PongHUD.cpp"><span class="tocnumber">14.1.2</span> <span class="toctext">PongHUD.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-81"><a href="#Paddle.h_7"><span class="tocnumber">14.2</span> <span class="toctext">Paddle.h</span></a></li>
<li class="toclevel-2 tocsection-82"><a href="#Paddle.cpp_7"><span class="tocnumber">14.3</span> <span class="toctext">Paddle.cpp</span></a></li>
<li class="toclevel-2 tocsection-83"><a href="#PaddleAI.h_2"><span class="tocnumber">14.4</span> <span class="toctext">PaddleAI.h</span></a></li>
<li class="toclevel-2 tocsection-84"><a href="#PaddleAI.cpp_2"><span class="tocnumber">14.5</span> <span class="toctext">PaddleAI.cpp</span></a></li>
<li class="toclevel-2 tocsection-85"><a href="#Ball.h_4"><span class="tocnumber">14.6</span> <span class="toctext">Ball.h</span></a></li>
<li class="toclevel-2 tocsection-86"><a href="#Ball.cpp_4"><span class="tocnumber">14.7</span> <span class="toctext">Ball.cpp</span></a></li>
<li class="toclevel-2 tocsection-87"><a href="#PongGameState.h_4"><span class="tocnumber">14.8</span> <span class="toctext">PongGameState.h</span></a></li>
<li class="toclevel-2 tocsection-88"><a href="#PongGameState.cpp_4"><span class="tocnumber">14.9</span> <span class="toctext">PongGameState.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-89"><a href="#Finished"><span class="tocnumber">15</span> <span class="toctext">Finished</span></a></li>
<li class="toclevel-1 tocsection-90"><a href="#All_Source_Files"><span class="tocnumber">16</span> <span class="toctext">All Source Files</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Creating_the_Project">Creating the Project</span></h2>
<p>So, this tutorial is being written for version 4.8.0 of the Engine.  If you are using an older version, I would recommend upgrading to the latest.
</p>
<ol>
<li>Launch the Engine
</li>
<li>Click on New Project
</li>
<li>Select Blueprint -&gt; Blank - We just want to start with a completely empty project
</li>
<li>Target Desktop/Console, Scalable 3D or 2D graphics, and No Starter Content
</li>
<li>Select a Location for your project and a name - I used Pong
</li>
</ol>
<h2><span class="mw-headline" id="Setting_Up_the_World">Setting Up the World</span></h2>
<ol>
<li>Go to the World Outliner in the right hand corner and delete everything under the World - Atmospheric Fog, Floor, Light Source, etc...
</li>
<li>Click Save and Save as PongMap
</li>
</ol>
<p>Now we have a completely blank project with nothing in the world.  So what is next?
</p>
<h2><span class="mw-headline" id="Creating_the_Assets">Creating the Assets</span></h2>
<p>The Following Assets are needed:
</p>
<dl>
<dd>A Paddle
</dd>
<dd>A Background (For the Pong Board)
</dd>
<dd>A Ball
</dd>
<dd>A Goal
</dd>
<dd>A Boundary
</dd>
</dl>
<p>So for these, I drew them in paint and made the background transparent.  You can download the file here:
</p>
<dl>
<dd><a href="/File:PongAssets.png" class="image" title="Pong Assets"><img alt="Pong Assets" src="https://d26ilriwvtzlb.cloudfront.net/3/37/PongAssets.png" width="563" height="470" /></a>
</dd>
</dl>
<p>Or you can create your own.
</p><p>Once you have the .png file containing all of the sprites that you are going to use, drag it into the Content part of the Editor and the .png should be loaded in as a texture.
</p><p>This editor is awesome and allows us to extract the sprites directly from the texture.  The editor will handle creating UPaperSprite Objects for us which contain collision/rendering data - how awesome is that?
</p><p>We are still going to have to modify the collision for the Boundaries however.  The collision data for it is that of a filled square but we want a hollow square.
</p>
<ol>
<li>Double click on the Texture
</li>
<li>Under Details -&gt; Texture, Expand the Options and for the Filter Select Nearest
</li>
<li>Save and close
</li>
<li>Right Click on the Texture and Select Sprite Actions -&gt; Export Sprites
</li>
<li>Click Export.  You should now have 5 sprites in your content folder
</li>
<li>Right Click on the Content Folder and Select New Folder - Call it Sprites
</li>
<li>Drag the three sprites from the Content Folder to the Sprites Folder -&gt; Select Move Here
</li>
<li>Rename the black circle to Ball, the black rectangle to Paddle, the large white box to Background, the smaller white rectangle to Goal, and the hollow rectangle to Bounds
</li>
</ol>
<p>Now we have the sprites that we need to work with to make the pong game!
</p>
<h2><span class="mw-headline" id="Opening_up_the_Code">Opening up the Code</span></h2>
<p>Okay, lets open up the code so that we can start to work with our sprites.
</p>
<ol>
<li>In the Editor, click on File -&gt; Add C++ Class <br />We are going to be creating the background first, so we are going to want to extend the Actor class <br /> Make sure to read up on the Terminology here: <a rel="nofollow" class="external free" href="https://docs.unrealengine.com/latest/INT/GettingStarted/Terminology/index.html">https://docs.unrealengine.com/latest/INT/GettingStarted/Terminology/index.html</a>
</li>
<li>Select Actor as the Class to extend and give it the name "Background"
</li>
<li>Click Create Class <br />Your project should be created now.  Visual Studio will open up and there should be two .h and .cpp files under Source/Pong - Pong.cpp and Background.cpp
</li>
</ol>
<p>Before we get started with Creating the background, we are going to be using Paper2D, so we need to first make sure that we are building the Project with that included.
</p>
<ol>
<li>Open Pong/Pong.Build.cs
</li>
<li>Add "Paper2D" to the PublicDependency ModuleNames
</li>
<li>It should look like this: <code> PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "Paper2D" }); </code> Paper2D will be added as a dependency now.
</li>
<li>Go back into the Editor and select File -&gt; Refresh Visual Studio Project<br />This will update the project so that you can see the Paper2D headers via intellisense.
</li>
</ol>
<h2><span class="mw-headline" id="Creating_the_Background">Creating the Background</span></h2>
<p>So, now we need to get our Background sprite and make it so that the Background Class we created will render the sprite to the screen.  In the Unreal Engine, Components are used in order to create a modular way to attach functionality to objects.   You can read up on components in the UE4 Documentation here: <a rel="nofollow" class="external free" href="https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html">https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html</a><br />Really, the documentation is going to be your friend.
</p><p>So, we have a Background Actor and we want to assign the Background Sprite that we made to it.  So, lets take a look at the API reference to find out if there is any class pre-made for us that will save us a ton of time. Take a look at the Paper2D API reference here: <a rel="nofollow" class="external free" href="https://docs.unrealengine.com/latest/INT/API/Plugins/Paper2D/index.html">https://docs.unrealengine.com/latest/INT/API/Plugins/Paper2D/index.html</a>
</p><p>You'll notice that if you read the description for each of the Classes in the library, you'll find a UPaperSpriteComponent which is defined as: A component that handles rendering and collision for a single instance of a UPaperSprite asset.  This is really nice because we can attach this component to our Actor and have it handle all the rendering and collision. We will want this for each of our sprites (We won't want collision for the background, but we can just disable that).
</p><p>So, lets create a UPaperSpriteComponent in our Background Class.
</p>
<ol>
<li>Open up Background.h
</li>
<li>Add <code> const FObjectInitializer&amp; ObjectInitializer </code> into the constructor <br /> You can see this constructor defined in the generated.h file included if you are curious.
</li>
<li>Add a private variable <code> class UPaperSpriteComponent* Sprite </code> We are using the class keyword because we are making a forward declaration so that we don't have to include the header file that defines UPaperSpriteComponent - we will include the header in the .cpp.
</li>
<li>You header should look like this:
</li>
</ol>
<h3><span class="mw-headline" id="Background.h">Background.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Background.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABackground <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABackground<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Background Sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p>Now we want to attach the UPaperSpriteComponent to this Actor in the constructor.  We have the Sprite in the header just to have a reference to the Component once we attach it.  Now, since we exported the sprites in the editor, there are UPaperSprite objects that are created which we can grab references to.
</p><p>Also, we can create a default UPaperSpriteComponent and attach it to ABackground through the use of the FObjectInitializer object.  We can call the method CreateDefaultSubObject which will attach a SubOject to the Actor and register it.  This is doing the same thing as adding a component to an actor via the editor.  We are just implementing it in C++.
</p>
<h3><span class="mw-headline" id="Background.cpp">Background.cpp</span></h3>
<p>The code for this is as follows, your Background.cpp should look similar to this:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABackground<span class="sy4">::</span><span class="me2">ABackground</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Background Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BackgroundSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Background'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BackgroundSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BackgroundSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<p>Ok, now we have a background actor that renders to the background sprite we created.  Awesome!  Lets test it out.
</p>
<ol>
<li>Save all your files and compile in the editor
</li>
<li>In the Content Browser, go to C++ Classes/Pong - Your Background class should be shown in here
</li>
<li>Drag it out into your world
</li>
</ol>
<p>You should now see your sprite in the world.  This sprite is going to be used as the background.
</p>
<h2><span class="mw-headline" id="Creating_the_Other_Sprites">Creating the Other Sprites</span></h2>
<p>We still need to create classes for the other four sprites in the game - The ball and the paddle.  The ball is going to be another class that we add which extends Actor - we need it to have a render target and collision.
</p>
<ol>
<li>In the editor, add a C++ class which extends Actor
</li>
<li>Name it Ball and click Create class
</li>
</ol>
<p>We also need a class for the paddle.  This class is different in that we are going to be controlling it.  So, it is going to have to handle input.  For this, we want to extend the Pawn class(The pawn class also extends the Actor Class) which is used when we want to create a controllable object in the world.  You might think that the Character Class should be used here instead, but that would be used for a sprite that is going to have animations attached to it.  The pong paddle is never going to be animating.
</p>
<ol>
<li>in the editor, add a C++ class which extends Pawn
</li>
<li>Name it Paddle and click Create class
</li>
</ol>
<p>The Code for the .h and .cpp of each class is below - you may want to try to implement these by yourself before looking at how it is impelemented below to get a better feel for the syntax of the Unreal Engine.
</p>
<h3><span class="mw-headline" id="Ball.h">Ball.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Ball.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABall <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABall<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the ball sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Ball.cpp">Ball.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABall<span class="sy4">::</span><span class="me2">ABall</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Ball Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BallSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Ball'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BallSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BallSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.h">Paddle.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.cpp">Paddle.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Bounds.h">Bounds.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Bounds.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABounds <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABounds<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Component that holds the Bounds Sprite.</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Bounds.cpp">Bounds.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Bounds.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABounds<span class="sy4">::</span><span class="me2">ABounds</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Bounds Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BoundsSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Bounds'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BoundsSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BoundsSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABounds<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABounds<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Goal.h">Goal.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Goal.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API AGoal <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	AGoal<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite that represents a pong goal area</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Goal.cpp">Goal.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Goal.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
AGoal<span class="sy4">::</span><span class="me2">AGoal</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Goal Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> GoalSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Goal'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the GoalSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> GoalSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> AGoal<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> AGoal<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h2><span class="mw-headline" id="Creating_the_GameMode">Creating the GameMode</span></h2>
<p>When we start up our game, we are going to want our own custom GameMode override.  This is where we will set the DefaultPawnClass, the GameStateClass, and the HudClass.  We can also do some initialization here for the game.  
</p>
<ol>
<li>Create a C++ class that extends GameMode, call it PongGameMode
</li>
<li>In the constructor set the DefaultPawnClass to APaddle::StaticClass()<br />This is going to make it so that when you start to play the game, APaddle is spawned which will be the default player-controlled object.  You'll notice that there are a bunch of different Objects created in the world by default when you hit play.  We are going to be creating custom classes for most of these.
</li>
<li>We are going to override the StartPlay() function contained in GameMode.h - You should view the header files to get a feel for all the different functions that you can override
</li>
</ol>
<h3><span class="mw-headline" id="PongGameMode.h">PongGameMode.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameMode.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameMode <span class="sy4">:</span> <span class="kw2">public</span> AGameMode
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">//Constructor where we set the default classes to initialize</span>
	APongGameMode<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Function called to spawn our pawn objects into the world</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> StartPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameMode.cpp">PongGameMode.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
&#160;
&#160;
&#160;
APongGameMode<span class="sy4">::</span><span class="me2">APongGameMode</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	DefaultPawnClass <span class="sy1">=</span> APaddle<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameMode<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&#160;
	Super<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	Super<span class="sy4">::</span><span class="me2">StartMatch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<ol>
<li>Save/Compile
</li>
<li>In the editor, on the right side under World Settings, Set the GameMode Override to PongGameMode
</li>
<li>Save
</li>
</ol>
<p>Now when you hit Play, A Paddle should be spawned into the game.  This is because the PongGameMode creates the default Pawn to spawn as the Paddle.
</p>
<h2><span class="mw-headline" id="Initializing_the_Background.2FCamera.2FPaddle.2FBall">Initializing the Background/Camera/Paddle/Ball</span></h2>
<p>We have a GameMode, Camera, Background, Ball, and Paddle.  So now we need to actually spawn all of these actors into our world.  To do this, we can make a call <code> GetWorld()-&gt;SpawnActor </code>  We will use this to create the Camera.Background, and the Ball.  We will also set the PongCameraActor that we spawn to be our focused view.  When we spawn the background, we are also going to want to set it's size to take up the entire view that we are looking at, so we will have to make some functions in the PongCameraActor/Background classes in order to help us do that.
</p>
<h3><span class="mw-headline" id="Background">Background</span></h3>
<p>For the background, we are going to want a way to set the width/height of the background sprite.  So, three functions were created to handle doing this - SetHeight, SetWidth, and SetDimensions
</p>
<h4><span class="mw-headline" id="Background.h_2">Background.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Background.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABackground <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABackground<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Set the Width of this sprite</span>
	<span class="kw4">void</span> SetWidth<span class="br0">&#40;</span> <span class="kw4">float</span> Width <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Set the Height of this sprite</span>
	<span class="kw4">void</span> SetHeight<span class="br0">&#40;</span> <span class="kw4">float</span> Height <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Set the Width and Height of this sprite via a FVector2D</span>
	<span class="kw4">void</span> SetDimensions<span class="br0">&#40;</span> FVector2D<span class="sy3">&amp;</span> Dimensions <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Background Sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="Background.cpp_2">Background.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABackground<span class="sy4">::</span><span class="me2">ABackground</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Background Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BackgroundSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Background'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BackgroundSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BackgroundSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Set the Width of this sprite</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">SetWidth</span><span class="br0">&#40;</span> <span class="kw4">float</span> Width <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//calculate the new X scale value</span>
	<span class="kw4">float</span> sourceWidth <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetSprite<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetSourceSize<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span><span class="sy4">;</span>
	<span class="kw4">float</span> scale<span class="sy4">;</span>
&#160;
	<span class="co1">//Scale must be &gt; 1 is the sourceWidth &lt; Width and &lt; 1 in the other case</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Width <span class="sy1">&lt;=</span> sourceWidth <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> sourceWidth <span class="sy2">/</span> Width<span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> Width <span class="sy2">/</span> sourceWidth<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Update the current scale with the new value</span>
	FVector scaleV <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>RelativeScale3D<span class="sy4">;</span>
	scaleV.<span class="me1">X</span> <span class="sy1">=</span> scale<span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> scaleV <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Set the Height of this sprite</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">SetHeight</span><span class="br0">&#40;</span> <span class="kw4">float</span> Height <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//calculate the new Z scale value (Camera is orientated so that Z is up/down)</span>
	<span class="kw4">float</span> sourceHeight <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetSprite<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetSourceSize<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Y</span><span class="sy4">;</span>
	<span class="kw4">float</span> scale<span class="sy4">;</span>
&#160;
	<span class="co1">//Scale must be &gt; 1 is the sourceHeight &lt; Height and &lt; 1 in the other case</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Height <span class="sy1">&lt;=</span> sourceHeight <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> sourceHeight <span class="sy2">/</span> Height<span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> Height <span class="sy2">/</span> sourceHeight<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Update the current scale with the new value</span>
	FVector scaleV <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>RelativeScale3D<span class="sy4">;</span>
	scaleV.<span class="me1">Z</span> <span class="sy1">=</span> scale<span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> scaleV <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//Wrapper around SetHeight and SetWidth for a FVector2D</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">SetDimensions</span><span class="br0">&#40;</span> FVector2D<span class="sy3">&amp;</span> Dimensions <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	SetWidth<span class="br0">&#40;</span> Dimensions.<span class="me1">X</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	SetHeight<span class="br0">&#40;</span> Dimensions.<span class="me1">Y</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h3><span class="mw-headline" id="PongCamera">PongCamera</span></h3>
<p>First, we need to create the class.
</p>
<ol>
<li>Go into the Editor, select New C++ Class
</li>
<li>Click the CheckBox for Showing All the Classes
</li>
<li>Search for and Select "CameraActor"
</li>
<li>Call your new class PongCamera
</li>
<li>Create
</li>
</ol>
<p>Since we are making a 2D type of game, we are going to want to use an Orthographic perspective.  The reason for this is that we won't have to worry about the depth of the objects too much (In this game, the y-axis is being used to represent the depth)
</p><p>By extending the CameraActor class, we will default get a CameraComponent constructed onto our Actor.  So, we need to run some initialization on this Class.  Also, we need to create a function to get the Dimensions that we can use to set our background object.  So, lets make this class.
</p>
<h4><span class="mw-headline" id="PongCamera.h">PongCamera.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;Camera/CameraActor.h&quot;</span>
<span class="co2">#include &quot;PongCamera.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
*
*/</span>
UCLASS<span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongCamera <span class="sy4">:</span> <span class="kw2">public</span> ACameraActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span> <span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	APongCamera<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Get a 2D vector representing the Height/Width of what is being current displayed on the screen</span>
	FVector2D GetViewDimensions<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="PongCamera.cpp">PongCamera.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongCamera.h&quot;</span>
&#160;
&#160;
APongCamera<span class="sy4">::</span><span class="me2">APongCamera</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	UCameraComponent<span class="sy2">*</span> Camera <span class="sy1">=</span> GetCameraComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Camera To Orthographic.  Also set the Location and Rotation on the Camera: X is left and right, Z is up and down, Y is depth relative to this camera</span>
	Camera<span class="sy2">-</span><span class="sy1">&gt;</span>ProjectionMode <span class="sy1">=</span> ECameraProjectionMode<span class="sy4">::</span><span class="me2">Orthographic</span><span class="sy4">;</span>
	Camera<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">100.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Camera<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="sy2">-</span><span class="nu17">90.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Camera<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">//Get the Dimensions of what our camera can view</span>
FVector2D APongCamera<span class="sy4">::</span><span class="me2">GetViewDimensions</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	UCameraComponent<span class="sy2">*</span> Camera <span class="sy1">=</span> GetCameraComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	FVector2D dimensions<span class="sy4">;</span>
&#160;
	<span class="co1">//The width is the Orthographic view Width.  Calculate the height from the Aspect ratio and OrthoWidth</span>
	dimensions.<span class="me1">X</span> <span class="sy1">=</span> Camera<span class="sy2">-</span><span class="sy1">&gt;</span>OrthoWidth<span class="sy4">;</span>
	dimensions.<span class="me1">Y</span> <span class="sy1">=</span> <span class="nu0">1</span> <span class="sy2">/</span> <span class="br0">&#40;</span> Camera<span class="sy2">-</span><span class="sy1">&gt;</span>AspectRatio <span class="sy2">/</span> Camera<span class="sy2">-</span><span class="sy1">&gt;</span>OrthoWidth <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">return</span> dimensions<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h3><span class="mw-headline" id="Paddle">Paddle</span></h3>
<p>For the ball, all we are going to do is set it up to spawn to the left on the board.  We also need to remember that our Background has a location of 0,0,0.  So, since we want our Paddle to be visible in front of the board, we are going to set the Y value of the paddle to be greater than that of the Background.  In this case, we will just set it to 10.
</p><p>Now, we could make a function in the paddle to set the starting location based on the background dimensions or the camera view.  But, we are not going to worry about that and we are just going to hard-code in some values.  If you want to attempt to initialize the paddle on the left hand side via a function call, it would make for a good practice exercise at this point.
</p>
<h4><span class="mw-headline" id="Paddle.h_2">Paddle.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="Paddle.cpp_2">Paddle.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Paddle to the Left</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">10</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Ball">Ball</span></h3>
<p>For the ball, we are going to spawn it right in the middle of the screen instead of to the left with the paddle.  This is a very similar setup.
</p>
<h4><span class="mw-headline" id="Ball.h_2">Ball.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Ball.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABall <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABall<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the ball sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="Ball.cpp_2">Ball.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABall<span class="sy4">::</span><span class="me2">ABall</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Ball Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BallSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Ball'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BallSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BallSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the ball to spawn in the middle of the Board and scale its size down</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">10.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.07f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.07f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameMode">PongGameMode</span></h3>
<p>Finally, we are going to actually spawn everything in the GameMode's StartPlay() function.  This is where we are going to tie the background and camera together too.
</p>
<h4><span class="mw-headline" id="PongGameMode.h_2">PongGameMode.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameMode.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameMode <span class="sy4">:</span> <span class="kw2">public</span> AGameMode
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">//Constructor where we set the default classes to initialize</span>
	APongGameMode<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Function called to spawn our pawn objects into the world</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> StartPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="PongGameMode.cpp_2">PongGameMode.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PongCamera.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
&#160;
APongGameMode<span class="sy4">::</span><span class="me2">APongGameMode</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	DefaultPawnClass <span class="sy1">=</span> APaddle<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameMode<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	UWorld<span class="sy2">*</span> <span class="kw4">const</span> World <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> World <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		APongCamera<span class="sy2">*</span> camera <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>APongCamera<span class="sy1">&gt;</span><span class="br0">&#40;</span> APongCamera<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Camera is set to the CameraActor created</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>GetFirstPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetViewTarget<span class="br0">&#40;</span> camera <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Set the background to fill up the entire view of the camera</span>
		ABackground<span class="sy2">*</span> background <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABackground<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABackground<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		FVector2D dimensions <span class="sy1">=</span> camera<span class="sy2">-</span><span class="sy1">&gt;</span>GetViewDimensions<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		background<span class="sy2">-</span><span class="sy1">&gt;</span>SetDimensions<span class="br0">&#40;</span> dimensions <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Ball into the World</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABall<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABall<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	Super<span class="sy4">::</span><span class="me2">StartMatch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Play the game and you should see a Pong game in the works!  There should be a paddle, a ball, and a background in your view.
</p>
<h2><span class="mw-headline" id="Moving_the_Paddle">Moving the Paddle</span></h2>
<p>So, now we need to make it where we can move the paddle up and down.  To do this, we are going to bind the up and down arrow keys to call a function within the Paddle class.  So, lets set this up.
</p>
<ol>
<li>In the editor, go to Edit -&gt; Project Settings
</li>
<li>Under Engine go to Input
</li>
<li>Create a new Axis Mapping and Call it "Move"
</li>
<li>Create two mappings under the group
</li>
<li>For the first one, select the Up key and set the scale to 1.0
</li>
<li>For the second one, select the Down Key and set the scale to -1.0
</li>
<li>Exit out of the Settings
</li>
</ol>
<p>Go back to Visual Studio and open up Paddle.cpp.  We are going to modify this class to handle the input.  Now, it may be the case where you want to create your own custom movement component and custom player controller.  We are not going to do this because the paddle has very basic movement functionality that can be handled with ease inside the paddle class.  I am mentioning this because if you are going to create more complex handling of the Player's will, then you might want your own playercontroller.  You can read more on it here: <a rel="nofollow" class="external free" href="https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Controller/PlayerController/">https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Controller/PlayerController/</a>
</p><p>Ok, now lets bind the input key to our paddle and update the movement of the paddle within the Tick function, please read the comments in the code to see how this is working.
</p>
<h3><span class="mw-headline" id="Paddle.h_3">Paddle.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Function called to move the paddle.  Scale represents up/down</span>
	<span class="kw4">void</span> MovePaddle<span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.cpp_3">Paddle.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPawnMovementComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;MovementComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Paddle to the Left</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">10</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the sprites location based on the movement input</span>
	FVector move <span class="sy1">=</span> GetMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	FVector location <span class="sy1">=</span> GetActorLocation<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	location <span class="sy2">+</span><span class="sy1">=</span> move<span class="sy2">*</span>DeltaTime<span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> location <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">const</span> UInputSettings<span class="sy2">*</span> settings <span class="sy1">=</span> GetDefault<span class="sy1">&lt;</span>UInputSettings<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create movement mappings for upwards and downwards movement, the float value tells if we are moving the paddle up or down</span>
	<span class="kw4">const</span> FInputAxisKeyMapping upKey<span class="br0">&#40;</span><span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Up</span>, <span class="nu17">1.0f</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw4">const</span> FInputAxisKeyMapping downKey<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Down</span>, <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Add the axis mappings</span>
	<span class="co1">// Once this code is executed, these mappings will be added in the editors Input Settings!</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> upKey <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> downKey <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Bind the axis - if we press up, the function is called with 1.0.  if we press down, the function is called with -1.0.</span>
	<span class="co1">// if we do nothing, the function is called with 0.0f</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAxis<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, <span class="kw3">this</span>, <span class="sy3">&amp;</span>APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span><span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Add a movement input, hardcoding in 75.0f for the vector</span>
	FVector direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">75.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ConsumeInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	AddMovementInput<span class="br0">&#40;</span> direction, Scale <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Running this, you'll notice that the paddle moves up and down but there is a problem!  It can go straight off the screen.  This is the next issue that we'll have to fix.
</p>
<h2><span class="mw-headline" id="Adding_Bounds">Adding Bounds</span></h2>
<p>There are three different bounds that need to be added to the Pong game.  Bounds for encompassing the border of the gameboard - you don't want the ball to go off screen ever.  Also there need to be bounds for the goals when the pong ball counts as a score for the player or AI.  
</p><p>There are many ways to go about implementing this and I chose to use some sprites in order to handle collisions/overlap events.  This seemed like the easiest way to me to create the necessary data to handle collision.  Now we are going to go back into some of the classes created earlier and modify them to handle/generate events that we want.
</p>
<h3><span class="mw-headline" id="Bounds">Bounds</span></h3>
<p>The Bounds Class was modified to have a function to set it's scale (Since the bounds are being generated from a Sprite that is relative to the background Sprite, we want these two Objects to have the same scale).  We also want the bounds to be set up for collision correctly.  It should Block everything.  The position of the Bounds should also be the same as the paddle/ball in the world - This is hardcoded to 50.0 units.
</p><p>Before we go in and modify the code, we need to set the collision to be correct on the sprite itself.  
</p>
<ol>
<li>Go to the Bounds Sprite in the editor and double click on it
</li>
<li>Click on Edit Collision
</li>
<li>You will notice that the collision is set to be a filled rectangle.  We DO NOT want this.  In order to fix this, we are going to have to modify the collision data of the sprite.
</li>
<li>Under Collision/Collision Shapes on the right hand side, delete the current collision shape, we do not want it
</li>
<li>Add Four new collision shapes - Each a rectangle that covers one edge of the sprite.  Use the tips in the top-left of the editor for help with how to insert/remove vertices.
</li>
</ol>
<p>Once your finished, your collision is probably not going to be perfect, but it will be decent.  You can get a feel for working visually with the collision geometry.  Now, lets go edit the Bounds Class.
</p>
<h4><span class="mw-headline" id="Bounds.h_2">Bounds.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Bounds.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABounds <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABounds<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Set the X,Y, and Z scale for the sprite</span>
	<span class="kw4">void</span> SetScale<span class="br0">&#40;</span> FVector<span class="sy3">&amp;</span> vector <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Component that holds the Bounds Sprite.</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="Bounds.cpp_2">Bounds.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Bounds.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABounds<span class="sy4">::</span><span class="me2">ABounds</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Bounds Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BoundsSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Bounds'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BoundsSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BoundsSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Make sure that this component blocks everything</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetCollisionEnabled<span class="br0">&#40;</span> ECollisionEnabled<span class="sy4">::</span><span class="me2">QueryAndPhysics</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetObjectType<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_WorldStatic</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Don't draw this sprite</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetVisibility<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABounds<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Bounds to be the same as the paddle - This is just hardcoded to 50 units</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Ensure that this component's name is &quot;Bounds&quot;</span>
	Rename<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABounds<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Set the X,Y, and Z scale for the sprite</span>
<span class="kw4">void</span> ABounds<span class="sy4">::</span><span class="me2">SetScale</span><span class="br0">&#40;</span> FVector<span class="sy3">&amp;</span> vector <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> vector <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
The Background class was also modified to add in an accessor for the Scale.  The GameMode was also updated to spawn the bounds.
</p>
<h3><span class="mw-headline" id="Background.h_3">Background.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Background.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABackground <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABackground<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Set the Width of this sprite</span>
	<span class="kw4">void</span> SetWidth<span class="br0">&#40;</span> <span class="kw4">float</span> Width <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Set the Height of this sprite</span>
	<span class="kw4">void</span> SetHeight<span class="br0">&#40;</span> <span class="kw4">float</span> Height <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Set the Width and Height of this sprite via a FVector2D</span>
	<span class="kw4">void</span> SetDimensions<span class="br0">&#40;</span> FVector2D<span class="sy3">&amp;</span> Dimensions <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Get the scale</span>
	FVector<span class="sy3">&amp;</span> GetScale<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Background Sprite</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Background.cpp_3">Background.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABackground<span class="sy4">::</span><span class="me2">ABackground</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Background Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BackgroundSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Background'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BackgroundSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BackgroundSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Set the Width of this sprite</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">SetWidth</span><span class="br0">&#40;</span> <span class="kw4">float</span> Width <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//calculate the new X scale value</span>
	<span class="kw4">float</span> sourceWidth <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetSprite<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetSourceSize<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span><span class="sy4">;</span>
	<span class="kw4">float</span> scale<span class="sy4">;</span>
&#160;
	<span class="co1">//Scale must be &gt; 1 is the sourceWidth &lt; Width and &lt; 1 in the other case</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Width <span class="sy1">&lt;=</span> sourceWidth <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> sourceWidth <span class="sy2">/</span> Width<span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> Width <span class="sy2">/</span> sourceWidth<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Update the current scale with the new value</span>
	FVector scaleV <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>RelativeScale3D<span class="sy4">;</span>
	scaleV.<span class="me1">X</span> <span class="sy1">=</span> scale<span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> scaleV <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Set the Height of this sprite</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">SetHeight</span><span class="br0">&#40;</span> <span class="kw4">float</span> Height <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//calculate the new Z scale value (Camera is orientated so that Z is up/down)</span>
	<span class="kw4">float</span> sourceHeight <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetSprite<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetSourceSize<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Y</span><span class="sy4">;</span>
	<span class="kw4">float</span> scale<span class="sy4">;</span>
&#160;
	<span class="co1">//Scale must be &gt; 1 is the sourceHeight &lt; Height and &lt; 1 in the other case</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Height <span class="sy1">&lt;=</span> sourceHeight <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> sourceHeight <span class="sy2">/</span> Height<span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		scale <span class="sy1">=</span> Height <span class="sy2">/</span> sourceHeight<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Update the current scale with the new value</span>
	FVector scaleV <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>RelativeScale3D<span class="sy4">;</span>
	scaleV.<span class="me1">Z</span> <span class="sy1">=</span> scale<span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> scaleV <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//Wrapper around SetHeight and SetWidth for a FVector2D</span>
<span class="kw4">void</span> ABackground<span class="sy4">::</span><span class="me2">SetDimensions</span><span class="br0">&#40;</span> FVector2D<span class="sy3">&amp;</span> Dimensions <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	SetWidth<span class="br0">&#40;</span> Dimensions.<span class="me1">X</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	SetHeight<span class="br0">&#40;</span> Dimensions.<span class="me1">Y</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
FVector<span class="sy3">&amp;</span> ABackground<span class="sy4">::</span><span class="me2">GetScale</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>RelativeScale3D<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameMode.h_3">PongGameMode.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameMode.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameMode <span class="sy4">:</span> <span class="kw2">public</span> AGameMode
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">//Constructor where we set the default classes to initialize</span>
	APongGameMode<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Function called to spawn our pawn objects into the world</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> StartPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameMode.cpp_3">PongGameMode.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PongCamera.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;Bounds.h&quot;</span>
<span class="co2">#include &quot;Goal.h&quot;</span>
&#160;
APongGameMode<span class="sy4">::</span><span class="me2">APongGameMode</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	DefaultPawnClass <span class="sy1">=</span> APaddle<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameMode<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	UWorld<span class="sy2">*</span> <span class="kw4">const</span> World <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> World <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		APongCamera<span class="sy2">*</span> camera <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>APongCamera<span class="sy1">&gt;</span><span class="br0">&#40;</span> APongCamera<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Camera is set to the CameraActor created</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>GetFirstPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetViewTarget<span class="br0">&#40;</span> camera <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Set the background to fill up the entire view of the camera</span>
		ABackground<span class="sy2">*</span> background <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABackground<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABackground<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		FVector2D dimensions <span class="sy1">=</span> camera<span class="sy2">-</span><span class="sy1">&gt;</span>GetViewDimensions<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		background<span class="sy2">-</span><span class="sy1">&gt;</span>SetDimensions<span class="br0">&#40;</span> dimensions <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Ball into the World</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABall<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABall<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		FVector scale <span class="sy1">=</span> background<span class="sy2">-</span><span class="sy1">&gt;</span>GetScale<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Bounds into the World</span>
		ABounds<span class="sy2">*</span> bounds <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABounds<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABounds<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		bounds<span class="sy2">-</span><span class="sy1">&gt;</span>SetScale<span class="br0">&#40;</span> scale <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	Super<span class="sy4">::</span><span class="me2">StartMatch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Finally, we want to make it so that the Paddle is unable to move once it hits the bounds.  In order to do this, two booleans will be added to the Paddle header - MoveUp and MoveDown.  These will represent when the paddle is able to move up and when the paddle is able to move down.  In order to set these values, two functions will need to be overridden - NotifyActorBeginOverlap and NotifyActorEndOverlap.  These two functions will be called when the Actor Overlaps with another Actor.  In this case, we will be waiting for when the paddle starts to overlap with the bounds and we will force the paddle to stop moving.
</p>
<h3><span class="mw-headline" id="Paddle.h_4">Paddle.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Function called to move the paddle.  Scale represents up/down</span>
	<span class="kw4">void</span> MovePaddle<span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle begins to overlap another Actor</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorBeginOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle ends overlap</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorEndOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">protected</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	UPROPERTY<span class="br0">&#40;</span> EditAnywhere, BlueprintReadWrite, Category <span class="sy1">=</span> Paddle <span class="br0">&#41;</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Booleans for keeping track of valid movement directions</span>
	<span class="kw4">bool</span> MoveUp<span class="sy4">;</span>
	<span class="kw4">bool</span> MoveDown<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.cpp_4">Paddle.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPawnMovementComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;MovementComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Can initially move in all directions</span>
	MoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	MoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Paddle to the Left</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the sprites location based on the movement input</span>
	FVector move <span class="sy1">=</span> GetMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span> MoveUp <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="sy3">||</span> <span class="br0">&#40;</span> MoveDown <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FVector location <span class="sy1">=</span> GetActorLocation<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		location <span class="sy2">+</span><span class="sy1">=</span> move<span class="sy2">*</span>DeltaTime<span class="sy4">;</span>
		Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> location <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">const</span> UInputSettings<span class="sy2">*</span> settings <span class="sy1">=</span> GetDefault<span class="sy1">&lt;</span>UInputSettings<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create movement mappings for upwards and downwards movement, the float value tells if we are moving the paddle up or down</span>
	<span class="kw4">const</span> FInputAxisKeyMapping upKey<span class="br0">&#40;</span><span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Up</span>, <span class="nu17">1.0f</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw4">const</span> FInputAxisKeyMapping downKey<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Down</span>, <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Add the axis mappings</span>
	<span class="co1">// Once this code is executed, these mappings will be added in the editors Input Settings!</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> upKey <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> downKey <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Bind the axis - if we press up, the function is called with 1.0.  if we press down, the function is called with -1.0.</span>
	<span class="co1">// if we do nothing, the function is called with 0.0f</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAxis<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, <span class="kw3">this</span>, <span class="sy3">&amp;</span>APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the sprite to generate overlap events for world-static objects -&gt; The Bounds is set to World Static, so this should generate an overlap event now</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetCollisionEnabled<span class="br0">&#40;</span> ECollisionEnabled<span class="sy4">::</span><span class="me2">QueryAndPhysics</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetObjectType<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_Pawn</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetResponseToChannel<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_WorldStatic</span>, ECollisionResponse<span class="sy4">::</span><span class="me2">ECR_Overlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span><span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Add a movement input, hardcoding in 75.0f for the vector</span>
	FVector direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">75.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ConsumeInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	AddMovementInput<span class="br0">&#40;</span> direction, Scale <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorBeginOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FVector prev <span class="sy1">=</span> GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetLastInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//If moving into a bound, set the movement in that direction to false</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			MoveUp <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			MoveDown <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorEndOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Out of the bounds so enable all movement inputs</span>
		MoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		MoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h2><span class="mw-headline" id="Creating_the_GameState">Creating the GameState</span></h2>
<p>Next, a game state will be added.  This is a state machine will handle the custom states that the pong game goes through.  Before the game starts and you can move your paddle around, we are going to make it so that you must press the spacebar first.  This will be handled in the GameState class as a specific state.  We will define custom states in the header of the class.
</p>
<ol>
<li>In the Editor Add a New C++ Class
</li>
<li>Select Game State as the Class to Extend
</li>
<li>Name the new Class "PongGameState" and Create
</li>
</ol>
<p>Some states that will be added will be as follows:
</p>
<dl>
<dd>WAITING_TO_START
</dd>
<dd>PUSH_BALL
</dd>
<dd>PLAYING
</dd>
<dd>UPDATE_SCORE
</dd>
</dl>
<p>These are all personally chosen and you can make whatever you desire.  The GameMode will also need to be updated to set this as the default gamestate to use.
</p>
<h3><span class="mw-headline" id="PongGameState.h">PongGameState.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameState.h&quot;</span>
<span class="co2">#include &quot;PongGameState.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameState <span class="sy4">:</span> <span class="kw2">public</span> AGameState
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
	<span class="kw2">enum</span> PONG_STATES
	<span class="br0">&#123;</span>
		WAITING_TO_START,
		PUSH_BALL,
		PLAYING,
		UPDATE_SCORE
	<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	APongGameState<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Tick called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The current state the game is in</span>
	PONG_STATES CurrentState<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameState.cpp">PongGameState.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameState.h&quot;</span>
&#160;
APongGameState<span class="sy4">::</span><span class="me2">APongGameState</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// If match is in progress, run the custom state machine</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> IsMatchInProgress<span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">switch</span> <span class="br0">&#40;</span> CurrentState <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">:</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">UPDATE_SCORE</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">default</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameMode.h_4">PongGameMode.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameMode.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameMode <span class="sy4">:</span> <span class="kw2">public</span> AGameMode
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">//Constructor where we set the default classes to initialize</span>
	APongGameMode<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Function called to spawn our pawn objects into the world</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> StartPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameMode.cpp_4">PongGameMode.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PongCamera.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;Bounds.h&quot;</span>
<span class="co2">#include &quot;Goal.h&quot;</span>
<span class="co2">#include &quot;PongGameState.h&quot;</span>
&#160;
APongGameMode<span class="sy4">::</span><span class="me2">APongGameMode</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Set Default Classes</span>
	DefaultPawnClass <span class="sy1">=</span> APaddle<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	GameStateClass <span class="sy1">=</span> APongGameState<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameMode<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	UWorld<span class="sy2">*</span> <span class="kw4">const</span> World <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> World <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		APongCamera<span class="sy2">*</span> camera <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>APongCamera<span class="sy1">&gt;</span><span class="br0">&#40;</span> APongCamera<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Camera is set to the CameraActor created</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>GetFirstPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetViewTarget<span class="br0">&#40;</span> camera <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Set the background to fill up the entire view of the camera</span>
		ABackground<span class="sy2">*</span> background <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABackground<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABackground<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		FVector2D dimensions <span class="sy1">=</span> camera<span class="sy2">-</span><span class="sy1">&gt;</span>GetViewDimensions<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		background<span class="sy2">-</span><span class="sy1">&gt;</span>SetDimensions<span class="br0">&#40;</span> dimensions <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Ball into the World</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABall<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABall<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		FVector scale <span class="sy1">=</span> background<span class="sy2">-</span><span class="sy1">&gt;</span>GetScale<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Bounds into the World</span>
		ABounds<span class="sy2">*</span> bounds <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABounds<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABounds<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		bounds<span class="sy2">-</span><span class="sy1">&gt;</span>SetScale<span class="br0">&#40;</span> scale <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	Super<span class="sy4">::</span><span class="me2">StartMatch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h2><span class="mw-headline" id="Adding_Movement_to_the_Ball">Adding Movement to the Ball</span></h2>
<p>Movement needs to be added to the ball.  The ball should start out by shooting off in one direction (Towards the player in this game).  In order to do this, the PongGameState class will be modified to cause the ball to shoot off to the left upon reaching the PUSH_BALL state.  Also, collision will have to be updated for the Ball so that it interacts with the paddle and the Bounds correctly.
</p><p>The Ball needs to generate Hit Events, so physics must be simulated.  Direction and Speed need to be kept track of for the ball.  When a Hit Event Occurs, the direction should be updated so that the Ball is reflected in the right direction.  Not only this, but the ball should also gain some velocity moving up/down if it hits the paddle.
</p><p><b>Note: There may be updates to some classes that I did not catch.  I changed quite a few things.  Make sure that in all the custom Classes with sprites that you add "RootComponent = Sprite;" in the constructor.  I may have changed some of the initialization around for some of the classes as well</b>
</p><p>Some changes that need to be made to get this all working are as follows:
</p>
<dl>
<dd>Add a accessor for the Z velocity in the paddle class
</dd>
<dd>Add velocity/direction to the Ball class
</dd>
<dd>Add movement updates in the tick function of the Ball class
</dd>
<dd>Override the NotifyHit event in the Ball class to update the direction/velocity
</dd>
<dd>Update the GameState to shoot off the ball - A function will be added to the Ball Class to start movement
</dd>
</dl>
<p><br />
</p>
<h3><span class="mw-headline" id="Ball.h_3">Ball.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Ball.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABall <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABall<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to start moving the Ball</span>
	<span class="kw4">void</span> StartMove<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// notify hit</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyHit<span class="br0">&#40;</span> UPrimitiveComponent<span class="sy2">*</span> MyComp, AActor<span class="sy2">*</span> Other, UPrimitiveComponent<span class="sy2">*</span> OtherComp, <span class="kw4">bool</span> bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, <span class="kw4">const</span> FHitResult<span class="sy3">&amp;</span> Hit <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">protected</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the ball sprite</span>
	UPROPERTY<span class="br0">&#40;</span> EditAnywhere, BlueprintReadWrite, Category <span class="sy1">=</span> Ball <span class="br0">&#41;</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The direction the ball is traveling in</span>
	FVector Direction<span class="sy4">;</span>
&#160;
	<span class="co1">//Velocity of the ball.  How Fast it is travelling. Distance/Time</span>
	<span class="kw4">float</span> Velocity<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Ball.cpp_3">Ball.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABall<span class="sy4">::</span><span class="me2">ABall</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Ball Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BallSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Ball'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Material we want to set this ball to: Note, you should have created this in the Editor</span>
	<span class="co1">//ConstructorHelpers::FObjectFinder&lt;UPhysicalMaterial&gt; BallPhysicsRef( TEXT( &quot;PhysicalMaterial'/Game/Materials/BallMaterial'&quot; ) );</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BallSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BallSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	RootComponent <span class="sy1">=</span> Sprite<span class="sy4">;</span>
&#160;
	<span class="co1">//Set the physics properties</span>
	<span class="co1">//Restrict the translation/rotation axis</span>
	SetActorEnableCollision<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetEnableGravity<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetConstraintMode<span class="br0">&#40;</span> EDOFMode<span class="sy4">::</span><span class="me2">SixDOF</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockXRotation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockYRotation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockZRotation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockXTranslation <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockYTranslation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockZTranslation <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Enable Hit Notifies</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetNotifyRigidBodyCollision<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the ball to spawn in the middle of the Board and scale its size down</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">50.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.07f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.07f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetLinearDamping<span class="br0">&#40;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSimulatePhysics<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set a time variable to be &lt; one hundreth of a second</span>
	<span class="kw4">float</span> <span class="kw3">time</span> <span class="sy1">=</span> <span class="br0">&#40;</span>DeltaTime <span class="sy1">&gt;</span> <span class="nu17">0.01f</span> <span class="sy4">?</span> <span class="nu17">0.0083f</span> <span class="sy4">:</span> DeltaTime<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Update the translation based on the time variable</span>
	FTransform transform <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetRelativeTransform<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	transform.<span class="me1">AddToTranslation</span><span class="br0">&#40;</span> Direction <span class="sy2">*</span> Velocity <span class="sy2">*</span> <span class="kw3">time</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeTransform<span class="br0">&#40;</span> transform <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">StartMove</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">// Move the ball via setting the Direction and Velocity</span>
	Direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">1.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> <span class="nu17">250.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//The Ball has hit something</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">NotifyHit</span><span class="br0">&#40;</span> UPrimitiveComponent<span class="sy2">*</span> MyComp, AActor<span class="sy2">*</span> Other, UPrimitiveComponent<span class="sy2">*</span> OtherComp, <span class="kw4">bool</span> bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, <span class="kw4">const</span> FHitResult<span class="sy3">&amp;</span> Hit <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Make sure that the physics velocities are set to 0.  We are keeping track of direction/speed.  We want this hit event so that we can easily mirror the direction</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAllPhysicsAngularVelocity<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAllPhysicsLinearVelocity<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Mirror the Direction so that we can get the new trajectory of the ball</span>
	Direction <span class="sy1">=</span> Direction.<span class="me1">MirrorByVector</span><span class="br0">&#40;</span> HitNormal <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//If the ball hits the paddle, add Z velocity to the ball (This can become very fast)</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Other<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Paddle&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		APaddle<span class="sy2">*</span> paddle <span class="sy1">=</span> <span class="br0">&#40;</span>APaddle<span class="sy2">*</span><span class="br0">&#41;</span>Other<span class="sy4">;</span>
		Direction.<span class="me1">Z</span> <span class="sy2">+</span><span class="sy1">=</span> <span class="br0">&#40;</span>paddle<span class="sy2">-</span><span class="sy1">&gt;</span>GetZVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">/</span> Velocity<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.h_5">Paddle.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Function called to move the paddle.  Scale represents up/down</span>
	<span class="kw4">void</span> MovePaddle<span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle begins to overlap another Actor</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorBeginOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle ends overlap</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorEndOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// How fast the paddle is moving up or down</span>
	<span class="kw4">float</span> GetZVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">protected</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	UPROPERTY<span class="br0">&#40;</span> EditAnywhere, BlueprintReadWrite, Category <span class="sy1">=</span> Paddle <span class="br0">&#41;</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Booleans for keeping track of valid movement directions</span>
	<span class="kw4">bool</span> MoveUp<span class="sy4">;</span>
	<span class="kw4">bool</span> MoveDown<span class="sy4">;</span>
&#160;
	<span class="co1">//How fast the paddle is moving</span>
	<span class="kw4">float</span> Velocity<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.cpp_5">Paddle.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	RootComponent <span class="sy1">=</span> Sprite<span class="sy4">;</span>
&#160;
	ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPawnMovementComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;MovementComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Can initially move in all directions</span>
	MoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	MoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the sprite to generate overlap events for world-static objects -&gt; The Bounds is set to World Static, so this should generate an overlap event now</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetCollisionEnabled<span class="br0">&#40;</span> ECollisionEnabled<span class="sy4">::</span><span class="me2">QueryAndPhysics</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetObjectType<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_Pawn</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetResponseToChannel<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_WorldStatic</span>, ECollisionResponse<span class="sy4">::</span><span class="me2">ECR_Overlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSimulatePhysics<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Paddle to the Left</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
&#160;
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Ensure that this component's name is &quot;Paddle&quot;</span>
	Rename<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;Paddle&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the sprites location based on the movement input</span>
	FVector move <span class="sy1">=</span> GetMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span> MoveUp <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="sy3">||</span> <span class="br0">&#40;</span> MoveDown <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FTransform loc <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetRelativeTransform<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		loc.<span class="me1">AddToTranslation</span><span class="br0">&#40;</span> move<span class="sy2">*</span>DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
		Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeTransform<span class="br0">&#40;</span> loc <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">const</span> UInputSettings<span class="sy2">*</span> settings <span class="sy1">=</span> GetDefault<span class="sy1">&lt;</span>UInputSettings<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create movement mappings for upwards and downwards movement, the float value tells if we are moving the paddle up or down</span>
	<span class="kw4">const</span> FInputAxisKeyMapping upKey<span class="br0">&#40;</span><span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Up</span>, <span class="nu17">1.0f</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw4">const</span> FInputAxisKeyMapping downKey<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Down</span>, <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Add the axis mappings</span>
	<span class="co1">// Once this code is executed, these mappings will be added in the editors Input Settings!</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> upKey <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> downKey <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Bind the axis - if we press up, the function is called with 1.0.  if we press down, the function is called with -1.0.</span>
	<span class="co1">// if we do nothing, the function is called with 0.0f</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAxis<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, <span class="kw3">this</span>, <span class="sy3">&amp;</span>APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Velocity <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span><span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Add a movement input, hardcoding in 75.0f for the vector</span>
	FVector direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">75.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ConsumeInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	AddMovementInput<span class="br0">&#40;</span> direction, Scale <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> Scale <span class="sy2">*</span> <span class="nu17">75.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorBeginOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FVector prev <span class="sy1">=</span> GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetLastInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//If moving into a bound, set the movement in that direction to false</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			MoveUp <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			MoveDown <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorEndOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Out of the bounds so enable all movement inputs</span>
		MoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		MoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//Get the ZVelocity (How fast the paddle is moving up or down)</span>
<span class="kw4">float</span> APaddle<span class="sy4">::</span><span class="me2">GetZVelocity</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> Velocity<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameState.h_2">PongGameState.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameState.h&quot;</span>
<span class="co2">#include &quot;PongGameState.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameState <span class="sy4">:</span> <span class="kw2">public</span> AGameState
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
	<span class="kw2">enum</span> PONG_STATES
	<span class="br0">&#123;</span>
		WAITING_TO_START,
		PUSH_BALL,
		PLAYING,
		UPDATE_SCORE
	<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	APongGameState<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Tick called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">//Mutator for the reference to the Ball</span>
	<span class="kw4">void</span> SetBall<span class="br0">&#40;</span> <span class="kw2">class</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The current state the game is in</span>
	PONG_STATES CurrentState<span class="sy4">;</span>
&#160;
	<span class="co1">//Reference to the Ball</span>
	<span class="kw2">class</span> ABall<span class="sy2">*</span> Ball<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameState.cpp_2">PongGameState.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameState.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
&#160;
APongGameState<span class="sy4">::</span><span class="me2">APongGameState</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// If match is in progress, run the custom state machine</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> IsMatchInProgress<span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">switch</span> <span class="br0">&#40;</span> CurrentState <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">:</span>
			Ball<span class="sy2">-</span><span class="sy1">&gt;</span>StartMove<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">:</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">UPDATE_SCORE</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">default</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">SetBall</span><span class="br0">&#40;</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	this<span class="sy2">-</span><span class="sy1">&gt;</span>Ball <span class="sy1">=</span> Ball<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
The Ball should now move around in the world and collide/bounce off of everything.  If you move the paddle and hit the ball, the ball should move up/down in the direction that you hit it.
</p>
<h2><span class="mw-headline" id="Goals.2FPaddle_AI">Goals/Paddle AI</span></h2>
<p>The next step will be to add in the goals.  A way to know when the Ball is overlapping a goal will also need to be known in the gamestate in order to move the state forwards when a goal is made.  In order to do this, an overlap event will be added that will be called with the overlap happens.
</p><p>Also, a PaddleAI class will be made that extends the Paddle Class.  This will control the AI for the paddle.
</p>
<ol>
<li>Create a new C++ Class
</li>
<li>Select the Paddle Class as the class to extend
</li>
<li>Name the new Class "PaddleAI" and create
</li>
</ol>
<h3><span class="mw-headline" id="Paddle_2">Paddle</span></h3>
<p>A GetPosition Function has been added to this class in order to get where the paddle currently is.  This is used when setting the locations of the Goals because we want the goals to be located behind the paddles.  The renaming in the BeginPlay() method was also moved to the GameMode as part of initialization there due to double renaming once the PaddleAI class was created.
</p>
<h4><span class="mw-headline" id="Paddle.h_6">Paddle.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Function called to move the paddle.  Scale represents up/down</span>
	<span class="kw4">void</span> MovePaddle<span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle begins to overlap another Actor</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorBeginOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle ends overlap</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorEndOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// How fast the paddle is moving up or down</span>
	<span class="kw4">float</span> GetZVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Get the location of the sprite</span>
	FVector2D GetPosition<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">protected</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	UPROPERTY<span class="br0">&#40;</span> EditAnywhere, BlueprintReadWrite, Category <span class="sy1">=</span> Paddle <span class="br0">&#41;</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Booleans for keeping track of valid movement directions</span>
	<span class="kw4">bool</span> MoveUp<span class="sy4">;</span>
	<span class="kw4">bool</span> MoveDown<span class="sy4">;</span>
&#160;
	<span class="co1">//How fast the paddle is moving</span>
	<span class="kw4">float</span> Velocity<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="Paddle.cpp_6">Paddle.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	RootComponent <span class="sy1">=</span> Sprite<span class="sy4">;</span>
&#160;
	ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPawnMovementComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;MovementComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Can initially move in all directions</span>
	MoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	MoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the sprite to generate overlap events for world-static objects -&gt; The Bounds is set to World Static, so this should generate an overlap event now</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetCollisionEnabled<span class="br0">&#40;</span> ECollisionEnabled<span class="sy4">::</span><span class="me2">QueryAndPhysics</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetObjectType<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_Pawn</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetResponseToChannel<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_WorldStatic</span>, ECollisionResponse<span class="sy4">::</span><span class="me2">ECR_Overlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSimulatePhysics<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Paddle to the Left</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
&#160;
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the sprites location based on the movement input</span>
	FVector move <span class="sy1">=</span> GetMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span> MoveUp <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="sy3">||</span> <span class="br0">&#40;</span> MoveDown <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FTransform loc <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetRelativeTransform<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		loc.<span class="me1">AddToTranslation</span><span class="br0">&#40;</span> move<span class="sy2">*</span>DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
		Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeTransform<span class="br0">&#40;</span> loc <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">const</span> UInputSettings<span class="sy2">*</span> settings <span class="sy1">=</span> GetDefault<span class="sy1">&lt;</span>UInputSettings<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create movement mappings for upwards and downwards movement, the float value tells if we are moving the paddle up or down</span>
	<span class="kw4">const</span> FInputAxisKeyMapping upKey<span class="br0">&#40;</span><span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Up</span>, <span class="nu17">1.0f</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw4">const</span> FInputAxisKeyMapping downKey<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Down</span>, <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Add the axis mappings</span>
	<span class="co1">// Once this code is executed, these mappings will be added in the editors Input Settings!</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> upKey <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> downKey <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Bind the axis - if we press up, the function is called with 1.0.  if we press down, the function is called with -1.0.</span>
	<span class="co1">// if we do nothing, the function is called with 0.0f</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAxis<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, <span class="kw3">this</span>, <span class="sy3">&amp;</span>APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Velocity <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span><span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Add a movement input, hardcoding in 75.0f for the vector</span>
	FVector direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">75.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ConsumeInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	AddMovementInput<span class="br0">&#40;</span> direction, Scale <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> Scale <span class="sy2">*</span> <span class="nu17">75.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorBeginOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FVector prev <span class="sy1">=</span> GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetLastInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//If moving into a bound, set the movement in that direction to false</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			MoveUp <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			MoveDown <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorEndOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Out of the bounds so enable all movement inputs</span>
		MoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		MoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//Get the ZVelocity (How fast the paddle is moving up or down)</span>
<span class="kw4">float</span> APaddle<span class="sy4">::</span><span class="me2">GetZVelocity</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> Velocity<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
FVector2D APaddle<span class="sy4">::</span><span class="me2">GetPosition</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	FVector2D location<span class="sy4">;</span>
	location.<span class="me1">X</span> <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span><span class="sy4">;</span>
	location.<span class="me1">Y</span> <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span><span class="sy4">;</span>
&#160;
	<span class="kw1">return</span> location<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="PaddleAI">PaddleAI</span></h3>
<p>The AI Paddle class was created.  A SetBall Method was created in order to store a reference to the Ball.  This is used in the Tick function for some very simple ai.  If the ball is above the paddle, the paddle moves up.  If the ball is below the paddle, the paddle moves down.  If the paddle and the ball are at the same height, the paddle does not move.
</p>
<h4><span class="mw-headline" id="PaddleAI.h">PaddleAI.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaddleAI.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddleAI <span class="sy4">:</span> <span class="kw2">public</span> APaddle
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddleAI<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Ball Reference</span>
	<span class="kw4">void</span> SetBall<span class="br0">&#40;</span> <span class="kw2">class</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to Ball</span>
	<span class="kw2">class</span> ABall<span class="sy2">*</span> Ball<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="PaddleAI.cpp">PaddleAI.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PaddleAI.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddleAI<span class="sy4">::</span><span class="me2">APaddleAI</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the direction the AI should move based on where the Ball is</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="sy1">&gt;</span> Ball<span class="sy2">-</span><span class="sy1">&gt;</span>GetActorLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MovePaddle<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="sy1">&lt;</span> Ball<span class="sy2">-</span><span class="sy1">&gt;</span>GetActorLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MovePaddle<span class="br0">&#40;</span> <span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		MovePaddle<span class="br0">&#40;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">SetBall</span><span class="br0">&#40;</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	this<span class="sy2">-</span><span class="sy1">&gt;</span>Ball <span class="sy1">=</span> Ball<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Goal">Goal</span></h3>
<p>The goals were made so that a SetPosition function could be called to set the position of them.  There are two goals, the PlayerGoal and the AIGoal.  These were spawned and set in the GameMode class shown later on in this tutorial.  The goals need to be initialized so that they are not visible and they generate overlap events when a dynamic object(The Ball) collides with it.
</p>
<h4><span class="mw-headline" id="Goal.h_2">Goal.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Goal.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API AGoal <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	AGoal<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Set the X,Y, and Z scale for the sprite</span>
	<span class="kw4">void</span> SetScale<span class="br0">&#40;</span> FVector<span class="sy3">&amp;</span> vector <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Set the position of the Goal</span>
	<span class="kw4">void</span> SetPosition<span class="br0">&#40;</span> FVector<span class="sy3">&amp;</span> position <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Accessor for the width</span>
	<span class="kw4">float</span> GetWidth<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite that represents a pong goal area</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="Goal.cpp_2">Goal.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Goal.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
AGoal<span class="sy4">::</span><span class="me2">AGoal</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Goal Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> GoalSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Goal'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the GoalSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> GoalSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	RootComponent <span class="sy1">=</span> Sprite<span class="sy4">;</span>
&#160;
	<span class="co1">//Make sure that this component overlaps</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetCollisionEnabled<span class="br0">&#40;</span> ECollisionEnabled<span class="sy4">::</span><span class="me2">QueryOnly</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetObjectType<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_WorldStatic</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetResponseToAllChannels<span class="br0">&#40;</span> ECollisionResponse<span class="sy4">::</span><span class="me2">ECR_Overlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetVisibility<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> AGoal<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> AGoal<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Set the X,Y, and Z scale for the sprite</span>
<span class="kw4">void</span> AGoal<span class="sy4">::</span><span class="me2">SetScale</span><span class="br0">&#40;</span> FVector<span class="sy3">&amp;</span> vector <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> vector <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> AGoal<span class="sy4">::</span><span class="me2">SetPosition</span><span class="br0">&#40;</span> FVector<span class="sy3">&amp;</span> position <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> position <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">float</span> AGoal<span class="sy4">::</span><span class="me2">GetWidth</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetSprite<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetSourceSize<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="GameMode">GameMode</span></h3>
<p>The gamemode was updated to spawn an AIPaddle, spawn the Goals, rename the paddles/goals, set the positions of the goals, and update the state/aipaddle with references to the Ball.  Just a bunch of initialization stuff here.
</p>
<h4><span class="mw-headline" id="PongGameMode.h_5">PongGameMode.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameMode.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameMode <span class="sy4">:</span> <span class="kw2">public</span> AGameMode
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">//Constructor where we set the default classes to initialize</span>
	APongGameMode<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Function called to spawn our pawn objects into the world</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> StartPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="PongGameMode.cpp_5">PongGameMode.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameMode.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PongCamera.h&quot;</span>
<span class="co2">#include &quot;Background.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;Bounds.h&quot;</span>
<span class="co2">#include &quot;Goal.h&quot;</span>
<span class="co2">#include &quot;PongGameState.h&quot;</span>
<span class="co2">#include &quot;PaddleAI.h&quot;</span>
&#160;
APongGameMode<span class="sy4">::</span><span class="me2">APongGameMode</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Set Default Classes</span>
	DefaultPawnClass <span class="sy1">=</span> APaddle<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	GameStateClass <span class="sy1">=</span> APongGameState<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameMode<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">StartPlay</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	UWorld<span class="sy2">*</span> <span class="kw4">const</span> World <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> World <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		APongGameState<span class="sy2">*</span> gameState <span class="sy1">=</span> GetGameState<span class="sy1">&lt;</span>APongGameState<span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		APongCamera<span class="sy2">*</span> camera <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>APongCamera<span class="sy1">&gt;</span><span class="br0">&#40;</span> APongCamera<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Camera is set to the CameraActor created</span>
		World<span class="sy2">-</span><span class="sy1">&gt;</span>GetFirstPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetViewTarget<span class="br0">&#40;</span> camera <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Set the background to fill up the entire view of the camera</span>
		ABackground<span class="sy2">*</span> background <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABackground<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABackground<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		FVector2D dimensions <span class="sy1">=</span> camera<span class="sy2">-</span><span class="sy1">&gt;</span>GetViewDimensions<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		background<span class="sy2">-</span><span class="sy1">&gt;</span>SetDimensions<span class="br0">&#40;</span> dimensions <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Ball into the World</span>
		ABall<span class="sy2">*</span> ball <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABall<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABall<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		FVector scale <span class="sy1">=</span> background<span class="sy2">-</span><span class="sy1">&gt;</span>GetScale<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Bounds into the World</span>
		ABounds<span class="sy2">*</span> bounds <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>ABounds<span class="sy1">&gt;</span><span class="br0">&#40;</span> ABounds<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		bounds<span class="sy2">-</span><span class="sy1">&gt;</span>SetScale<span class="br0">&#40;</span> scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Spawn the Player and AI Goals</span>
		AGoal<span class="sy2">*</span> playerGoal <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>AGoal<span class="sy1">&gt;</span><span class="br0">&#40;</span> AGoal<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		AGoal<span class="sy2">*</span> aiGoal <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>AGoal<span class="sy1">&gt;</span><span class="br0">&#40;</span> AGoal<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		playerGoal<span class="sy2">-</span><span class="sy1">&gt;</span>SetScale<span class="br0">&#40;</span> scale <span class="br0">&#41;</span><span class="sy4">;</span>
		aiGoal<span class="sy2">-</span><span class="sy1">&gt;</span>SetScale<span class="br0">&#40;</span> scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		playerGoal<span class="sy2">-</span><span class="sy1">&gt;</span>Rename<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PlayerGoal&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		aiGoal<span class="sy2">-</span><span class="sy1">&gt;</span>Rename<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;AIGoal&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Get a reference to the paddles and rename them</span>
		APaddle<span class="sy2">*</span> playerPaddle <span class="sy1">=</span> <span class="br0">&#40;</span>APaddle<span class="sy2">*</span><span class="br0">&#41;</span>World<span class="sy2">-</span><span class="sy1">&gt;</span>GetFirstPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetPawn<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		APaddleAI<span class="sy2">*</span> aiPaddle <span class="sy1">=</span> World<span class="sy2">-</span><span class="sy1">&gt;</span>SpawnActor<span class="sy1">&lt;</span>APaddleAI<span class="sy1">&gt;</span><span class="br0">&#40;</span> APaddleAI<span class="sy4">::</span><span class="me2">StaticClass</span><span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		playerPaddle<span class="sy2">-</span><span class="sy1">&gt;</span>Rename<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PlayerPaddle&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
		aiPaddle<span class="sy2">-</span><span class="sy1">&gt;</span>Rename<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;AIPaddle&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//playerGoal spawns on the left, aiGoal on the right</span>
		FVector playerPos, aiPos<span class="sy4">;</span>
		playerPos.<span class="me1">Y</span> <span class="sy1">=</span> <span class="nu0">50</span>.<span class="me1">f</span><span class="sy4">;</span>
		aiPos.<span class="me1">Y</span> <span class="sy1">=</span> <span class="nu0">50</span>.<span class="me1">f</span><span class="sy4">;</span>
		playerPos.<span class="me1">X</span> <span class="sy1">=</span> playerPaddle<span class="sy2">-</span><span class="sy1">&gt;</span>GetPosition<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span> <span class="sy2">-</span> <span class="br0">&#40;</span> playerGoal<span class="sy2">-</span><span class="sy1">&gt;</span>GetWidth<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> scale.<span class="me1">X</span> <span class="br0">&#41;</span> <span class="sy2">/</span> <span class="nu0">2</span><span class="sy4">;</span>
		aiPos.<span class="me1">X</span> <span class="sy1">=</span> <span class="nu17">5.0f</span> <span class="sy2">+</span> aiPaddle<span class="sy2">-</span><span class="sy1">&gt;</span>GetPosition<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span> <span class="sy2">+</span> <span class="br0">&#40;</span> playerGoal<span class="sy2">-</span><span class="sy1">&gt;</span>GetWidth<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">*</span> scale.<span class="me1">X</span> <span class="br0">&#41;</span> <span class="sy2">/</span> <span class="nu0">2</span><span class="sy4">;</span>
		playerPos.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu0">0</span>.<span class="me1">f</span><span class="sy4">;</span>
		aiPos.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu0">0</span>.<span class="me1">f</span><span class="sy4">;</span>
&#160;
		playerGoal<span class="sy2">-</span><span class="sy1">&gt;</span>SetPosition<span class="br0">&#40;</span> playerPos <span class="br0">&#41;</span><span class="sy4">;</span>
		aiGoal<span class="sy2">-</span><span class="sy1">&gt;</span>SetPosition<span class="br0">&#40;</span> aiPos <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		gameState<span class="sy2">-</span><span class="sy1">&gt;</span>SetBall<span class="br0">&#40;</span> ball <span class="br0">&#41;</span><span class="sy4">;</span>
		aiPaddle<span class="sy2">-</span><span class="sy1">&gt;</span>SetBall<span class="br0">&#40;</span> ball <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	Super<span class="sy4">::</span><span class="me2">StartMatch</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="GameState">GameState</span></h3>
<p>The PongGameState was updated majorly for some of these changes made.  A UFUNCTION() BallOVerlap function was created.  This function was created and registered such that it is called whenever the Ball overlaps with another Actor.  Private variables for the score were added in order to keep track of when a score was made.  A ResetBoard helper function was also made so that the state machine can call it to reset everything back to initial states after a goal has been scored.
</p>
<h4><span class="mw-headline" id="PongGameState.h_3">PongGameState.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameState.h&quot;</span>
<span class="co2">#include &quot;PongGameState.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameState <span class="sy4">:</span> <span class="kw2">public</span> AGameState
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
	<span class="kw2">enum</span> PONG_STATES
	<span class="br0">&#123;</span>
		WAITING_TO_START,
		PUSH_BALL,
		PLAYING,
		UPDATE_SCORE
	<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	APongGameState<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Tick called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">//Mutator for the reference to the Ball</span>
	<span class="kw4">void</span> SetBall<span class="br0">&#40;</span> <span class="kw2">class</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Overlap event for when the ball overlaps</span>
	UFUNCTION<span class="br0">&#40;</span><span class="br0">&#41;</span>
	<span class="kw4">void</span> BallOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
	<span class="co1">//Helper function to Reset the Board to it's initial state</span>
	<span class="kw4">void</span> ResetBoard<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The current state the game is in</span>
	PONG_STATES CurrentState<span class="sy4">;</span>
&#160;
	<span class="co1">//Reference to the Ball</span>
	<span class="kw2">class</span> ABall<span class="sy2">*</span> Ball<span class="sy4">;</span>
&#160;
	<span class="co1">//booleans to keep track of when a goal is scored</span>
	<span class="kw4">bool</span> AIScored<span class="sy4">;</span>
	<span class="kw4">bool</span> PlayerScored<span class="sy4">;</span>
&#160;
	<span class="co1">//values to store to the current score</span>
	<span class="kw4">int</span> AIScore<span class="sy4">;</span>
	<span class="kw4">int</span> PlayerScore<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="PongGameState.cpp_3">PongGameState.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameState.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
&#160;
APongGameState<span class="sy4">::</span><span class="me2">APongGameState</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	PlayerScore <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	AIScore <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// If match is in progress, run the custom state machine</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> IsMatchInProgress<span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">switch</span> <span class="br0">&#40;</span> CurrentState <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">:</span>
			ResetBoard<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">:</span>
			Ball<span class="sy2">-</span><span class="sy1">&gt;</span>StartMove<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">:</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span> PlayerScored <span class="sy3">||</span> AIScored <span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">UPDATE_SCORE</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">default</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">SetBall</span><span class="br0">&#40;</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	this<span class="sy2">-</span><span class="sy1">&gt;</span>Ball <span class="sy1">=</span> Ball<span class="sy4">;</span>
	Ball<span class="sy2">-</span><span class="sy1">&gt;</span>OnActorBeginOverlap.<span class="me1">AddDynamic</span><span class="br0">&#40;</span> <span class="kw3">this</span>, <span class="sy3">&amp;</span>APongGameState<span class="sy4">::</span><span class="me2">BallOverlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">BallOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;PlayerGoal&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		AIScored <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		AIScore<span class="sy2">++</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;AIGoal&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		PlayerScored <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		PlayerScore<span class="sy2">++</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">ResetBoard</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	PlayerScored <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	AIScored <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h2><span class="mw-headline" id="Creating_the_HUD_.2F_Finishing_up">Creating the HUD / Finishing up</span></h2>
<p>Collision should be working now.  The score should be updating. All that is needed now is a way to display the score and to polish up the states.  In order to display the score, a HUD is going to be created.  The HUD is going to be used to draw test to the canvas.  In our case, we are going to draw the current score of the Pong Game and maybe an Initial text to start the game, something like "Press space to Begin.".
</p>
<h3><span class="mw-headline" id="Pong_HUD">Pong HUD</span></h3>
<ol>
<li>Create a new c++ class in the editor
</li>
<li>Extend the HUD class
</li>
<li>call the new class "PongHUD" and click create
</li>
</ol>
<p>The HUD is going to go through a Draw Function where it will constantly draw the HUD.  Some functions are made for different components to be drawn.  The Score is set to always be drawn, and a boolean value controls when the Score is drawn.
</p><p><br />
</p>
<h4><span class="mw-headline" id="PongHUD.h">PongHUD.h</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/HUD.h&quot;</span>
<span class="co2">#include &quot;PongHUD.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
*
*/</span>
UCLASS<span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongHUD <span class="sy4">:</span> <span class="kw2">public</span> AHUD
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span> <span class="br0">&#41;</span>
&#160;
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	APongHUD<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw2">virtual</span> <span class="kw4">void</span> DrawHUD<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">//Display the current Pong Score on the screen</span>
	<span class="kw4">void</span> DisplayScore<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Display The text waiting for space</span>
	<span class="kw4">void</span> DisplaySpaceText<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set if the waiting for space text should be displayed</span>
	<span class="kw4">void</span> DisplayWaitingForSpace<span class="br0">&#40;</span> <span class="kw4">bool</span> bSpace <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the score to be displayed</span>
	<span class="kw4">void</span> SetScore<span class="br0">&#40;</span> <span class="kw4">int</span> PlayerScore, <span class="kw4">int</span> AIScore <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The score of the game</span>
	<span class="kw4">int</span> Score<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Display space text?</span>
	<span class="kw4">bool</span> bWaitingForSpace<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h4><span class="mw-headline" id="PongHUD.cpp">PongHUD.cpp</span></h4>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongHUD.h&quot;</span>
&#160;
&#160;
&#160;
&#160;
APongHUD<span class="sy4">::</span><span class="me2">APongHUD</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Score<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	Score<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	bWaitingForSpace <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongHUD<span class="sy4">::</span><span class="me2">DrawHUD</span><span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">DrawHUD</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	DisplayScore<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span> bWaitingForSpace <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		DisplaySpaceText<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongHUD<span class="sy4">::</span><span class="me2">DisplaySpaceText</span><span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	FVector2D sLoc<span class="sy4">;</span>
	GetOwningPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ProjectWorldLocationToScreen<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">50.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span>, sLoc <span class="br0">&#41;</span><span class="sy4">;</span>
	FString s <span class="sy1">=</span> <span class="st0">&quot;Press Space to Begin.&quot;</span><span class="sy4">;</span>
	DrawText<span class="br0">&#40;</span> s, FLinearColor<span class="sy4">::</span><span class="me2">Blue</span>, sLoc.<span class="me1">X</span>, sLoc.<span class="me1">Y</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongHUD<span class="sy4">::</span><span class="me2">DisplayScore</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	FVector2D sLoc<span class="sy4">;</span>
	GetOwningPlayerController<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ProjectWorldLocationToScreen<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">50.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">150.0f</span> <span class="br0">&#41;</span>, sLoc <span class="br0">&#41;</span><span class="sy4">;</span>
	FString s <span class="sy1">=</span> <span class="st0">&quot;Score: &quot;</span> <span class="sy2">+</span> FString<span class="sy4">::</span><span class="me2">FromInt</span><span class="br0">&#40;</span> Score<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="sy2">+</span> <span class="st0">&quot; - &quot;</span> <span class="sy2">+</span> FString<span class="sy4">::</span><span class="me2">FromInt</span><span class="br0">&#40;</span> Score<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	DrawText<span class="br0">&#40;</span> s, FLinearColor<span class="sy4">::</span><span class="me2">Blue</span>, sLoc.<span class="me1">X</span>, sLoc.<span class="me1">Y</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongHUD<span class="sy4">::</span><span class="me2">SetScore</span><span class="br0">&#40;</span> <span class="kw4">int</span> PlayerScore, <span class="kw4">int</span> AIScore<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Score<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy1">=</span> PlayerScore<span class="sy4">;</span>
	Score<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy1">=</span> AIScore<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongHUD<span class="sy4">::</span><span class="me2">DisplayWaitingForSpace</span><span class="br0">&#40;</span> <span class="kw4">bool</span> bSpace <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	bWaitingForSpace <span class="sy1">=</span> bSpace<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Helper functions were added to the Ball and Paddle in order to Reset them.  This is called from the PongGameState when we go into the RESET state.  A boolean, bMoveable was also added to the paddle in order to control when the paddle can move. 
</p>
<h3><span class="mw-headline" id="Paddle.h_7">Paddle.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Pawn.h&quot;</span>
<span class="co2">#include &quot;Paddle.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddle <span class="sy4">:</span> <span class="kw2">public</span> APawn
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddle<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to bind functionality to input</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetupPlayerInputComponent<span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Function called to move the paddle.  Scale represents up/down</span>
	<span class="kw4">void</span> MovePaddle<span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle begins to overlap another Actor</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorBeginOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Notification when the paddle ends overlap</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyActorEndOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// How fast the paddle is moving up or down</span>
	<span class="kw4">float</span> GetZVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Get the location of the sprite</span>
	FVector2D GetPosition<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Reset the paddles location</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Reset<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Sets if the paddle can be moved</span>
	<span class="kw4">void</span> SetMoveable<span class="br0">&#40;</span> <span class="kw4">bool</span> bMoveable <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">protected</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the paddle sprite</span>
	UPROPERTY<span class="br0">&#40;</span> EditAnywhere, BlueprintReadWrite, Category <span class="sy1">=</span> Paddle <span class="br0">&#41;</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
	<span class="co1">//Booleans for keeping track of valid movement directions</span>
	<span class="kw4">bool</span> bMoveUp<span class="sy4">;</span>
	<span class="kw4">bool</span> bMoveDown<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//How fast the paddle is moving</span>
	<span class="kw4">float</span> Velocity<span class="sy4">;</span>
&#160;
	<span class="co1">//Is the paddle moveable, can it move?</span>
	<span class="kw4">bool</span> bMoveable<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Paddle.cpp_7">Paddle.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddle<span class="sy4">::</span><span class="me2">APaddle</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Paddle Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> PaddleSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Paddle'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the PaddleSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> PaddleSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	RootComponent <span class="sy1">=</span> Sprite<span class="sy4">;</span>
&#160;
	ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPawnMovementComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;MovementComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Can initially move in all directions</span>
	bMoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	bMoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the sprite to generate overlap events for world-static objects -&gt; The Bounds is set to World Static, so this should generate an overlap event now</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetCollisionEnabled<span class="br0">&#40;</span> ECollisionEnabled<span class="sy4">::</span><span class="me2">QueryAndPhysics</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetObjectType<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_Pawn</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetResponseToChannel<span class="br0">&#40;</span> ECollisionChannel<span class="sy4">::</span><span class="me2">ECC_WorldStatic</span>, ECollisionResponse<span class="sy4">::</span><span class="me2">ECR_Overlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSimulatePhysics<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the location of the Paddle to the Left</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
&#160;
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the sprites location based on the movement input</span>
	FVector move <span class="sy1">=</span> GetMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span> bMoveUp <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="sy3">||</span> <span class="br0">&#40;</span> bMoveDown <span class="sy3">&amp;&amp;</span> move.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> bMoveable <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FTransform loc <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetRelativeTransform<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		loc.<span class="me1">AddToTranslation</span><span class="br0">&#40;</span> move<span class="sy2">*</span>DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
		Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeTransform<span class="br0">&#40;</span> loc <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called to bind functionality to input</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">const</span> UInputSettings<span class="sy2">*</span> settings <span class="sy1">=</span> GetDefault<span class="sy1">&lt;</span>UInputSettings<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create movement mappings for upwards and downwards movement, the float value tells if we are moving the paddle up or down</span>
	<span class="kw4">const</span> FInputAxisKeyMapping upKey<span class="br0">&#40;</span><span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Up</span>, <span class="nu17">1.0f</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw4">const</span> FInputAxisKeyMapping downKey<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, EKeys<span class="sy4">::</span><span class="me2">Down</span>, <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Add the axis mappings</span>
	<span class="co1">// Once this code is executed, these mappings will be added in the editors Input Settings!</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> upKey <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span>UInputSettings<span class="sy2">*</span><span class="br0">&#41;</span>settings<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>AddAxisMapping<span class="br0">&#40;</span> downKey <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Bind the axis - if we press up, the function is called with 1.0.  if we press down, the function is called with -1.0.</span>
	<span class="co1">// if we do nothing, the function is called with 0.0f</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAxis<span class="br0">&#40;</span> <span class="st0">&quot;Move&quot;</span>, <span class="kw3">this</span>, <span class="sy3">&amp;</span>APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Velocity <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">MovePaddle</span><span class="br0">&#40;</span> <span class="kw4">float</span> Scale <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Add a movement input, hardcoding in 75.0f for the vector</span>
	FVector direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">75.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>ConsumeInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	AddMovementInput<span class="br0">&#40;</span> direction, Scale <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> Scale <span class="sy2">*</span> <span class="nu17">75.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorBeginOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FVector prev <span class="sy1">=</span> GetMovementComponent<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetLastInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="co1">//If moving into a bound, set the movement in that direction to false</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&gt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			bMoveUp <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> prev.<span class="me1">Z</span> <span class="sy1">&lt;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			bMoveDown <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">NotifyActorEndOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;Bounds&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Out of the bounds so enable all movement inputs</span>
		bMoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		bMoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//Get the ZVelocity (How fast the paddle is moving up or down)</span>
<span class="kw4">float</span> APaddle<span class="sy4">::</span><span class="me2">GetZVelocity</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> Velocity<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
FVector2D APaddle<span class="sy4">::</span><span class="me2">GetPosition</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	FVector2D location<span class="sy4">;</span>
	location.<span class="me1">X</span> <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">X</span><span class="sy4">;</span>
	location.<span class="me1">Y</span> <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span><span class="sy4">;</span>
&#160;
	<span class="kw1">return</span> location<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Reset the paddles location</span>
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">Reset</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.1f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.1f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	bMoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	bMoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddle<span class="sy4">::</span><span class="me2">SetMoveable</span><span class="br0">&#40;</span> <span class="kw4">bool</span> bMoveable <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	this<span class="sy2">-</span><span class="sy1">&gt;</span>bMoveable <span class="sy1">=</span> bMoveable<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="PaddleAI.h_2">PaddleAI.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PaddleAI.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APaddleAI <span class="sy4">:</span> <span class="kw2">public</span> APaddle
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">// Sets default values for this pawn's properties</span>
	APaddleAI<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Ball Reference</span>
	<span class="kw4">void</span> SetBall<span class="br0">&#40;</span> <span class="kw2">class</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// AI Paddle Reset override</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Reset<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to Ball</span>
	<span class="kw2">class</span> ABall<span class="sy2">*</span> Ball<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PaddleAI.cpp_2">PaddleAI.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PaddleAI.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
&#160;
&#160;
&#160;
<span class="co1">// Sets default values</span>
APaddleAI<span class="sy4">::</span><span class="me2">APaddleAI</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">// Set this pawn to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Paddle AI can always move</span>
	bMoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	bMoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Update the direction the AI should move based on where the Ball is</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="sy1">&gt;</span> Ball<span class="sy2">-</span><span class="sy1">&gt;</span>GetActorLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MovePaddle<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetComponentLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="sy1">&lt;</span> Ball<span class="sy2">-</span><span class="sy1">&gt;</span>GetActorLocation<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Z</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MovePaddle<span class="br0">&#40;</span> <span class="nu17">1.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		MovePaddle<span class="br0">&#40;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">SetBall</span><span class="br0">&#40;</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	this<span class="sy2">-</span><span class="sy1">&gt;</span>Ball <span class="sy1">=</span> Ball<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Reset the paddles location</span>
<span class="kw4">void</span> APaddleAI<span class="sy4">::</span><span class="me2">Reset</span><span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">200.0f</span>, <span class="nu0">50</span>.<span class="me1">f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeRotation<span class="br0">&#40;</span> FRotator<span class="br0">&#40;</span> <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span>, <span class="nu0">0</span>.<span class="me1">f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	bMoveUp <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	bMoveDown <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Ball.h_4">Ball.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/Actor.h&quot;</span>
<span class="co2">#include &quot;Ball.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API ABall <span class="sy4">:</span> <span class="kw2">public</span> AActor
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>	
	<span class="co1">// Sets default values for this actor's properties</span>
	ABall<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Called when the game starts or when spawned</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaSeconds <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Called to start moving the Ball</span>
	<span class="kw4">void</span> StartMove<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// notify hit</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> NotifyHit<span class="br0">&#40;</span> UPrimitiveComponent<span class="sy2">*</span> MyComp, AActor<span class="sy2">*</span> Other, UPrimitiveComponent<span class="sy2">*</span> OtherComp, <span class="kw4">bool</span> bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, <span class="kw4">const</span> FHitResult<span class="sy3">&amp;</span> Hit <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">// Reset the Ball</span>
	<span class="kw4">void</span> Reset<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">protected</span><span class="sy4">:</span>
&#160;
	<span class="co1">//Reference to the Sprite Component which contains the ball sprite</span>
	UPROPERTY<span class="br0">&#40;</span> EditAnywhere, BlueprintReadWrite, Category <span class="sy1">=</span> Ball <span class="br0">&#41;</span>
	<span class="kw2">class</span> UPaperSpriteComponent<span class="sy2">*</span> Sprite<span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The direction the ball is traveling in</span>
	FVector Direction<span class="sy4">;</span>
&#160;
	<span class="co1">//Velocity of the ball.  How Fast it is travelling. Distance/Time</span>
	<span class="kw4">float</span> Velocity<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Ball.cpp_4">Ball.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;PaperSpriteComponent.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
&#160;
<span class="co1">// Sets default values</span>
ABall<span class="sy4">::</span><span class="me2">ABall</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 	<span class="co1">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Find the Ball Sprite -- Right click on your sprite in the editor and click copy reference to get the path to it</span>
	ConstructorHelpers<span class="sy4">::</span><span class="me2">FObjectFinder</span><span class="sy1">&lt;</span>UPaperSprite<span class="sy1">&gt;</span> BallSpriteRef<span class="br0">&#40;</span> TEXT<span class="br0">&#40;</span> <span class="st0">&quot;PaperSprite'/Game/Sprites/Ball'&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Create a default UPaperSpriteComponent and register it to this Actor</span>
	Sprite <span class="sy1">=</span> ObjectInitializer.<span class="me1">CreateDefaultSubobject</span><span class="sy1">&lt;</span>UPaperSpriteComponent<span class="sy1">&gt;</span><span class="br0">&#40;</span> <span class="kw3">this</span>, TEXT<span class="br0">&#40;</span> <span class="st0">&quot;SpriteComp&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the Sprite to render for the UPaperSpriteComponent to the BallSprite Reference we grabbed</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprite<span class="br0">&#40;</span> BallSpriteRef.<span class="me1">Object</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	RootComponent <span class="sy1">=</span> Sprite<span class="sy4">;</span>
&#160;
	<span class="co1">//Set the physics properties</span>
	<span class="co1">//Restrict the translation/rotation axis</span>
	SetActorEnableCollision<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetEnableGravity<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetConstraintMode<span class="br0">&#40;</span> EDOFMode<span class="sy4">::</span><span class="me2">SixDOF</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockXRotation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockYRotation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockZRotation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockXTranslation <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockYTranslation <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetBodyInstance<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bLockZTranslation <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Enable Hit Notifies</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetNotifyRigidBodyCollision<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set the ball to spawn in the middle of the Board and scale its size down</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">50.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.07f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.07f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAbsolute<span class="br0">&#40;</span> <span class="kw2">true</span>, <span class="kw2">true</span>, <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetLinearDamping<span class="br0">&#40;</span> <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetSimulatePhysics<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called when the game starts or when spawned</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">// Called every frame</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Set a time variable to be &lt; one hundreth of a second</span>
	<span class="kw4">float</span> <span class="kw3">time</span> <span class="sy1">=</span> <span class="br0">&#40;</span>DeltaTime <span class="sy1">&gt;</span> <span class="nu17">0.01f</span> <span class="sy4">?</span> <span class="nu17">0.0083f</span> <span class="sy4">:</span> DeltaTime<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Update the translation based on the time variable</span>
	FTransform transform <span class="sy1">=</span> Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>GetRelativeTransform<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	transform.<span class="me1">AddToTranslation</span><span class="br0">&#40;</span> Direction <span class="sy2">*</span> Velocity <span class="sy2">*</span> <span class="kw3">time</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeTransform<span class="br0">&#40;</span> transform <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">StartMove</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">// Move the ball via setting the Direction and Velocity</span>
	Direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="sy2">-</span><span class="nu17">1.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> <span class="nu17">250.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//The Ball has hit something</span>
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">NotifyHit</span><span class="br0">&#40;</span> UPrimitiveComponent<span class="sy2">*</span> MyComp, AActor<span class="sy2">*</span> Other, UPrimitiveComponent<span class="sy2">*</span> OtherComp, <span class="kw4">bool</span> bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, <span class="kw4">const</span> FHitResult<span class="sy3">&amp;</span> Hit <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Make sure that the physics velocities are set to 0.  We are keeping track of direction/speed.  We want this hit event so that we can easily mirror the direction</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAllPhysicsAngularVelocity<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetAllPhysicsLinearVelocity<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Mirror the Direction so that we can get the new trajectory of the ball</span>
	Direction <span class="sy1">=</span> Direction.<span class="me1">MirrorByVector</span><span class="br0">&#40;</span> HitNormal <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//If the ball hits the paddle, add Z velocity to the ball (This can become very fast)</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> Other<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Contains</span><span class="br0">&#40;</span> <span class="st0">&quot;Paddle&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		APaddle<span class="sy2">*</span> paddle <span class="sy1">=</span> <span class="br0">&#40;</span>APaddle<span class="sy2">*</span><span class="br0">&#41;</span>Other<span class="sy4">;</span>
		Direction.<span class="me1">Z</span> <span class="sy2">+</span><span class="sy1">=</span> <span class="br0">&#40;</span>paddle<span class="sy2">-</span><span class="sy1">&gt;</span>GetZVelocity<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy2">/</span> Velocity<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> ABall<span class="sy4">::</span><span class="me2">Reset</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeLocation<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">50.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Sprite<span class="sy2">-</span><span class="sy1">&gt;</span>SetRelativeScale3D<span class="br0">&#40;</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.07f</span>, <span class="nu17">1.0f</span>, <span class="nu17">0.07f</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Direction <span class="sy1">=</span> FVector<span class="br0">&#40;</span> <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span>, <span class="nu17">0.0f</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	Velocity <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Finally, the GameState was updated significantly.  The states were all filled in.
</p>
<h3><span class="mw-headline" id="PongGameState.h_4">PongGameState.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/GameState.h&quot;</span>
<span class="co2">#include &quot;PongGameState.generated.h&quot;</span>
&#160;
<span class="coMULTI">/**
 * 
 */</span>
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> PONG_API APongGameState <span class="sy4">:</span> <span class="kw2">public</span> AGameState
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
	<span class="kw2">enum</span> PONG_STATES
	<span class="br0">&#123;</span>
		RESET,
		WAITING_TO_START,
		PUSH_BALL,
		PLAYING
	<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	APongGameState<span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Called when play begins</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> BeginPlay<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">//Tick called every frame</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Tick<span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">//Mutator for the reference to the Ball</span>
	<span class="kw4">void</span> SetBall<span class="br0">&#40;</span> <span class="kw2">class</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Overlap event for when the ball overlaps</span>
	UFUNCTION<span class="br0">&#40;</span><span class="br0">&#41;</span>
	<span class="kw4">void</span> BallOverlap<span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
	<span class="co1">//Helper function to Reset the Board to it's initial state</span>
	<span class="kw4">void</span> ResetBoard<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="kw2">private</span><span class="sy4">:</span>
&#160;
	<span class="co1">//The current state the game is in</span>
	PONG_STATES CurrentState<span class="sy4">;</span>
&#160;
	<span class="co1">//Reference to the Ball</span>
	<span class="kw2">class</span> ABall<span class="sy2">*</span> Ball<span class="sy4">;</span>
&#160;
	<span class="co1">//booleans to keep track of when a goal is scored</span>
	<span class="kw4">bool</span> bAIScored<span class="sy4">;</span>
	<span class="kw4">bool</span> bPlayerScored<span class="sy4">;</span>
&#160;
	<span class="co1">//values to store to the current score</span>
	<span class="kw4">int</span> AIScore<span class="sy4">;</span>
	<span class="kw4">int</span> PlayerScore<span class="sy4">;</span>
&#160;
	<span class="co1">//Reference to the controller used for the paddle</span>
	<span class="kw2">class</span> APlayerController<span class="sy2">*</span> Controller<span class="sy4">;</span>
	<span class="kw2">class</span> APongHUD<span class="sy2">*</span> HUD<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="PongGameState.cpp_4">PongGameState.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Fill out your copyright notice in the Description page of Project Settings.</span>
&#160;
<span class="co2">#include &quot;Pong.h&quot;</span>
<span class="co2">#include &quot;PongGameState.h&quot;</span>
<span class="co2">#include &quot;Ball.h&quot;</span>
<span class="co2">#include &quot;Paddle.h&quot;</span>
<span class="co2">#include &quot;PongHUD.h&quot;</span>
&#160;
APongGameState<span class="sy4">::</span><span class="me2">APongGameState</span><span class="br0">&#40;</span> <span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer <span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span> ObjectInitializer <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	PrimaryActorTick.<span class="me1">bCanEverTick</span> <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
	PlayerScore <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	AIScore <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">BeginPlay</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	Controller <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetFirstPlayerController<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	HUD <span class="sy1">=</span> <span class="br0">&#40;</span>APongHUD<span class="sy2">*</span><span class="br0">&#41;</span>Controller<span class="sy2">-</span><span class="sy1">&gt;</span>GetHUD<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> <span class="kw4">float</span> DeltaTime <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Tick</span><span class="br0">&#40;</span> DeltaTime <span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">// If match is in progress, run the custom state machine</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> IsMatchInProgress<span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">switch</span> <span class="br0">&#40;</span> CurrentState <span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">RESET</span><span class="sy4">:</span>
			ResetBoard<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="kw1">for</span> <span class="br0">&#40;</span> <span class="kw4">auto</span> it <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetPawnIterator<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span> it.<span class="me1">GetIndex</span><span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="sy1">&lt;</span> GetWorld<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetNumPawns<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span> it<span class="sy2">++</span> <span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				<span class="br0">&#40;</span> <span class="br0">&#40;</span>APaddle<span class="sy2">*</span><span class="br0">&#41;</span>it<span class="sy2">-</span><span class="sy1">&gt;</span>Get<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetMoveable<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">WAITING_TO_START</span><span class="sy4">:</span>
			HUD<span class="sy2">-</span><span class="sy1">&gt;</span>DisplayWaitingForSpace<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span> Controller<span class="sy2">-</span><span class="sy1">&gt;</span>WasInputKeyJustReleased<span class="br0">&#40;</span> EKeys<span class="sy4">::</span><span class="me2">SpaceBar</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				HUD<span class="sy2">-</span><span class="sy1">&gt;</span>DisplayWaitingForSpace<span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><span class="sy4">;</span>
				<span class="kw1">for</span> <span class="br0">&#40;</span> <span class="kw4">auto</span> it <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetPawnIterator<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span> it.<span class="me1">GetIndex</span><span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="sy1">&lt;</span> GetWorld<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetNumPawns<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span> it<span class="sy2">++</span> <span class="br0">&#41;</span>
				<span class="br0">&#123;</span>
					<span class="br0">&#40;</span> <span class="br0">&#40;</span>APaddle<span class="sy2">*</span><span class="br0">&#41;</span>it<span class="sy2">-</span><span class="sy1">&gt;</span>Get<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SetMoveable<span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><span class="sy4">;</span>
				<span class="br0">&#125;</span>
				CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PUSH_BALL</span><span class="sy4">:</span>
			Ball<span class="sy2">-</span><span class="sy1">&gt;</span>StartMove<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">case</span> PONG_STATES<span class="sy4">::</span><span class="me2">PLAYING</span><span class="sy4">:</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>bPlayerScored <span class="sy3">||</span> bAIScored <span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				HUD<span class="sy2">-</span><span class="sy1">&gt;</span>SetScore<span class="br0">&#40;</span> PlayerScore, AIScore <span class="br0">&#41;</span><span class="sy4">;</span>
				CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">RESET</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
&#160;
		<span class="kw1">default</span><span class="sy4">:</span>
			CurrentState <span class="sy1">=</span> PONG_STATES<span class="sy4">::</span><span class="me2">RESET</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">SetBall</span><span class="br0">&#40;</span> ABall<span class="sy2">*</span> Ball <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	this<span class="sy2">-</span><span class="sy1">&gt;</span>Ball <span class="sy1">=</span> Ball<span class="sy4">;</span>
	Ball<span class="sy2">-</span><span class="sy1">&gt;</span>OnActorBeginOverlap.<span class="me1">AddDynamic</span><span class="br0">&#40;</span> <span class="kw3">this</span>, <span class="sy3">&amp;</span>APongGameState<span class="sy4">::</span><span class="me2">BallOverlap</span> <span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">BallOverlap</span><span class="br0">&#40;</span> AActor<span class="sy2">*</span> OtherActor <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;PlayerGoal&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		bAIScored <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		AIScore<span class="sy2">++</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span> OtherActor<span class="sy2">-</span><span class="sy1">&gt;</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">Equals</span><span class="br0">&#40;</span> <span class="st0">&quot;AIGoal&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		bPlayerScored <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
		PlayerScore<span class="sy2">++</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> APongGameState<span class="sy4">::</span><span class="me2">ResetBoard</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&#160;
	bPlayerScored <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	bAIScored <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
&#160;
	<span class="co1">// Reset the paddles</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span> <span class="kw4">auto</span> it <span class="sy1">=</span> GetWorld<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetPawnIterator<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span> it.<span class="me1">GetIndex</span><span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="sy1">&lt;</span> GetWorld<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetNumPawns<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span> it<span class="sy2">++</span> <span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="br0">&#40;</span> <span class="br0">&#40;</span>APaddle<span class="sy2">*</span><span class="br0">&#41;</span>it<span class="sy2">-</span><span class="sy1">&gt;</span>Get<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>Reset<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	Ball<span class="sy2">-</span><span class="sy1">&gt;</span>Reset<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<p><br />
</p>
<h2><span class="mw-headline" id="Finished">Finished</span></h2>
<p>And that is Pong, Congratulations!
</p><p><br />
</p>
<h2><span class="mw-headline" id="All_Source_Files">All Source Files</span></h2>
<p>Here are all of the final source files zipped up: <a href="/File:PongSource.zip" title="File:PongSource.zip">File:PongSource.zip</a>
</p><p><br />
<b>Author:</b> Igne<br />
</p>
<!-- 
NewPP limit report
CPU time usage: 0.638 seconds
Real time usage: 0.703 seconds
Preprocessor visited node count: 918/1000000
Preprocessor generated node count: 1606/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key my_wiki:pcache:idhash:4184-0!*!*!!en!2!* and timestamp 20150919192748
 -->
</div>												<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/index.php?title=Pong_Tutorial&amp;oldid=15454">https://wiki.unrealengine.com/index.php?title=Pong_Tutorial&amp;oldid=15454</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="/Category:Community_Created_Content" title="Category:Community Created Content">Community Created Content</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		</div>
		</div>
		
		<div id="footer">
			<div id="brand">

			</div>
			<div id="legal">
				<div id="copyright">
					&copy; 2004-2015, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic's trademarks or registered trademarks in the US and elsewhere.
				</div>
				<div id="terms">
					<a target="_blank" href="http://epicgames.com/tou">TERMS OF USE</a> | <a target="_blank" href="http://epicgames.com/privacynotice">PRIVACY POLICY</a>
				</div>
			</div>
		</div>
	</div>
		<!--<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>-->
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="/extensions/EpicSearchSystem/Javascript/Search.js?303"></script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<!-- Served in 0.093 secs. -->		<img src="https://tracking.unrealengine.com/track.png" width="1" height="1">
		<!--<script type="text/javascript">
			setTimeout(function () {
				var a = document.createElement("script");
				var b = document.getElementsByTagName("script")[0];
				a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
				a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
			}, 1);
		</script>-->
	</body>
</html>

		