(window.webpackJsonp=window.webpackJsonp||[]).push([[571],{977:function(e,r,t){"use strict";t.r(r);var a=t(28),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("How To Modify Blueprint Variable References In C++ Without Copying - Epic Wiki")]),e._v(" "),t("h1",{attrs:{id:"how-to-modify-blueprint-variable-references-in-c-without-copying"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-to-modify-blueprint-variable-references-in-c-without-copying"}},[e._v("#")]),e._v(" How To Modify Blueprint Variable References In C++ Without Copying")]),e._v(" "),t("h2",{attrs:{id:"contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Non-Const_Input_Variable_by_Reference.3F"}},[e._v("2 Non-Const Input Variable by Reference?")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Example_1:_Increment_Integer_by_Reference"}},[e._v("3 Example 1: Increment Integer by Reference")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Example_2:_Sort_Integer_Array_by_Reference"}},[e._v("4 Example 2: Sort Integer Array by Reference")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Example_3:_Sort_Float_Array_by_Reference"}},[e._v("5 Example 3: Sort Float Array by Reference")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Efficiency_And_Stability"}},[e._v("6 Efficiency And Stability")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Conclusion"}},[e._v("7 Conclusion")])])]),e._v(" "),t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),t("p",[t("strong",[e._v("Author")]),e._v(" "),t("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),t("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),t("p",[e._v("Dear Community,")]),e._v(" "),t("p",[e._v("As you know, if you pass an BP array or other variable reference to C++ by reference, you have to make it const or the variable will appear as an output, not an input!")]),e._v(" "),t("p",[e._v("ex:")]),e._v(" "),t("p",[e._v('//This parameter will show as an out parameter because it is a non-const reference\nUFUNCTION(BlueprintPure, Category = "VictoryBPLibrary|Transform")\nFRotator TransformVectorToActorSpaceAngle(AActor* Actor, FVector& ShouldBeInVector);')]),e._v(" "),t("p",[e._v('//In this case InVector will indeed show up as an input parameter because it is const\nUFUNCTION(BlueprintPure, Category = "VictoryBPLibrary|Transform")\nFRotator TransformVectorToActorSpaceAngle(AActor* Actor, const FVector& InVector);')]),e._v(" "),t("h2",{attrs:{id:"non-const-input-variable-by-reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#non-const-input-variable-by-reference"}},[e._v("#")]),e._v(" Non-Const Input Variable by Reference?")]),e._v(" "),t("p",[e._v("Well what if you want to modify the BP array in C++ and send it back to Blueprints, as is ideal since C++ can do calculations faster than BP?")]),e._v(" "),t("p",[e._v("Your team gives you a BP array and wants you to sort it, or modify it, and you should be able to do so without creating a copy of the data just to send it back to blueprints!")]),e._v(" "),t("p",[e._v("Well UPARAM(ref) is the solution!")]),e._v(" "),t("p",[e._v("I have 3 real-life examples for you!")]),e._v(" "),t("h2",{attrs:{id:"example-1-increment-integer-by-reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-1-increment-integer-by-reference"}},[e._v("#")]),e._v(" Example 1: Increment Integer by Reference")]),e._v(" "),t("p",[e._v('/** Easily increment an integer! */\nUFUNCTION(BlueprintCallable, meta = (CompactNodeTitle = "++",Keywords = "increment integer"), Category = "VictoryBPLibrary|Math|Integer")\nstatic void VictoryIntIncrement(UPARAM(ref) int32& Int, int32& IntOut);\n \n//~~~\n \nvoid UVictoryBPFunctionLibrary::VictoryIntIncrement(UPARAM(ref) int32& Int, int32& IntOut)\n{'),t("br"),e._v("\nInt++;\nIntOut = Int;\n}")]),e._v(" "),t("h2",{attrs:{id:"example-2-sort-integer-array-by-reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-2-sort-integer-array-by-reference"}},[e._v("#")]),e._v(" Example 2: Sort Integer Array by Reference")]),e._v(" "),t("p",[e._v('/** Sort an integer array, smallest value will be at index 0 after sorting. Modifies the input array, no new data created. ❤️ Rama */\nUFUNCTION(BlueprintCallable, meta = (Keywords = "sort integer array"), Category = "VictoryBPLibrary|Array")\nstatic void VictorySortIntArray(UPARAM(ref) TArray<int32>& IntArray, TArray<int32>& IntArrayRef);\n \n//~~~\n \nvoid UVictoryBPFunctionLibrary::VictorySortIntArray(UPARAM(ref) TArray<int32>& IntArray, TArray<int32>& IntArrayRef)\n{\nIntArray.Sort();\nIntArrayRef = IntArray;\n}')]),e._v(" "),t("h2",{attrs:{id:"example-3-sort-float-array-by-reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-3-sort-float-array-by-reference"}},[e._v("#")]),e._v(" Example 3: Sort Float Array by Reference")]),e._v(" "),t("p",[e._v('/** Sort a float array, smallest value will be at index 0 after sorting. Modifies the input array, no new data created. */\nUFUNCTION(BlueprintCallable, meta = (Keywords = "sort float array"), Category = "VictoryBPLibrary|Array")\nstatic void VictorySortFloatArray(UPARAM(ref) TArray<float>& FloatArray, TArray<float>& FloatArrayRef);\n \n//~~~\n \nvoid UVictoryBPFunctionLibrary::VictorySortFloatArray(UPARAM(ref) TArray<float>& FloatArray, TArray<float>& FloatArrayRef)\n{\nFloatArray.Sort();\nFloatArrayRef = FloatArray;\n}')]),e._v(" "),t("h2",{attrs:{id:"efficiency-and-stability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#efficiency-and-stability"}},[e._v("#")]),e._v(" Efficiency And Stability")]),e._v(" "),t("p",[e._v("Because the variables are references rather than hard data, these operations are very efficient, because no new data is being created!")]),e._v(" "),t("p",[e._v("The array data is never duplicated, only sorted and a reference to the array passed back out to BP!")]),e._v(" "),t("p",[e._v("Yay!")]),e._v(" "),t("h2",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("Now you know how you can perform high-speed calculations on BP variables in C++ and then send the results back to BP in the most efficient and stable way possible: by reference!")]),e._v(" "),t("p",[e._v("Enjoy!")]),e._v(" "),t("p",[e._v("Rama")]),e._v(" "),t("p",[e._v('Retrieved from "'),t("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=How_To_Modify_Blueprint_Variable_References_In_C%2B%2B_Without_Copying&oldid=15963",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=How_To_Modify_Blueprint_Variable_References_In_C%2B%2B_Without_Copying&oldid=15963"),t("OutboundLink")],1),e._v('"')]),e._v(" "),t("p",[t("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);r.default=n.exports}}]);