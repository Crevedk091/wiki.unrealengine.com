(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{906:function(e,n,t){"use strict";t.r(n);var o=t(28),a=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Animation Nodes, Code for How to Create Your Own - Epic Wiki")]),e._v(" "),t("h1",{attrs:{id:"animation-nodes-code-for-how-to-create-your-own"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#animation-nodes-code-for-how-to-create-your-own"}},[e._v("#")]),e._v(" Animation Nodes, Code for How to Create Your Own")]),e._v(" "),t("h2",{attrs:{id:"contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Complete_Custom_Animation_Code_Example"}},[e._v("2 Complete Custom Animation Code Example")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Class_to_Extend_AnimNode_Base"}},[e._v("3 Class to Extend AnimNode_Base")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#.h"}},[e._v("3.1 .h")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#.cpp"}},[e._v("3.2 .cpp")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Key_Concepts_of_Animation_Nodes"}},[e._v("4 Key Concepts of Animation Nodes")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Animation_Update"}},[e._v("5 Animation Update")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Animation_Evaluate"}},[e._v("6 Animation Evaluate")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#AnimGraph_Node"}},[e._v("7 AnimGraph Node")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#.h_2"}},[e._v("7.1 .h")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#.cpp_2"}},[e._v("7.2 .cpp")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Summary"}},[e._v("8 Summary")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#UE4_Source_References"}},[e._v("9 UE4 Source References")])])]),e._v(" "),t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),t("p",[e._v("Dear Community,")]),e._v(" "),t("p",[e._v("In this tutorial I explain the very basics of making your own custom animation node.")]),e._v(" "),t("p",[e._v("My main goal is to help you establish the basic structure to then pursue your individual animation node goals on your ownÂ ðŸ˜ƒ")]),e._v(" "),t("p",[e._v("This is not a tutorial for creating skeletal controllers, but rather animation blends of one kind or anotherÂ ðŸ˜ƒ")]),e._v(" "),t("h2",{attrs:{id:"complete-custom-animation-code-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#complete-custom-animation-code-example"}},[e._v("#")]),e._v(" Complete Custom Animation Code Example")]),e._v(" "),t("p",[e._v("I have my entire source code for a custom animation node, Editor Graph Node included, here!")]),e._v(" "),t("p",[t("strong",[t("a",{attrs:{href:"/Animation_Node,_Entire_Source_for_a_Turn_In_Place_Node",title:"Animation Node, Entire Source for a Turn In Place Node"}},[e._v("Custom Turn in Place Animation Node")])])]),e._v(" "),t("h2",{attrs:{id:"class-to-extend-animnode-base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-to-extend-animnode-base"}},[e._v("#")]),e._v(" Class to Extend AnimNode_Base")]),e._v(" "),t("p",[e._v("Here is the basic setup you need, .h and .cpp, for the node itself")]),e._v(" "),t("p",[e._v("This node is a struct that is wrapped in the editor animgraph node that is what you are used to seeingÂ ðŸ˜ƒ")]),e._v(" "),t("h3",{attrs:{id:"h"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[e._v("#")]),e._v(" .h")]),e._v(" "),t("p",[e._v('// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\nÂ \n#pragma once\n#include "AnimNode_NameOfYourNode.generated.h"\nÂ \nUSTRUCT()\nstruct FAnimNode_NameOfYourNode : public FAnimNode_Base\n{\nGENERATED_USTRUCT_BODY()\nÂ \n//FPoseLink - this can be any combination\n//of other nodes, not just animation sequences\n//\tso you could have an blend space leading into\n//a layer blend per bone to just use the arm\n//\tand then pass that into the PoseLink\nÂ \n/** Base Pose - This Can Be Entire Anim Graph Up To This Point, or Any Combination of Other Nodes*/\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links)\nFPoseLink BasePose;\nÂ \n/** Other Pose! - This Can Be Entire Anim Graph Up To This Point, or Any Combination of Other Nodes */\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links)\nFPoseLink OtherPose;\nÂ \n/** Sample Property That Will Show Up as a Pin */\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links, meta=(PinShownByDefault))\nfloat SampleFloat;\nÂ \n// FAnimNode_Base interface\npublic:\nÂ \n// FAnimNode_Base interface\nvirtual void Initialize(const FAnimationInitializeContext& Context) OVERRIDE;\nvirtual void CacheBones(const FAnimationCacheBonesContext & Context) OVERRIDE;\nvirtual void Update(const FAnimationUpdateContext & Context) OVERRIDE;\nvirtual void Evaluate(FPoseContext& Output) OVERRIDE;\n// End of FAnimNode_Base interface\nÂ \n// Constructor\npublic:\nÂ \nFAnimNode_NameOfYourNode();\nÂ \nprotected:\nbool WorldIsGame;\nAActor* OwningActor;\n};')]),e._v(" "),t("h3",{attrs:{id:"cpp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpp"}},[e._v("#")]),e._v(" .cpp")]),e._v(" "),t("p",[e._v('// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\nÂ \n#include "YourGame.h"\nÂ \n//#include "AnimationRuntime.h"\nÂ \nFAnimNode_NameOfYourNode::FAnimNode_NameOfYourNode()\n: FAnimNode_Base()\n, SampleFloat(128.333)\n{\nWorldIsGame = false;\n}\nÂ \nvoid FAnimNode_NameOfYourNode::Initialize(const FAnimationInitializeContext & Context)\n{\n//Init the Inputs\nBasePose.Initialize(Context);\nOtherPose.Initialize(Context);\nÂ \n//Get the Actor Owner\nOwningActor = Context.AnimInstance-> GetSkelMeshComponent()->GetOwner();\nÂ \n//Editor or Game?\nUWorld * TheWorld = Context.AnimInstance->GetWorld();\nif (!TheWorld) return;\n//~\nÂ \nWorldIsGame = (TheWorld->WorldType == EWorldType::Game);\n}\nÂ \nvoid FAnimNode_NameOfYourNode::CacheBones(const FAnimationCacheBonesContext & Context)\n{\nBasePose.CacheBones(Context);\nOtherPose.CacheBones(Context);\n}\nvoid FAnimNode_NameOfYourNode::Update(const FAnimationUpdateContext & Context)\n{\n//***************************************\n// Evaluate Graph, see AnimNode_Base, AnimNodeBase.h\nEvaluateGraphExposedInputs.Execute(Context);\n//***************************************\nÂ \n//EDITOR\n//Editor mode? just use the base pose\nif (!WorldIsGame)\n{\n//if your node depends on\n//actual actor instance, can\'t do anything in editor\n}\nÂ \n//GAME\n//Actually in Game so the Owner Instance Should Exist\nelse\n{\n//Try Again if not found\nif (!OwningActor) OwningActor =\nContext.AnimInstance->GetSkelMeshComponent()->GetOwner();\nÂ \n//Not found\nif (!OwningActor)\n{\nUE_LOG(LogAnimation, Warning,\nTEXT("FAnimNode_NameOfYourNode::Update() Owning Actor was not found"));\nreturn;\n//~\n}\nÂ \n//Do Stuff Based On Actor Owner\n}\n//~~\nÂ \n// Do Updates\nÂ \n//Try To Update As Few of the Inputs As You Can\nÂ \n//************************************************\n// FPoseLinkBase::Update Active Pose - this is what makes\n//the glowing line thing happen and animations loop\n//***********************************************\nBasePose.Update(Context);\nÂ \nÂ \nÂ \n}\nÂ \nvoid FAnimNode_NameOfYourNode::Evaluate(FPoseContext & Output)\n{\n// Return Base Pose, Un Modified\nBasePose.Evaluate(Output);\nÂ \n//Evaluate is returning the Output to this function,\n//which is returning the Output to the rest of the Anim Graph\nÂ \n//In this case, we are passing the Output out variable into the BasePose\nÂ \n//Basically saying, give us back the unmodified Base Pose\nÂ \n//i.e, the bulk of your anim tree.\n}')]),e._v(" "),t("h2",{attrs:{id:"key-concepts-of-animation-nodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key-concepts-of-animation-nodes"}},[e._v("#")]),e._v(" Key Concepts of Animation Nodes")]),e._v(" "),t("p",[e._v("There is an initialize, an update, and an evaluate")]),e._v(" "),t("p",[e._v("Initialize = make sure to initialize the inputs!")]),e._v(" "),t("p",[e._v("BasePose.Initialize(Context);\nOtherPose.Initialize(Context);")]),e._v(" "),t("h2",{attrs:{id:"animation-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#animation-update"}},[e._v("#")]),e._v(" Animation Update")]),e._v(" "),t("p",[e._v('Make sure to actually "tick" the inputs of your choice!')]),e._v(" "),t("p",[e._v("BasePose.Update(Context);")]),e._v(" "),t("p",[e._v("Try to update as few of the inputs as you can, based on the logic of your anim node.")]),e._v(" "),t("p",[e._v("For example if you were blending between A and B and you were fully blended to B, you would not need to update A at all")]),e._v(" "),t("p",[e._v("But if you were at 0.5 in between you'd have to update both.")]),e._v(" "),t("p",[e._v("If you don't update any poses then the graph lines will not glow.")]),e._v(" "),t("h2",{attrs:{id:"animation-evaluate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#animation-evaluate"}},[e._v("#")]),e._v(" Animation Evaluate")]),e._v(" "),t("p",[e._v("Pass out the results of all your calculations and updates as the output to the rest of the Anim Graph")]),e._v(" "),t("p",[e._v("The Output variable is the entire output of all your anim nodes activities")]),e._v(" "),t("p",[e._v("BasePose.Evaluate(Output);")]),e._v(" "),t("p",[e._v("You can do much more complicated things than just evaluate the base or the other poses")]),e._v(" "),t("p",[e._v("The key data of Output is Output.Pose, which is an FA2Pose data, which is animation data that could be calculated any number of ways.")]),e._v(" "),t("p",[e._v("As long as you update Output.Pose you can do all sorts of things")]),e._v(" "),t("p",[e._v(")")]),e._v(" "),t("h2",{attrs:{id:"animgraph-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#animgraph-node"}},[e._v("#")]),e._v(" AnimGraph Node")]),e._v(" "),t("p",[e._v("Here is the basic .h and .cpp you need for making the in-editor anim graph visual representation of your node")]),e._v(" "),t("h3",{attrs:{id:"h-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h-2"}},[e._v("#")]),e._v(" .h")]),e._v(" "),t("p",[e._v('// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\nÂ \n#pragma once\nÂ \n#include "AnimGraphDefinitions.h"\n#include "Kismet2/BlueprintEditorUtils.h"\nÂ \n#include "AnimGraphNode_NameOfYourNode.generated.h"\nÂ \n//Whole point of this is to be wrapper for node struct\n//\tso it depends on it, and that node must compile first\n//\tfor type to be recognized\nÂ \nUCLASS(MinimalAPI, dependson=FAnimNode_NameOfYourNode)\nclass UAnimGraphNode_NameOfYourNode : public UAnimGraphNode_Base\n{\nGENERATED_UCLASS_BODY()\nÂ \nUPROPERTY(EditAnywhere, Category=Settings)\nFAnimNode_NameOfYourNode Node;\nÂ \npublic:\n// UEdGraphNode interface\nvirtual FString GetNodeTitle(ENodeTitleType::Type TitleType) const OVERRIDE;\nvirtual FLinearColor GetNodeTitleColor() const OVERRIDE;\nvirtual FString GetNodeCategory() const OVERRIDE;\n// End of UEdGraphNode interface\nÂ \nprotected:\nvirtual FString GetControllerDescription() const;\nÂ \n};')]),e._v(" "),t("h3",{attrs:{id:"cpp-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpp-2"}},[e._v("#")]),e._v(" .cpp")]),e._v(" "),t("p",[e._v('// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.\nÂ \n#include "YourGame.h"\nÂ \n/////////////////////////////////////////////////////\n// UAnimGraphNode_NameOfYourNode\nÂ \nUAnimGraphNode_NameOfYourNode::UAnimGraphNode_NameOfYourNode(const FPostConstructInitializeProperties& PCIP)\n: Super(PCIP)\n{\n}\nÂ \n//Title Color!\nFLinearColor UAnimGraphNode_NameOfYourNode::GetNodeTitleColor() const\n{\nreturn FLinearColor(0,12,12,1);\n}\nÂ \n//Node Category\nFString UAnimGraphNode_NameOfYourNode::GetNodeCategory() const\n{\nreturn FString("Anim Node Category");\n}\nFString UAnimGraphNode_NameOfYourNode::GetControllerDescription() const\n{\nreturn TEXT(" Your Anim node Title ");\n}\nÂ \nFString UAnimGraphNode_NameOfYourNode::GetNodeTitle(ENodeTitleType::Type TitleType) const\n{\nFString Result = *GetControllerDescription();\nResult += (TitleType == ENodeTitleType::ListView) ? TEXT("") : TEXT("\\n");\nreturn Result;\n}')]),e._v(" "),t("h2",{attrs:{id:"summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),t("p",[e._v("With these basics and reviewing the different animation data types you are well on your way to making your own animatoion node!")]),e._v(" "),t("h2",{attrs:{id:"ue4-source-references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ue4-source-references"}},[e._v("#")]),e._v(" UE4 Source References")]),e._v(" "),t("p",[e._v("See these .h files for lots of important info")]),e._v(" "),t("p",[e._v("AnimNodeBase.h\nAnimationAssets.h\nAnimInstance.h")]),e._v(" "),t("p",[e._v("Enjoy!")]),e._v(" "),t("p",[t("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),t("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),t("p",[e._v('Retrieved from "'),t("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Animation_Nodes,_Code_for_How_to_Create_Your_Own&oldid=4485",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Animation_Nodes,_Code_for_How_to_Create_Your_Own&oldid=4485"),t("OutboundLink")],1),e._v('"')]),e._v(" "),t("p",[t("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=a.exports}}]);