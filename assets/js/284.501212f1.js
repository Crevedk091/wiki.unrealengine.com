(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{645:function(e,t,o){"use strict";o.r(t);var i=o(28),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Building Linux cross-toolchain - Epic Wiki")]),e._v(" "),o("h1",{attrs:{id:"building-linux-cross-toolchain"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#building-linux-cross-toolchain"}},[e._v("#")]),e._v(" Building Linux cross-toolchain")]),e._v(" "),o("h1",{attrs:{id:"big-picture-view"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#big-picture-view"}},[e._v("#")]),e._v(" Big picture view")]),e._v(" "),o("ol",[o("li",[e._v("Download the pre-built toolchain to get shell scripts and ct-ng configs")]),e._v(" "),o("li",[e._v("Build gcc-based cross-toolchain on a Linux machine.")]),e._v(" "),o("li",[e._v("Copy it to Windows machine and build/download clang.")])]),e._v(" "),o("h2",{attrs:{id:"building-gcc-based-cross-toolchain"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#building-gcc-based-cross-toolchain"}},[e._v("#")]),e._v(" Building gcc-based cross-toolchain")]),e._v(" "),o("p",[e._v("You need to download the pre-built toolchain first, since it contains the necesary scripts (see toolchain/Build/script/ directory). You may also want to follow the steps in its Build/script/README.md rather than here, since they may match the scripts you have better.")]),e._v(" "),o("p",[e._v("Copy BuildCrossToolchain.sh together with linux-host.config and win64-host.config to a Linux machine running reasonably recent distro. Make sure that the following pre-requisites are installed (using Debian package names here):")]),e._v(" "),o("p",[e._v("mercurial autoconf gperf bison flex libtool ncurses-dev")]),e._v(" "),o("p",[e._v("and of course make/gcc.")]),e._v(" "),o("p",[e._v('Run the script, which will clone current crosstool-ng and will use it to perform so called "Canadian cross", i.e. will build Linux-hosted toolchain which targets mingw64 first, and then will build Windows-hosted toolchain that targets Linux. Note that the choice of kernel and binutils is pretty conservative and you are free to experiment (using "ct-ng menuconfig") if you need more recent ones. Not every combination is buildable though.')]),e._v(" "),o("p",[e._v("If the script finishes without error, the new toolchain will be copied to subfolder called CrossToolchain of the current folder. Copy it to your Windows machine, e.g. to C:\\CrossToolchain. Note that libz.a from this folder will be copied to lib64 folder of the toolchain.")]),e._v(" "),o("h2",{attrs:{id:"building-clang"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#building-clang"}},[e._v("#")]),e._v(" Building clang")]),e._v(" "),o("p",[e._v("You can grab a pre-built clang from "),o("a",{attrs:{href:"http://llvm.org/releases/download.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1),e._v(", but we haven't actually tried that, building ourselves for various reasons. Detailed instructions how to build clang are given here: "),o("a",{attrs:{href:"http://clang.llvm.org/get_started.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://clang.llvm.org/get_started.html"),o("OutboundLink")],1),e._v(" To recap, you will need: cmake, python and a supported compiler (recent Visual Studio is Ok).")]),e._v(" "),o("p",[e._v("Grab stable releases of llvm and clang from here: "),o("a",{attrs:{href:"http://llvm.org/releases/download.html#3.3",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://llvm.org/releases/download.html#3.3"),o("OutboundLink")],1),e._v(' and unpack it to your local folder (unpack llvm first, then unpack clang into llvm/tools subdirectory).Use cmake to generate project files and then build Release (or MinSizeRel) x64 configuration of "install" (or INSTALL, if you are using Visual Studio) target. Copy')]),e._v(" "),o("p",[e._v("bin/clang++.exe\nlib/clang/3.3/include")]),e._v(" "),o("p",[e._v("into the toolchain (so their relative path from toolchain root stays the same). At this point you should be done and your toolchain should be usable for "),o("a",{attrs:{href:"/Compiling_For_Linux",title:"Compiling For Linux"}},[e._v("cross-compilation")]),e._v(".")]),e._v(" "),o("p",[e._v('Retrieved from "'),o("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Building_Linux_cross-toolchain&oldid=4125",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Building_Linux_cross-toolchain&oldid=4125"),o("OutboundLink")],1),e._v('"')]),e._v(" "),o("p",[o("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=n.exports}}]);