(window.webpackJsonp=window.webpackJsonp||[]).push([[1113],{550:function(e,n,t){"use strict";t.r(n);var a=t(28),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("UMG, Custom Widget Components And Render Code, Usable In UMG Designer - Epic Wiki")]),e._v(" "),t("h1",{attrs:{id:"umg-custom-widget-components-and-render-code-usable-in-umg-designer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#umg-custom-widget-components-and-render-code-usable-in-umg-designer"}},[e._v("#")]),e._v(" UMG, Custom Widget Components And Render Code, Usable In UMG Designer")]),e._v(" "),t("p",[e._v("(Redirected from "),t("a",{attrs:{href:"/index.php?title=UMG,_Custom_Components_And_Render_Code,_Usable_In_UMG_Designer&redirect=no",title:"UMG, Custom Components And Render Code, Usable In UMG Designer"}},[e._v("UMG, Custom Components And Render Code, Usable In UMG Designer")]),e._v(")")]),e._v(" "),t("h2",{attrs:{id:"contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Video_of_Custom_UMG_Component.2C_Editable_within_Designer"}},[e._v("2 Video of Custom UMG Component, Editable within Designer")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Custom_UMG_Component_Property:_Thickness"}},[e._v("3 Custom UMG Component Property: Thickness")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Build_CS"}},[e._v("4 Build CS")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#C.2B.2B_Code_for_You"}},[e._v("5 C++ Code for You")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#JoySoftEdgeImage.h"}},[e._v("5.1 JoySoftEdgeImage.h")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#JoySoftEdgeImage.cpp"}},[e._v("5.2 JoySoftEdgeImage.cpp")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#.h"}},[e._v("5.3 .h")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#.cpp"}},[e._v("5.4 .cpp")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Conclusion"}},[e._v("6 Conclusion")])])]),e._v(" "),t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),t("p",[t("a",{attrs:{href:"/File:RamaUMGCustomComponents.jpg"}},[t("img",{attrs:{src:"https://d3ar1piqh1oeli.cloudfront.net/a/ac/RamaUMGCustomComponents.jpg/900px-RamaUMGCustomComponents.jpg",alt:"RamaUMGCustomComponents.jpg"}})])]),e._v(" "),t("p",[t("em",[e._v("Original Author:")]),e._v(" "),t("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),t("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),t("p",[e._v("In this wiki I provide you with the full code that I used to create a custom Designer-positionable and editable UMG component!")]),e._v(" "),t("p",[e._v("This is a UMG widget/component with completely custom render code that works with UMG's render transform system!")]),e._v(" "),t("h2",{attrs:{id:"video-of-custom-umg-component-editable-within-designer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#video-of-custom-umg-component-editable-within-designer"}},[e._v("#")]),e._v(" Video of Custom UMG Component, Editable within Designer")]),e._v(" "),t("h2",{attrs:{id:"custom-umg-component-property-thickness"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#custom-umg-component-property-thickness"}},[e._v("#")]),e._v(" Custom UMG Component Property: Thickness")]),e._v(" "),t("p",[e._v("In my code I am not only sharing with you how to do custom render code, I am also showing you how to make your own custom properties that will update in the UMG Designer!")]),e._v(" "),t("p",[e._v("As you see in the video, my custom property Thickness, which directly affects the rendering, does update instantly every time I enter new values within the UMG Designer!")]),e._v(" "),t("h2",{attrs:{id:"build-cs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-cs"}},[e._v("#")]),e._v(" Build CS")]),e._v(" "),t("p",[e._v("Make sure you have this in your project's build cs to ensure my code below will compile!")]),e._v(" "),t("p",[e._v('PublicDependencyModuleNames.AddRange(new string[] {\n"Core", "CoreUObject", "Engine", "InputCore",\n"UMG", "Slate", "SlateCore",\n});')]),e._v(" "),t("h2",{attrs:{id:"c-code-for-you"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-code-for-you"}},[e._v("#")]),e._v(" C++ Code for You")]),e._v(" "),t("p",[e._v('You are welcome to use my C++ code as a template for your own custom UMG components, just please credit me as the original author/contributor of the code that you use! Mentioning me as "Rama" is sufficient.')]),e._v(" "),t("p",[e._v("Note that there are two new classes!")]),e._v(" "),t("p",[e._v("There is the Slate C++ Core widget, which has the custom render code and the custom property, thickness, for use with the render code.")]),e._v(" "),t("p",[e._v("This Slate widget extends SImage to minimize introduction of duplicate/unnecessary code while also allowing me to inherit any new features that Epic adds to the SImage in the future!")]),e._v(" "),t("p",[e._v("Then there is also a UMG Component which wraps my custom Slate widget!")]),e._v(" "),t("p",[e._v("The core additional code to this UMG component class is my code to enable the Thickness property to trigger dynamic updates of the visual appearance of the custom component while in the Designer! These dynamic updates are accomplished using SynchronizeProperties().")]),e._v(" "),t("h3",{attrs:{id:"joysoftedgeimage-h"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#joysoftedgeimage-h"}},[e._v("#")]),e._v(" JoySoftEdgeImage.h")]),e._v(" "),t("p",[e._v('/*\nJoySoftEdgeImage by Rama\n*/\n#pragma once\n \n//~~~~~~~~~~~~ UMG ~~~~~~~~~~~~~~~~\n#include "Runtime/UMG/Public/UMG.h"\n#include "Runtime/UMG/Public/UMGStyle.h"\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n//Custom Slate Element\n#include "SSoftEdgeImage.h"\n \n#include "JoySoftEdgeImage.generated.h"\n \nUCLASS()\nclass UJoySoftEdgeImage : public UWidget\n{\nGENERATED_UCLASS_BODY()\n \n//Custom Slate Element\nprotected:\nTSharedPtr<SSoftEdgeImage> MyImage;\n \n//~~~~~~~~~~\n//Thickness\n// \tRama\'s custom UMG Widget property!\n//~~~~~~~~~~\npublic:\n/** Thickness */\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Joy Soft Edge Image")\nfloat Thickness;\n \n//Delegate verison if you want it!\n//\t\t-Rama\n//UPROPERTY()\n//FGetFloat ThicknessDelegate;\n \n/** Update thickness of Soft Edge Image! Yay! */\nUFUNCTION(BlueprintCallable, Category="Joy Soft Edge Image")\nvoid SetThickness(float InThickness);\n \n//~~~ Rest is copied from UMG Image.h ~~~\npublic:\n \n/** Image to draw */\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=Appearance)\nFSlateBrush Brush;\n \n/** A bindable delegate for the Image. */\nUPROPERTY()\nFGetSlateBrush BrushDelegate;\n \n/** Color and opacity */\nUPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=Appearance)\nFLinearColor ColorAndOpacity;\n \n/** A bindable delegate for the ColorAndOpacity. */\nUPROPERTY()\nFGetLinearColor ColorAndOpacityDelegate;\n \npublic:\n \nUPROPERTY(EditDefaultsOnly, Category=Events)\nFOnPointerEvent OnMouseButtonDownEvent;\n \npublic:\n \n/**  */\nUFUNCTION(BlueprintCallable, Category="Appearance")\nvoid SetColorAndOpacity(FLinearColor InColorAndOpacity);\n \n/**  */\nUFUNCTION(BlueprintCallable, Category="Appearance")\nvoid SetOpacity(float InOpacity);\n \n/**  */\nUFUNCTION(BlueprintCallable, Category="Appearance")\nvoid SetBrushFromAsset(USlateBrushAsset* Asset);\n \n/**  */\nUFUNCTION(BlueprintCallable, Category="Appearance")\nvoid SetBrushFromTexture(UTexture2D* Texture);\n \n/**  */\nUFUNCTION(BlueprintCallable, Category="Appearance")\nvoid SetBrushFromMaterial(UMaterialInterface* Material);\n \n/**  */\nUFUNCTION(BlueprintCallable, Category="Appearance")\nUMaterialInstanceDynamic* GetDynamicMaterial();\n \n// UWidget interface\nvirtual void SynchronizeProperties() override;\n// End of UWidget interface\n \n// UVisual interface\nvirtual void ReleaseSlateResources(bool bReleaseChildren) override;\n// End of UVisual interface\n \n#if WITH_EDITOR\n// UWidget interface\nvirtual const FSlateBrush* GetEditorIcon() override;\nvirtual const FText GetPaletteCategory() override;\n// End UWidget interface\n#endif\n \nprotected:\n// UWidget interface\nvirtual TSharedRef<SWidget> RebuildWidget() override;\n// End of UWidget interface\n \n/** Translates the bound brush data and assigns it to the cached brush used by this widget. */\nconst FSlateBrush* ConvertImage(TAttribute<FSlateBrush> InImageAsset) const;\n \nFReply HandleMouseButtonDown(const FGeometry& Geometry, const FPointerEvent& MouseEvent);\n};')]),e._v(" "),t("h3",{attrs:{id:"joysoftedgeimage-cpp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#joysoftedgeimage-cpp"}},[e._v("#")]),e._v(" JoySoftEdgeImage.cpp")]),e._v(" "),t("p",[e._v('/*\nUJoySoftEdgeImage by Rama\n*/\n \n//Project Name\n#include "Abatron.h"\n#include "JoySoftEdgeImage.h"\n \n//LOCTEXT\n#define LOCTEXT_NAMESPACE "UMG"\n \n/////////////////////////////////////////////////////\n// UJoySoftEdgeImage\n \n \n \nUJoySoftEdgeImage::UJoySoftEdgeImage(const FObjectInitializer& ObjectInitializer)\n: Super(ObjectInitializer)\n, ColorAndOpacity(FLinearColor(0,0,1,0.0333))\n, Thickness(24)\n{'),t("br"),e._v("\n//Default Values Set Here, see above\n}\n \n//Rebuild using custom Slate Widget\n//\t\t-Rama\nTSharedRef<SWidget> UJoySoftEdgeImage::RebuildWidget()\n{\nMyImage = SNew(SSoftEdgeImage);\nreturn MyImage.ToSharedRef();\n}\n \n//Set Thickness\nvoid UJoySoftEdgeImage::SetThickness(float InThickness)\n{\nThickness = InThickness;\nif ( MyImage.IsValid() )\n{\nMyImage->SetThickness(InThickness);\n}\n}\n \n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//This is where the SSoftEdgeImage slate widget gets updated\n//\t\twhen the UPROPERTY() is changed in the Editor\n//\t\t-Rama\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvoid UJoySoftEdgeImage::SynchronizeProperties()\n{\nSuper::SynchronizeProperties();\n \n//Thickness Delegate Version\n//TAttribute"),t("float",[e._v(' ThickBind = OPTIONAL_BINDING(float, Thickness);\n//MyImage->SetThickness(ThickBind.Get());\n \n//Thickness non-delegate version\nMyImage->SetThickness(Thickness);\n \n//Color and Opacity\nTAttribute<FSlateColor> ColorAndOpacityBinding = OPTIONAL_BINDING(FSlateColor, ColorAndOpacity);\nMyImage->SetColorAndOpacity(ColorAndOpacityBinding);\n \n//Image\nTAttribute<const FSlateBrush*> ImageBinding = OPTIONAL_BINDING_CONVERT(FSlateBrush, Brush, const FSlateBrush*, ConvertImage);\nMyImage->SetImage(ImageBinding);\n \n//Mouse\nMyImage->SetOnMouseButtonDown(BIND_UOBJECT_DELEGATE(FPointerEventHandler, HandleMouseButtonDown));\n}\n \n \n//~~~ Rest is copied from UMG Image.h ~~~\n \nvoid UJoySoftEdgeImage::ReleaseSlateResources(bool bReleaseChildren)\n{\nSuper::ReleaseSlateResources(bReleaseChildren);\n \nMyImage.Reset();\n}\n \nvoid UJoySoftEdgeImage::SetColorAndOpacity(FLinearColor InColorAndOpacity)\n{\nColorAndOpacity = InColorAndOpacity;\nif ( MyImage.IsValid() )\n{\nMyImage->SetColorAndOpacity(ColorAndOpacity);\n}\n}\n \nvoid UJoySoftEdgeImage::SetOpacity(float InOpacity)\n{\nColorAndOpacity.A = InOpacity;\nif ( MyImage.IsValid() )\n{\nMyImage->SetColorAndOpacity(ColorAndOpacity);\n}\n}\n \nconst FSlateBrush* UJoySoftEdgeImage::ConvertImage(TAttribute<FSlateBrush> InImageAsset) const\n{\nUJoySoftEdgeImage* MutableThis = const_cast<UJoySoftEdgeImage*>( this );\nMutableThis->Brush = InImageAsset.Get();\n \nreturn &Brush;\n}\n \nvoid UJoySoftEdgeImage::SetBrushFromAsset(USlateBrushAsset* Asset)\n{\nBrush = Asset ? Asset->Brush : FSlateBrush();\n \nif ( MyImage.IsValid() )\n{\nMyImage->SetImage(&Brush);\n}\n}\n \nvoid UJoySoftEdgeImage::SetBrushFromTexture(UTexture2D* Texture)\n{\nBrush.SetResourceObject(Texture);\n \nif ( MyImage.IsValid() )\n{\nMyImage->SetImage(&Brush);\n}\n}\n \nvoid UJoySoftEdgeImage::SetBrushFromMaterial(UMaterialInterface* Material)\n{\nBrush.SetResourceObject(Material);\n \n//TODO UMG Check if the material can be used with the UI\n \nif ( MyImage.IsValid() )\n{\nMyImage->SetImage(&Brush);\n}\n}\n \nUMaterialInstanceDynamic* UJoySoftEdgeImage::GetDynamicMaterial()\n{\nUMaterialInterface* Material = NULL;\n \nUObject* Resource = Brush.GetResourceObject();\nMaterial = Cast<UMaterialInterface>(Resource);\n \nif ( Material )\n{\nUMaterialInstanceDynamic* DynamicMaterial = Cast<UMaterialInstanceDynamic>(Material);\n \nif ( !DynamicMaterial )\n{\nDynamicMaterial = UMaterialInstanceDynamic::Create(Material, this);\nBrush.SetResourceObject(DynamicMaterial);\n \nif ( MyImage.IsValid() )\n{\nMyImage->SetImage(&Brush);\n}\n}\n \nreturn DynamicMaterial;\n}\n \n//TODO UMG can we do something for textures?  General purpose dynamic material for them?\n \nreturn NULL;\n}\n \nFReply UJoySoftEdgeImage::HandleMouseButtonDown(const FGeometry& Geometry, const FPointerEvent& MouseEvent)\n{\nif ( OnMouseButtonDownEvent.IsBound() )\n{\nreturn OnMouseButtonDownEvent.Execute(Geometry, MouseEvent).NativeReply;\n}\n \nreturn FReply::Unhandled();\n}\n \n#if WITH_EDITOR\n \nconst FSlateBrush* UJoySoftEdgeImage::GetEditorIcon()\n{\nreturn FUMGStyle::Get().GetBrush("Widget.Image");\n}\n \nconst FText UJoySoftEdgeImage::GetPaletteCategory()\n{\nreturn LOCTEXT("Common", "Common");\n}\n \n#endif\n \n \n/////////////////////////////////////////////////////\n \n#undef LOCTEXT_NAMESPACE')])],1),e._v(" "),t("h3",{attrs:{id:"h"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[e._v("#")]),e._v(" .h")]),e._v(" "),t("p",[e._v('/*\nBy Rama\n*/\n \n#pragma once\n \n//Slate Core\n#include "SlateCore.h"\n \nclass SSoftEdgeImage\n: public SImage\n{\npublic:\nSLATE_BEGIN_ARGS( SSoftEdgeImage )\n: _Image( FCoreStyle::Get().GetDefaultBrush() )\n, _ColorAndOpacity( FLinearColor(0,0,1,0.02333) )\n, _Thickness(24)\n, _OnMouseButtonDown()\n{}\n \n/** Image resource */\nSLATE_ATTRIBUTE( const FSlateBrush*, Image )\n \n/** Color and opacity */\nSLATE_ATTRIBUTE( FSlateColor, ColorAndOpacity )\n \n/** Thickness */\nSLATE_ATTRIBUTE( float, Thickness )\n \n/** Invoked when the mouse is pressed in the widget. */\nSLATE_EVENT( FPointerEventHandler, OnMouseButtonDown )\n \nSLATE_END_ARGS()\n \n/**\n* Construct this widget\n*\n* @param\tInArgs\tThe declaration data for this widget\n*/\nvoid Construct( const FArguments& InArgs );\n \n//~~~~~~~~\n//Thickness\n//~~~~~~~~\npublic:\nvoid SetThickness( float InThickness );\n \n/** How many times the image is repeated to give a softness to the edge */\nfloat Thickness;\n \npublic:\n \n// SWidget overrides\n \nvirtual int32 OnPaint( const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyClippingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled ) const override;\n \n};')]),e._v(" "),t("h3",{attrs:{id:"cpp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpp"}},[e._v("#")]),e._v(" .cpp")]),e._v(" "),t("p",[e._v('/*\nBy Rama\n*/\n \n#include "Abatron.h"\n#include "SSoftEdgeImage.h"\n \nDECLARE_CYCLE_STAT( TEXT("OnPaint SSoftEdgeImage"), STAT_SlateOnPaint_SSoftEdgeImage, STATGROUP_Slate );\n \n/**\n* Construct this widget\n*\n* @param\tInArgs\tThe declaration data for this widget\n*/\nvoid SSoftEdgeImage::Construct( const FArguments& InArgs )\n{\nImage \t\t\t\t= InArgs._Image;\nColorAndOpacity \t\t= InArgs._ColorAndOpacity;\nThickness \t\t\t= InArgs._Thickness.Get();\nOnMouseButtonDownHandler \t= InArgs._OnMouseButtonDown;\n}\n \nvoid SSoftEdgeImage::SetThickness( float InThickness )\n{\nThickness = InThickness;\n}\n \nint32 SSoftEdgeImage::OnPaint( const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyClippingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled ) const\n{\n#if SLATE_HD_STATS\nSCOPE_CYCLE_COUNTER( STAT_SlateOnPaint_SSoftEdgeImage );\n#endif\nconst FSlateBrush* ImageBrush = Image.Get();\n \nif ((ImageBrush != nullptr) && (ImageBrush->DrawAs != ESlateBrushDrawType::NoDrawType))\n{\nconst bool bIsEnabled = ShouldBeEnabled(bParentEnabled);\nconst uint32 DrawEffects = bIsEnabled ? ESlateDrawEffect::None : ESlateDrawEffect::DisabledEffect;\n \nconst FColor FinalColorAndOpacity( InWidgetStyle.GetColorAndOpacityTint() * ColorAndOpacity.Get().GetColor(InWidgetStyle) * ImageBrush->GetTint( InWidgetStyle ) );\n \n//For Thickness\nfor (int32 v = 0; v < Thickness; v++ )\n{   \t\t\n//Size\nFVector2D AdjustedSize =\nFVector2D(\nAllottedGeometry.GetLocalSize().X - v*2,\nAllottedGeometry.GetLocalSize().Y - v*2\n);\n \n//There\'s a warning about using this constructor in Geometry.h\n//\t\tBut it looks like the code was fixed in Geometry.cpp to use layout transform properly. Plus all render transforms work great in Editor.\n//\t\t\tSo keeping this for now 😃\nFPaintGeometry PaintGeom =\nAllottedGeometry.ToPaintGeometry(\nFVector2D(v,v),\t\t//Local Translation\nAdjustedSize,\t\t//Local Size\n1\t\t\t//Local Scale\n);\n \nFSlateDrawElement::MakeBox(\nOutDrawElements, \t//Out\nLayerId,\nPaintGeom, \t\t//Paint Geom\nImageBrush, \t\t//Brush\nMyClippingRect, \t\t//Clip\nDrawEffects,\nFinalColorAndOpacity \t//Color and Opacity\n);\n \n} //For loop\n}\nreturn LayerId;\n}')]),e._v(" "),t("h2",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("In this wiki I have now given you the entire code that I used to create the custom UMG widget with custom render code that you saw in my video!")]),e._v(" "),t("p",[e._v("Have fun making your own UMG Widgets for use with the UMG Designer!")]),e._v(" "),t("p",[e._v("♥")]),e._v(" "),t("p",[t("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),t("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),t("p",[e._v('Retrieved from "'),t("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=UMG,_Custom_Widget_Components_And_Render_Code,_Usable_In_UMG_Designer&oldid=21856",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=UMG,_Custom_Widget_Components_And_Render_Code,_Usable_In_UMG_Designer&oldid=21856"),t("OutboundLink")],1),e._v('"')]),e._v(" "),t("p",[t("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=o.exports}}]);