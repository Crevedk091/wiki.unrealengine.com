(window.webpackJsonp=window.webpackJsonp||[]).push([[1029],{610:function(t,e,a){"use strict";a.r(e);var r=a(28),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Structs, USTRUCTS(), They're Awesome - Epic Wiki")]),t._v(" "),a("h1",{attrs:{id:"structs-ustructs-they-re-awesome"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structs-ustructs-they-re-awesome"}},[t._v("#")]),t._v(" Structs, USTRUCTS(), They're Awesome")]),t._v(" "),a("p",[t._v("From Epic Wiki")]),t._v(" "),a("p",[t._v("(Redirected from "),a("a",{attrs:{href:"/index.php?title=Structs,_USTRUCTS(),_UE4_C%2B%2B_Structs&redirect=no",title:"Structs, USTRUCTS(), UE4 C++ Structs"}},[t._v("Structs, USTRUCTS(), UE4 C++ Structs")]),t._v(")")]),t._v(" "),a("p",[t._v("Jump to: "),a("a",{attrs:{href:"#mw-navigation"}},[t._v("navigation")]),t._v(", "),a("a",{attrs:{href:"#p-search"}},[t._v("search")])]),t._v(" "),a("h2",{attrs:{id:"contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[t._v("#")]),t._v(" Contents")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Overview"}},[t._v("1 Overview")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Core_Syntax"}},[t._v("2 Core Syntax")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Examples"}},[t._v("3 Examples")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Example_1"}},[t._v("3.1 Example 1")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Example_2"}},[t._v("3.2 Example 2")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#C.2B.2B"}},[t._v("3.2.1 C++")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Particle_Data_Tracker"}},[t._v("3.2.2 Particle Data Tracker")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Garbage_Collection"}},[t._v("3.2.3 Garbage Collection")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Structs_With_Struct_Member_Variables"}},[t._v("4 Structs With Struct Member Variables")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Struct_Assignment"}},[t._v("5 Struct Assignment")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#.H"}},[t._v("5.1 .H")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#.CPP"}},[t._v("5.2 .CPP")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Deep_Copy.2C_Epic_is_Awesome"}},[t._v("6 Deep Copy, Epic is Awesome")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#.H_2"}},[t._v("6.1 .H")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#.CPP_2"}},[t._v("6.2 .CPP")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Automatic_Make.2FBreak_in_BP"}},[t._v("7 Automatic Make/Break in BP")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Replication"}},[t._v("8 Replication")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#.H_3"}},[t._v("8.1 .H")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#.CPP_3"}},[t._v("8.2 .CPP")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Thank_You_Epic_for_USTRUCTS.28.29"}},[t._v("9 Thank You Epic for USTRUCTS()")])])]),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[a("em",[t._v("Original Author:")]),t._v(" "),a("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[t._v("Rama")]),t._v(" ("),a("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[t._v("talk")]),t._v(")")]),t._v(" "),a("p",[t._v("Dear Community,")]),t._v(" "),a("p",[t._v("Structs enable you to create custom variable types to organize your data, by relating other c++ or UE4 C++ data types to each other.")]),t._v(" "),a("p",[t._v("The power of structs is "),a("strong",[t._v("extreme organization")]),t._v(",")]),t._v(" "),a("p",[t._v("as well as ability to have functions for "),a("strong",[t._v("internal data type operations!")])]),t._v(" "),a("p",[t._v("Structs should be used for simple data type combining and data management purposes.")]),t._v(" "),a("p",[t._v("For complex interactions with the game world,\nyou should make a UObject or AActor subclass insteadÂ ðŸ˜ƒ")]),t._v(" "),a("h2",{attrs:{id:"core-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core-syntax"}},[t._v("#")]),t._v(" Core Syntax")]),t._v(" "),a("p",[t._v("USTRUCT()\nstruct FJoyStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \n//Always make USTRUCT variables into UPROPERTY()\n//    any non-UPROPERTY() struct vars are not replicated\nÂ \n// So to simplify your life for later debugging, always use UPROPERTY()\nUPROPERTY()\nint32 SampleInt32;\nÂ \nUPROPERTY()\nAActor* TargetActor;\nÂ \n//Set\nvoid SetInt(const int32 NewValue)\n{\nSampleInt32 = NewValue;\n}\nÂ \n//Get\nAActor* GetActor()\n{\nreturn TargetActor;\n}\nÂ \n//Check\nbool ActorIsValid() const\n{\nif(!TargetActor) return false;\nreturn TargetActor->IsValidLowLevel();\n}\nÂ \n//Constructor\nFJoyStruct()\n{\n//Always initialize your USTRUCT variables!\n//   exception is if you know the variable type has its own default constructor\nSampleInt32 \t= 5;\nTargetActor = NULL;\n}\n};  //Always remember thisÂ ;  at the end! You will get odd compile errors otherwise")]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("h3",{attrs:{id:"example-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-1"}},[t._v("#")]),t._v(" Example 1")]),t._v(" "),a("p",[t._v("You want to relate a float brightness value with a world space location FVector, both of which are interpolated using an Alpha value.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("And you want to do this for 100 different game locations simultaneously.")])]),t._v(" "),a("li",[a("p",[t._v("And you want to do this process repeatedly over time!")])]),t._v(" "),a("li",[a("p",[t._v("You need to store the incremental interpolation values between game events.")])]),t._v(" "),a("li",[a("p",[t._v("AActors/UObjects are not involved (You could just subclass AActor/UObject and store the data per instance)")])])]),t._v(" "),a("p",[t._v("USTRUCT()\nstruct FMyInterpStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \nUPROPERTY()\nfloat Brightness;\nÂ \nUPROPERTY()\nfloat BrightnessGoal; //interping to\nÂ \nUPROPERTY()\nFVector Location;\nÂ \nUPROPERTY()\nFVector LocationGoal;\nÂ \nUPROPERTY()\nfloat Alpha;\nÂ \nvoid InterpInternal()\n{\nLocation = FMath::Lerp<FVector>(Location,LocationGoal,Alpha);\nBrightness = FMath::Lerp<float>(Brightness,BrightnessGoal,Alpha);\n}\nÂ \n//Brightness out is returned, FVector is returned by reference\nfloat Interp(const float& NewAlpha, FVector& Out)\n{\n//value received from rest of your game engine\nAlpha = NewAlpha;\nÂ \n//Internal data structure management\nInterpInternal();\nÂ \n//Return Values\nOut = Location;\nreturn Brightness;\n}\nFMyInterpStruct()\n{\nBrightness = 2;\nBrightnessGoal = 100;\nÂ \nAlpha = 0;\nÂ \nLocation = FVector::ZeroVector;\nLocationGoal = FVector(0,0,200000);\n}\n};")]),t._v(" "),a("h3",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example 2")]),t._v(" "),a("p",[t._v("You want to track information about particle system components that you have spawned into the world")]),t._v(" "),a("p",[t._v("UGameplayStatics::SpawnEmitterAtLocation()")]),t._v(" "),a("p",[t._v("which returns a UParticleSystemComponent,")]),t._v(" "),a("p",[t._v("and you want to track the lifetime of the particle and apply parameter changes from the C++.")]),t._v(" "),a("p",[t._v("You could write your own class,")]),t._v(" "),a("p",[t._v("but if your needs are simple,")]),t._v(" "),a("p",[t._v("or you do not have project-permissions to make a subclass of UParticleSystemComponent,")]),t._v(" "),a("p",[t._v("you can just make a USTRUCT to relate the various data types!")]),t._v(" "),a("h4",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[t._v("#")]),t._v(" C++")]),t._v(" "),a("p",[t._v("USTRUCT()\nstruct FParticleStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \nUPROPERTY()\nUParticleSystemComponent* PSCPtr;\nÂ \nUPROPERTY()\nfloat LifeTime;\nÂ \nvoid SetColor()\n{\n//\n}\nFLinearColor GetCurrentColor() const\n{\n//\n}\nÂ \n//For GC\nvoid Destroy()\n{\nPSCPtr = nullptr;\n}\nÂ \n//Constructor\nFParticleStruct()\n{\nPSCPtr = NULL;\nLifeTime = -1;\n}\n};")]),t._v(" "),a("h4",{attrs:{id:"particle-data-tracker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#particle-data-tracker"}},[t._v("#")]),t._v(" Particle Data Tracker")]),t._v(" "),a("p",[t._v("Now you can have an array of these USTRUCTS for each particle that you spawn!")]),t._v(" "),a("p",[t._v("//Particle Data Tracking Array\nTArray<FParticleStruct> PSCArray;")]),t._v(" "),a("h4",{attrs:{id:"garbage-collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#garbage-collection"}},[t._v("#")]),t._v(" Garbage Collection")]),t._v(" "),a("p",[t._v("Because all of your USTRUCT variables are UPROPERTY(), you must be careful to null them out when you are ready to destroy the particle system component.")]),t._v(" "),a("p",[t._v("void Destroy()\n{\nPSCPtr = nullptr;\n}")]),t._v(" "),a("h2",{attrs:{id:"structs-with-struct-member-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structs-with-struct-member-variables"}},[t._v("#")]),t._v(" Structs With Struct Member Variables")]),t._v(" "),a("p",[t._v("The struct that wants to use another struct must be defined below the struct it wants to include.")]),t._v(" "),a("p",[t._v("USTRUCT()\nstruct FFlowerStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \nUPROPERTY()\nint32 NumPetals;\nÂ \nUPROPERTY()\nFLinearColor Color;\nÂ \nUPROPERTY()\nFVector Scale3D;\nÂ \nvoid SetFlowerColor(const FLinearColor& NewColor)\n{\nColor = NewColor;\n}\nÂ \nFFlowerStruct()\n{\nNumPetals \t= 5;\nScale3D \t\t= FVector(1,1,1);\nColor \t\t\t= FLinearColor(1,0,0,1);\n}\n};\nÂ \nUSTRUCT()\nstruct FIslandStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \nUPROPERTY()\nint32 Type;\nÂ \nUPROPERTY()\nTArray<FVector> StarLocations;\nÂ \nUPROPERTY()\nfloat RainAlpha;\nÂ \n//Dynamic Array of Flower Custom USTRUCT()\nUPROPERTY()\nTArray<FFlowerStruct> FlowersOnThisIsland;\nÂ \nvoid SetRainAlpha(const float& NewAlpha)\n{\nRainAlpha = NewAlpha;\n}\nÂ \nint32 GetStarCount() const\n{\nreturn StarLocations.Num();\n}\nFIslandStruct()\n{\nType = 0;\nPercent = 1;\n}\n};")]),t._v(" "),a("h2",{attrs:{id:"struct-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-assignment"}},[t._v("#")]),t._v(" Struct Assignment")]),t._v(" "),a("p",[t._v("My personal favorite thing about structs is that unlike UObject or AActor classes, which must be utilized via pointers (AActor*)")]),t._v(" "),a("p",[t._v("You can directly copy the entire contents of a USTRUCT\nto another USTRUCT of the same type with a single line of assignment!")]),t._v(" "),a("h3",{attrs:{id:"h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[t._v("#")]),t._v(" .H")]),t._v(" "),a("p",[t._v("FFlowerStruct ExistingFlower;")]),t._v(" "),a("h3",{attrs:{id:"cpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpp"}},[t._v("#")]),t._v(" .CPP")]),t._v(" "),a("p",[t._v("FFlowerStruct NewFlower;\nNewFlower = ExistingFlower;\nÂ \n//now NewFlower contains exactly the same data as ExistingFlower!")]),t._v(" "),a("h2",{attrs:{id:"deep-copy-epic-is-awesome"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deep-copy-epic-is-awesome"}},[t._v("#")]),t._v(" Deep Copy, Epic is Awesome")]),t._v(" "),a("p",[t._v("My next favorite thing about USTRUCTS is that if you do use struct assignment,")]),t._v(" "),a("p",[t._v("deep copying of all dynamic arrays and static arrays is done for you!")]),t._v(" "),a("h3",{attrs:{id:"h-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h-2"}},[t._v("#")]),t._v(" .H")]),t._v(" "),a("p",[t._v("USTRUCT()\nstruct FDeepCopyStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \nUPROPERTY()\nTArray<FVector> Locations;\nÂ \nUPROPERTY()\nFLinearColor Colors[1024];\nÂ \nFDeepCopyStruct()\n{\n}\n};\nÂ \nÂ \nFDeepCopyStruct MyExistingDeepCopyStruct;")]),t._v(" "),a("h3",{attrs:{id:"cpp-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpp-2"}},[t._v("#")]),t._v(" .CPP")]),t._v(" "),a("p",[t._v("FDeepCopyStruct NewStruct;\nNewStruct = MyExistingDeepCopyStruct;\nÂ \n//now all of the dynamic array and static array data has also been copied\n//   Thank You Epic!")]),t._v(" "),a("h2",{attrs:{id:"automatic-make-break-in-bp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automatic-make-break-in-bp"}},[t._v("#")]),t._v(" Automatic Make/Break in BP")]),t._v(" "),a("p",[t._v("If you add")]),t._v(" "),a("p",[t._v('EditAnywhere,BlueprintReadWrite,Category("your category")')]),t._v(" "),a("p",[t._v("to your USTRUCT variables then then an automatic Make and Break functions will be added in Blueprints, allowing you to construct or extract data from your custom USTRUCT!")]),t._v(" "),a("p",[t._v("Special thanks to Community member Iniside for pointing this outÂ ðŸ˜ƒ")]),t._v(" "),a("p",[t._v('USTRUCT()\nstruct FFlowerStruct\n{\nGENERATED_USTRUCT_BODY()\nÂ \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Flower Struct")\nint32 NumPetals;\nÂ \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Flower Struct")\nFLinearColor Color;\nÂ \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Flower Struct")\nFVector Scale3D;\n};')]),t._v(" "),a("p",[a("a",{attrs:{href:"/File:CustomUStructMakeBreak.jpg"}},[a("img",{attrs:{src:"https://d3ar1piqh1oeli.cloudfront.net/0/0d/CustomUStructMakeBreak.jpg/1000px-CustomUStructMakeBreak.jpg",alt:"CustomUStructMakeBreak.jpg"}})])]),t._v(" "),a("h2",{attrs:{id:"replication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replication"}},[t._v("#")]),t._v(" Replication")]),t._v(" "),a("hr"),t._v(" "),a("hr"),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Remember that only UPROPERTY() variables of USTRUCTS() are considered for replication!")]),t._v(" "),a("hr"),t._v(" "),a("hr"),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"h-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h-3"}},[t._v("#")]),t._v(" .H")]),t._v(" "),a("p",[t._v("Use RepRetry to guarantee all contents of the struct are replicated, if you need to")]),t._v(" "),a("p",[t._v("//in your AYourSimulatedProxy class .h\nÂ \nUPROPERTY(Replicated,RepRetry)\nFFlowerStruct MyReppedFlower;")]),t._v(" "),a("h3",{attrs:{id:"cpp-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpp-3"}},[t._v("#")]),t._v(" .CPP")]),t._v(" "),a("p",[t._v("DOREPLIFETIME(AYourSimulatedProxy, MyReppedFlower);")]),t._v(" "),a("h2",{attrs:{id:"thank-you-epic-for-ustructs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thank-you-epic-for-ustructs"}},[t._v("#")]),t._v(" Thank You Epic for USTRUCTS()")]),t._v(" "),a("p",[t._v("I love USTRUCTS(), thank you Epic!")]),t._v(" "),a("p",[a("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[t._v("Rama")]),t._v(" ("),a("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[t._v("talk")]),t._v(")")]),t._v(" "),a("p",[t._v('Retrieved from "'),a("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Structs,_USTRUCTS(),_They%27re_Awesome&oldid=5771",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://wiki.unrealengine.com/index.php?title=Structs,_USTRUCTS(),_They%27re_Awesome&oldid=5771"),a("OutboundLink")],1),t._v('"')]),t._v(" "),a("p",[a("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[t._v("Category")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[t._v("Code")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);