(window.webpackJsonp=window.webpackJsonp||[]).push([[884],{1402:function(t,e,r){"use strict";r.r(e);var a=r(28),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("Oculus Rift Separate View - Epic Wiki")]),t._v(" "),r("h1",{attrs:{id:"oculus-rift-separate-view"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oculus-rift-separate-view"}},[t._v("#")]),t._v(" Oculus Rift Separate View")]),t._v(" "),r("p",[r("strong",[t._v("Rate this Article:")])]),t._v(" "),r("p",[t._v("4.00")]),t._v(" "),r("p",[r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),t._v(" (3 votes)")]),t._v(" "),r("p",[t._v("Approved for Versions:4.4, 4.4.1, 4.4.2")]),t._v(" "),r("h2",{attrs:{id:"contents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[t._v("#")]),t._v(" Contents")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Overview"}},[t._v("1 Overview")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#Blueprints"}},[t._v("2 Blueprints")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#C.2B.2B"}},[t._v("3 C++")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Your.Build.cs"}},[t._v("3.1 Your.Build.cs")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#YourPlayerController.h"}},[t._v("3.2 YourPlayerController.h")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#YourPlayerController.cpp"}},[t._v("3.3 YourPlayerController.cpp")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#YourCharacter.h"}},[t._v("3.4 YourCharacter.h")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#YourCharacter.cpp"}},[t._v("3.5 YourCharacter.cpp")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#YourGameMode.cpp"}},[t._v("3.6 YourGameMode.cpp")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#See_also"}},[t._v("4 See also")])])]),t._v(" "),r("h2",{attrs:{id:"overview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),r("p",[t._v("By default, using an "),r("a",{attrs:{href:"/Oculus_Rift",title:"Oculus Rift"}},[t._v("Oculus Rift")]),t._v(" in Unreal Engine 4 affects the rotation responsible for both the players view and movement direction.")]),t._v(" "),r("p",[t._v("There are two main ways to change this:")]),t._v(" "),r("ul",[r("li",[t._v("Creating a Player Camera Manager, Player Controller & GameMode using Blueprints.")]),t._v(" "),r("li",[t._v("Creating a new Player Controller, Character & GameMode in C++.")])]),t._v(" "),r("p",[t._v("The end results are similar - the players view and movement directions are separate - but the C++ version is more flexible.")]),t._v(" "),r("h2",{attrs:{id:"blueprints"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#blueprints"}},[t._v("#")]),t._v(" Blueprints")]),t._v(" "),r("ol",[r("li",[t._v("Create a Blueprint that based on PlayerCameraManager.")]),t._v(" "),r("li",[t._v('In the Defaults tab, find "Follow Hmd Orientation" and set it to "true".')]),t._v(" "),r("li",[t._v("Create a Blueprint that based on PlayerController.")]),t._v(" "),r("li",[t._v("In the Defaults tab, find Player Camera Manager Class and set it to your PlayerCameraManager Blueprint.")]),t._v(" "),r("li",[t._v("Create a Blueprint that based on GameMode.")]),t._v(" "),r("li",[t._v("In the Defaults tab, find Default Controller Class and set it to your PlayerController Blueprint.")]),t._v(" "),r("li",[t._v("Finally, under your levels World Settings, find GameMode Override and set it to your GameMode Blueprint.")])]),t._v(" "),r("h2",{attrs:{id:"c"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[t._v("#")]),t._v(" C++")]),t._v(" "),r("p",[t._v("The C++ method is a more complex, but is also more flexible.")]),t._v(" "),r("h3",{attrs:{id:"your-build-cs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#your-build-cs"}},[t._v("#")]),t._v(" Your.Build.cs")]),t._v(" "),r("p",[t._v("Add HeadMountedDisplay to PublicDependencyModuleNames.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v('    PublicDependencyModuleNames.AddRange(new string\\[\\] { \n        "Core", \n        "CoreUObject",\n        "Engine",\n        "InputCore", \n        "HeadMountedDisplay"\n    });\n')])])]),r("p",[t._v("});")]),t._v(" "),r("h3",{attrs:{id:"yourplayercontroller-h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yourplayercontroller-h"}},[t._v("#")]),t._v(" YourPlayerController.h")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("virtual void UpdateRotation(float DeltaTime) override;\n")])])]),r("p",[t._v('UFUNCTION(BlueprintCallable, Category="Pawn")\nFRotator GetViewRotation() const;\n \nUFUNCTION(BlueprintCallable, Category="Pawn")\nvirtual void SetViewRotation(const FRotator& NewRotation);\n \nvirtual void SetControlRotation(const FRotator& NewRotation) override;\n \nprotected:\n \n/**\n*  View & Movement direction are now separate.\n*  The controller rotation will determine which direction we will move.\n*  ViewRotation represents where we are looking.\n*/\nUPROPERTY()\nFRotator ViewRotation;')]),t._v(" "),r("h3",{attrs:{id:"yourplayercontroller-cpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yourplayercontroller-cpp"}},[t._v("#")]),t._v(" YourPlayerController.cpp")]),t._v(" "),r("p",[t._v('// Make sure you include this!!\n#include "IHeadMountedDisplay.h"\n \nvoid AYourPlayerController::UpdateRotation(float DeltaTime)\n{\n// Calculate Delta to be applied on ViewRotation\nFRotator DeltaRot(RotationInput);\n \nFRotator NewControlRotation = GetControlRotation();\n \nif (PlayerCameraManager)\n{\nPlayerCameraManager->ProcessViewRotation(DeltaTime, NewControlRotation, DeltaRot);\n}\n \nSetControlRotation(NewControlRotation);\n \nif (!PlayerCameraManager || !PlayerCameraManager->bFollowHmdOrientation)\n{\nif (GEngine->HMDDevice.IsValid() && GEngine->HMDDevice->IsHeadTrackingAllowed())\n{\nFQuat HMDOrientation;\nFVector HMDPosition;\n \n// Disable bUpdateOnRT if using this method.\nGEngine->HMDDevice->GetCurrentOrientationAndPosition(HMDOrientation, HMDPosition);\n \nFRotator NewViewRotation = HMDOrientation.Rotator();\n \n// Only keep the yaw component from the controller.\nNewViewRotation.Yaw += NewControlRotation.Yaw;\n \nSetViewRotation(NewViewRotation);\n}\n}\n \nAPawn* const P = GetPawnOrSpectator();\nif (P)\n{\nP->FaceRotation(NewControlRotation, DeltaTime);\n}\n}\n \nvoid AYourPlayerController::SetControlRotation(const FRotator& NewRotation)\n{\nControlRotation = NewRotation;\n \n// Anything that is overriding view rotation will need to\n// call SetViewRotation() after SetControlRotation().\nSetViewRotation(NewRotation);\n \nif (RootComponent && RootComponent->bAbsoluteRotation)\n{\nRootComponent->SetWorldRotation(GetControlRotation());\n}\n}\n \nvoid AYourPlayerController::SetViewRotation(const FRotator& NewRotation)\n{\nViewRotation = NewRotation;\n}\n \nFRotator AYourPlayerController::GetViewRotation() const\n{\nreturn ViewRotation;\n}')]),t._v(" "),r("h3",{attrs:{id:"yourcharacter-h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yourcharacter-h"}},[t._v("#")]),t._v(" YourCharacter.h")]),t._v(" "),r("p",[t._v("public:\nvirtual FRotator GetViewRotation() const override;")]),t._v(" "),r("h3",{attrs:{id:"yourcharacter-cpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yourcharacter-cpp"}},[t._v("#")]),t._v(" YourCharacter.cpp")]),t._v(" "),r("p",[t._v("FRotator AYourCharacter::GetViewRotation() const\n{\nif (AYourPlayerController* MYPC = Cast<AYourPlayerController>(Controller))\n{\nreturn MYPC->GetViewRotation();\n}\nelse if (Role < ROLE_Authority)\n{\n// check if being spectated\nfor (FConstPlayerControllerIterator Iterator = GetWorld()->GetPlayerControllerIterator(); Iterator; ++Iterator)\n{\nAPlayerController* PlayerController = *Iterator;\nif (PlayerController && PlayerController->PlayerCameraManager->GetViewTargetPawn() == this)\n{\nreturn PlayerController->BlendedTargetViewRotation;\n}\n}\n}\n \nreturn GetActorRotation();\n}")]),t._v(" "),r("h3",{attrs:{id:"yourgamemode-cpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yourgamemode-cpp"}},[t._v("#")]),t._v(" YourGameMode.cpp")]),t._v(" "),r("p",[t._v("AYourGameMode::AYourGameMode(const class FPostConstructInitializeProperties& PCIP)\n: Super(PCIP)\n{\nDefaultPawnClass = AYourCharacter::StaticClass();\nPlayerControllerClass = AYourPlayerController::StaticClass();\n}")]),t._v(" "),r("h2",{attrs:{id:"see-also"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[t._v("#")]),t._v(" See also")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Oculus_Rift",title:"Oculus Rift"}},[t._v("Oculus Rift")])]),t._v(" "),r("li",[r("a",{attrs:{href:"/Oculus_Rift_Blueprint",title:"Oculus Rift Blueprint"}},[t._v("Oculus Rift Blueprint")])])]),t._v(" "),r("p",[r("a",{attrs:{href:"/User:Kris",title:"User:Kris"}},[t._v("Kris")])]),t._v(" "),r("p",[t._v('Retrieved from "'),r("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Oculus_Rift_Separate_View&oldid=8967",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://wiki.unrealengine.com/index.php?title=Oculus_Rift_Separate_View&oldid=8967"),r("OutboundLink")],1),t._v('"')]),t._v(" "),r("p",[r("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[t._v("Category")]),t._v(":")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[t._v("Code")])])]),t._v(" "),r("p",[t._v("Hidden category:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[t._v("Templates")])])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);e.default=o.exports}}]);