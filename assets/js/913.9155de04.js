(window.webpackJsonp=window.webpackJsonp||[]).push([[913],{685:function(t,n,i){"use strict";i.r(n);var a=i(28),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,i=t._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("Physics Constraints, Create New Constraints Dynamically During Runtime - Epic Wiki")]),t._v(" "),i("h1",{attrs:{id:"physics-constraints-create-new-constraints-dynamically-during-runtime"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#physics-constraints-create-new-constraints-dynamically-during-runtime"}},[t._v("#")]),t._v(" Physics Constraints, Create New Constraints Dynamically During Runtime")]),t._v(" "),i("h2",{attrs:{id:"contents"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[t._v("#")]),t._v(" Contents")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#Overview"}},[t._v("1 Overview")])]),t._v(" "),i("li",[i("a",{attrs:{href:"#Video_of_Dynamic_Physics_Constraints"}},[t._v("2 Video of Dynamic Physics Constraints")])]),t._v(" "),i("li",[i("a",{attrs:{href:"#Video_of_Destructible_Dynamic_Physics_Constraints"}},[t._v("3 Video of Destructible Dynamic Physics Constraints")])]),t._v(" "),i("li",[i("a",{attrs:{href:"#C.2B.2B_for_Making_a_Dynamic_Physics_Constraint"}},[t._v("4 C++ for Making a Dynamic Physics Constraint")])]),t._v(" "),i("li",[i("a",{attrs:{href:"#My_C.2B.2B_Physics_Constraint_Library_Functions"}},[t._v("5 My C++ Physics Constraint Library Functions")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#Free.2CLimited.2CLocked"}},[t._v("5.1 Free,Limited,Locked")])]),t._v(" "),i("li",[i("a",{attrs:{href:"#Example_Usage"}},[t._v("5.2 Example Usage")])]),t._v(" "),i("li",[i("a",{attrs:{href:"#My_C.2B.2B_Functions_For_You"}},[t._v("5.3 My C++ Functions For You")])])])]),t._v(" "),i("li",[i("a",{attrs:{href:"#Conclusion"}},[t._v("6 Conclusion")])])]),t._v(" "),i("h2",{attrs:{id:"overview"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),i("p",[i("em",[t._v("Author:")]),t._v(" "),i("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[t._v("Rama")]),t._v(" ("),i("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[t._v("talk")]),t._v(")")]),t._v(" "),i("p",[t._v("Dear Community,")]),t._v(" "),i("p",[t._v("This is a tutorial on how to dynamically create Physics constraints during runtime!")]),t._v(" "),i("p",[t._v("See my videos below for examples of what you can do with dynamic physics constraints!")]),t._v(" "),i("p",[t._v("The focus of my videos is enabling a user of my In-game editor to make their own physics objects...."),i("strong",[t._v("and then destroy them into dynamic physics pieces!")])]),t._v(" "),i("h2",{attrs:{id:"video-of-dynamic-physics-constraints"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#video-of-dynamic-physics-constraints"}},[t._v("#")]),t._v(" Video of Dynamic Physics Constraints")]),t._v(" "),i("p",[t._v("In this video I am showing how you can make composite physics shapes that will act as a coordinated larger physics constraint, and you can make this combinations dynamically during runtime from user input!")]),t._v(" "),i("h2",{attrs:{id:"video-of-destructible-dynamic-physics-constraints"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#video-of-destructible-dynamic-physics-constraints"}},[t._v("#")]),t._v(" Video of Destructible Dynamic Physics Constraints")]),t._v(" "),i("p",[t._v("In this video I demonstrate dynamic setting and detaching of physics constraints to make a composite destructible shape that can be destroyed into partial subsections that act like physics sub objects of the original whole.")]),t._v(" "),i("h2",{attrs:{id:"c-for-making-a-dynamic-physics-constraint"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#c-for-making-a-dynamic-physics-constraint"}},[t._v("#")]),t._v(" C++ for Making a Dynamic Physics Constraint")]),t._v(" "),i("p",[t._v("void ASomeClass::CreateNewPhysicsConstraintBetween(AStaticMeshActor* RootSMA, AStaticMeshActor* TargetSMA)\n{\n//set up the constraint instance with all the desired values\nFConstraintInstance ConstraintInstance;\n \n//set values here, see functions I am sharing with you below\n//UYourStaticLibrary::SetLinearLimits(ConstraintInstance, ...); //or make the functions below non static\n//UYourStaticLibrary::SetAngularLimits(ConstraintInstance, ...);\n \n//New Object\nUPhysicsConstraintComponent* ConstraintComp = NewObject<UPhysicsConstraintComponent>(RootSMA);\nif(!ConstraintComp)\n{\n//UE_LOG constraint UObject could not be created!\nreturn;\n}\n \n//~~~~~~~~~~~~~~~~~~~~~~~~\n//Set Constraint Instance!\nConstraintComp->ConstraintInstance = ConstraintInstance;\n//~~~~~~~~~~~~~~~~~~~~~~~~\n \n//Set World Location\nConstraintComp->SetWorldLocation(RootSMA->GetActorLocation());\n \n//Attach to Root!\nConstraintComp->AttachTo(RootSMA->GetRootComponent(), NAME_None, EAttachLocation::KeepWorldPosition);\n \n//~~~ Init Constraint ~~~\nConstraintComp->SetConstrainedComponents(RootSMA->StaticMeshComponent, NAME_None, TargetSMA->StaticMeshComponent,NAME_None);\n}")]),t._v(" "),i("h2",{attrs:{id:"my-c-physics-constraint-library-functions"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#my-c-physics-constraint-library-functions"}},[t._v("#")]),t._v(" My C++ Physics Constraint Library Functions")]),t._v(" "),i("p",[t._v("I've tested these and used them in the videos above!")]),t._v(" "),i("h3",{attrs:{id:"free-limited-locked"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#free-limited-locked"}},[t._v("#")]),t._v(" Free,Limited,Locked")]),t._v(" "),i("p",[t._v("For ease of use I just pass in bytes for the free, limited or locked enums.")]),t._v(" "),i("p",[t._v("0 = Free\n1 = Limited\n2 = Locked")]),t._v(" "),i("h3",{attrs:{id:"example-usage"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#example-usage"}},[t._v("#")]),t._v(" Example Usage")]),t._v(" "),i("p",[t._v("//A new constraint instance!\nFConstraintInstance ConstraintInstance;\n \n//Set Angular Limits of Constraint that was just created\nUYourStaticLibrary::SetAngularLimits( //or make functions below non static, put in .h\nConstraintInstance,\n1, //swing 1 limited\n1, //swing 2 limited\n0, //twist is free\n60, //swing 1 angle limit\n30 //swing 2 angle limit\n10 //twist limit (not used cause its free)\n);")]),t._v(" "),i("h3",{attrs:{id:"my-c-functions-for-you"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#my-c-functions-for-you"}},[t._v("#")]),t._v(" My C++ Functions For You")]),t._v(" "),i("p",[t._v("static FORCEINLINE void SetLinearLimits(\nFConstraintInstance& Constraint,\nbool bDisableCollision,\nconst uint8 XLim, const uint8 YLim, const uint8 ZLim,\nconst float Size,\nbool SoftLimit=true,\nconst float SoftStiffness=0,\nconst float SoftDampening=0\n)\n{\n//Collision\nConstraint.bDisableCollision = bDisableCollision;\n \nswitch (XLim)\n{\ncase 0 : Constraint.LinearXMotion = ELinearConstraintMotion::LCM_Free; break;\ncase 1 : Constraint.LinearXMotion = ELinearConstraintMotion::LCM_Limited; break;\ncase 2 : Constraint.LinearXMotion = ELinearConstraintMotion::LCM_Locked; break;\n}\nswitch (YLim)\n{\ncase 0 : Constraint.LinearYMotion = ELinearConstraintMotion::LCM_Free; break;\ncase 1 : Constraint.LinearYMotion = ELinearConstraintMotion::LCM_Limited; break;\ncase 2 : Constraint.LinearYMotion = ELinearConstraintMotion::LCM_Locked; break;\n}\nswitch (ZLim)\n{\ncase 0 : Constraint.LinearZMotion = ELinearConstraintMotion::LCM_Free; break;\ncase 1 : Constraint.LinearZMotion = ELinearConstraintMotion::LCM_Limited; break;\ncase 2 : Constraint.LinearZMotion = ELinearConstraintMotion::LCM_Locked; break;\n}\n//~~~~~~~~~~\n \nConstraint.LinearLimitSize = Size;\n \nif(SoftLimit) Constraint.bLinearLimitSoft = 1;\nelse Constraint.bLinearLimitSoft = 0;\n \nConstraint.LinearLimitStiffness \t= SoftStiffness;\nConstraint.LinearLimitDamping \t= SoftDampening;\n}\n \nstatic FORCEINLINE void SetAngularLimits(\nFConstraintInstance& Constraint,\nconst uint8 S1Lim, const uint8 S2Lim, const uint8 TLim,\nconst float Swing1LimitAngle,\nconst float Swing2LimitAngle,\nconst float TwistLimitAngle,\n \nbool SoftSwingLimit=true, bool SoftTwistLimit=true,\nconst float SwingStiff=0, const float SwingDamp=0,\nconst float TwistStiff=0, const float TwistDamp=0\n)\n{\nswitch (S1Lim)\n{\ncase 0 : Constraint.AngularSwing1Motion = EAngularConstraintMotion::ACM_Free; break;\ncase 1 : Constraint.AngularSwing1Motion = EAngularConstraintMotion::ACM_Limited; break;\ncase 2 : Constraint.AngularSwing1Motion = EAngularConstraintMotion::ACM_Locked; break;\n}\nswitch (S2Lim)\n{\ncase 0 : Constraint.AngularSwing2Motion = EAngularConstraintMotion::ACM_Free; break;\ncase 1 : Constraint.AngularSwing2Motion = EAngularConstraintMotion::ACM_Limited; break;\ncase 2 : Constraint.AngularSwing2Motion = EAngularConstraintMotion::ACM_Locked; break;\n}\nswitch (TLim)\n{\ncase 0 : Constraint.AngularTwistMotion = EAngularConstraintMotion::ACM_Free; break;\ncase 1 : Constraint.AngularTwistMotion = EAngularConstraintMotion::ACM_Limited; break;\ncase 2 : Constraint.AngularTwistMotion = EAngularConstraintMotion::ACM_Locked; break;\n}\n//~~~~~~~~~~\n \n//Soft Lmit?\nif(SoftSwingLimit) Constraint.bSwingLimitSoft = 1;\nelse Constraint.bSwingLimitSoft = 0;\n \nif(SoftTwistLimit) Constraint.bTwistLimitSoft = 1;\nelse Constraint.bTwistLimitSoft = 0;\n \n//Limit Angles\nConstraint.Swing1LimitAngle \t= Swing1LimitAngle;\nConstraint.Swing2LimitAngle \t= Swing2LimitAngle;\nConstraint.TwistLimitAngle \t= TwistLimitAngle;\n \nConstraint.SwingLimitStiffness \t= SwingStiff;\nConstraint.SwingLimitDamping\t= SwingDamp;\nConstraint.TwistLimitStiffness \t= TwistStiff;\nConstraint.TwistLimitDamping \t= TwistDamp;\n}")]),t._v(" "),i("h2",{attrs:{id:"conclusion"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),i("p",[t._v("Now you have the basic code to do all sorts of fancy things with Dynamic Physics Constraints that you set up at runtime from c++ !")]),t._v(" "),i("p",[t._v("Play with the values of the two functions I am sharing with you to get all sorts of different effects!")]),t._v(" "),i("p",[i("strong",[t._v("Basics:")])]),t._v(" "),i("p",[i("strong",[t._v("Linear Constraints")]),t._v(" limit physical motion of the target SMA through space")]),t._v(" "),i("p",[i("strong",[t._v("Angular Constraints")]),t._v(" control the rotation of the target SMA.")]),t._v(" "),i("p",[t._v("Enjoy!")]),t._v(" "),i("p",[i("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[t._v("Rama")]),t._v(" ("),i("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[t._v("talk")]),t._v(")")]),t._v(" "),i("p",[t._v('Retrieved from "'),i("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Physics_Constraints,_Create_New_Constraints_Dynamically_During_Runtime&oldid=5509",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://wiki.unrealengine.com/index.php?title=Physics_Constraints,_Create_New_Constraints_Dynamically_During_Runtime&oldid=5509"),i("OutboundLink")],1),t._v('"')]),t._v(" "),i("p",[i("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[t._v("Categories")]),t._v(":")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[t._v("Code")])]),t._v(" "),i("li",[i("a",{attrs:{href:"/Category:Community_Videos",title:"Category:Community Videos"}},[t._v("Community Videos")])])]),t._v(" "),i("p",[i("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=s.exports}}]);