(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{422:function(e,t,r){"use strict";r.r(t);var a=r(28),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Basic Inventory / Item system - Epic Wiki")]),e._v(" "),r("h1",{attrs:{id:"basic-inventory-item-system"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#basic-inventory-item-system"}},[e._v("#")]),e._v(" Basic Inventory / Item system")]),e._v(" "),r("p",[r("strong",[e._v("Rate this Article:")])]),e._v(" "),r("p",[e._v("4.50")]),e._v(" "),r("p",[r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_half.gif",alt:""}}),e._v(" (2 votes)")]),e._v(" "),r("p",[e._v("Approved for Versions:(please verify)")]),e._v(" "),r("h2",{attrs:{id:"contents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Foward"}},[e._v("1 Foward")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Overview"}},[e._v("2 Overview")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Item"}},[e._v("3 Item")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Header"}},[e._v("3.1 Header")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#CPP"}},[e._v("3.2 CPP")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Character"}},[e._v("4 Character")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Header_2"}},[e._v("4.1 Header")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#CPP_2"}},[e._v("4.2 CPP")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#End_Result"}},[e._v("5 End Result")])])]),e._v(" "),r("h1",{attrs:{id:"foward"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#foward"}},[e._v("#")]),e._v(" Foward")]),e._v(" "),r("p",[e._v("This tutorial was made by "),r("a",{attrs:{href:"https://forums.unrealengine.com/member.php?2225-alvarofer0020",target:"_blank",rel:"noopener noreferrer"}},[e._v("alvarofer0020"),r("OutboundLink")],1),e._v(" on the Unreal forums and adapted to the Wiki by myself. If you have any questions you can post in the thread "),r("a",{attrs:{href:"https://forums.unrealengine.com/showthread.php?3289-Tutorial-Basic-Inventory-Item-System",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),r("OutboundLink")],1),e._v(" and I'll update this page with any new or important information as it comes to light .")]),e._v(" "),r("p",[e._v("Also note that currently this tutorial is for First-Person camera only - I'm planning on making a version that works with other cameras, but those require a mouse/pointer of some kind. -"),r("a",{attrs:{href:"/User:G-Rath",title:"User:G-Rath"}},[e._v("G-Rath")]),e._v(" ("),r("a",{attrs:{href:"/User_talk:G-Rath",title:"User talk:G-Rath"}},[e._v("talk")]),e._v(") 21:11, 21 April 2014 (UTC)")]),e._v(" "),r("h1",{attrs:{id:"overview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),r("p",[e._v("This tutorial covers how to make a basic inventory system and items for that system complete with events for when the item is used and dropped in Blueprints.")]),e._v(" "),r("h1",{attrs:{id:"item"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#item"}},[e._v("#")]),e._v(" Item")]),e._v(" "),r("p",[e._v("For the item we use a simple actor class and add a couple of things:")]),e._v(" "),r("ul",[r("li",[e._v("Used() is called when the item is used by another actor")]),e._v(" "),r("li",[e._v("Dropped() is called when another actor drops the item")]),e._v(" "),r("li",[e._v("Mesh sets what mesh the item uses when its dropped.")])]),e._v(" "),r("p",[e._v("Both the Used and Dropped functions use BlueprintImplementableEvent so they can be overridden from blueprint, since the items are blueprints themselves, and this saves us from having to create a new C++ function for each item when instead we just declare it on the items blueprint.")]),e._v(" "),r("p",[e._v("Note however that for now this tutorial doesn't have a method for using or dropping an item - A basic form of these features will be added at a later date, but they won't cover displaying these items in a UI.")]),e._v(" "),r("h2",{attrs:{id:"header"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[e._v("#")]),e._v(" Header")]),e._v(" "),r("p",[e._v('UCLASS()\nclass AProojectItem : public AActor\n{\nGENERATED_UCLASS_BODY()\n \npublic:\nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)\nFString ItemName;\n \nUPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Item)\nint32 Value;\n \nUFUNCTION(BlueprintImplementableEvent, meta = (FriendlyName = "Item: Used"))\nvirtual void Used();\n \nUFUNCTION(BlueprintImplementableEvent, meta = (FriendlyName = "Item: Dropped"))\nvirtual void Dropped();\n \nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Item)\nTSubobjectPtr<class UStaticMeshComponent> Mesh;\n \nvirtual void BeginPlay() OVERRIDE;\nvoid PickedUp();\t\n};')]),e._v(" "),r("h2",{attrs:{id:"cpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpp"}},[e._v("#")]),e._v(" CPP")]),e._v(" "),r("p",[e._v('AProojectItem::AProojectItem(const class FPostConstructInitializeProperties& PCIP)\n: Super(PCIP)\n{\nMesh = PCIP.CreateDefaultSubobject<UStaticMeshComponent>(this, TEXT("Mesh"));\nRootComponent = Mesh;\n}\n \nvoid AProojectItem::BeginPlay()\n{\nSuper::BeginPlay();\nMesh->SetSimulatePhysics(true);\nMesh->WakeRigidBody();\n}\n \nvoid AProojectItem::PickedUp()\n{\nif (Mesh)\n{\nMesh->DestroyComponent(); // physical item has been picked up, destroy its visible component\n}\n}')]),e._v(" "),r("h1",{attrs:{id:"character"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#character"}},[e._v("#")]),e._v(" Character")]),e._v(" "),r("p",[e._v("In order to store our items we need an array of some kind in the Character class.")]),e._v(" "),r("h2",{attrs:{id:"header-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#header-2"}},[e._v("#")]),e._v(" Header")]),e._v(" "),r("p",[e._v('UCLASS(config=Game)\nclass AProojectCharacter : public ACharacter\n{\nUPROPERTY(EditAnywhere, Category = Inventory)\nTArray<class AProojectItem*> ItemInventory; // Our Inventory\n \nbool bDrawDebugViewTrace;\n \nvoid Tick(float DeltaSeconds) OVERRIDE;\n \nvoid PickUpItem(AProojectItem* Item);\n \nUFUNCTION(BlueprintPure, meta = (FriendlyName = "Get Inv", CompactNodeTitle = "GetInv", Keywords = "Get Player Inventory"), Category = Inv)\nTArray<class AProojectItem*> GetCurrentInventory();\n};')]),e._v(" "),r("h2",{attrs:{id:"cpp-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpp-2"}},[e._v("#")]),e._v(" CPP")]),e._v(" "),r("p",[e._v('#include "ProojectItem.h" //Put this with your classes includes\n \nvoid AProojectCharacter::Tick(float DeltaSeconds)\n{\nSuper::Tick(DeltaSeconds);\n \nFVector CamLoc;\nFRotator CamRot;\n \nController->GetPlayerViewPoint(CamLoc, CamRot); // Get the camera position and rotation\nconst FVector StartTrace = CamLoc; // trace start is the camera location\nconst FVector Direction = CamRot.Vector();\nconst FVector EndTrace = StartTrace + Direction * 200;\n \n// Perform trace to retrieve hit info\nFCollisionQueryParams TraceParams(FName(TEXT("WeaponTrace")), true, this);\nTraceParams.bTraceAsyncScene = true;\nTraceParams.bReturnPhysicalMaterial = true;\n \nFHitResult Hit(ForceInit);\nif (GetWorld()->LineTraceSingle(Hit, StartTrace, EndTrace, ECC_WorldStatic, TraceParams))\n{\nAProojectItem* NewItem = Cast<AProojectItem>(Hit.GetActor()); // typecast to the item class to the hit actor\nif (bDrawDebugViewTrace)\n{\nDrawDebugLine(\nGetWorld(),\nStartTrace,\nEndTrace,\nFColor(255, 0, 0),\nfalse,\n3,\n0,\n1\n);\n}\n \nif (NewItem) // if we hit an item with the trace\n{\nthis->PickUpItem(NewItem); // pick it up\n}\n}\n \n}\n \n \n \nvoid AProojectCharacter::PickUpItem(AProojectItem* Item)\n{\nif (Item)\n{\nItemInventory.Add(Item); // add it to the array\nItem->PickedUp(); // hide mesh\n}\n}\n \nTArray<class ABasicItem*> AProojectCharacter::GetCurrentInventory()\n{\nreturn ItemInventory;\n}')]),e._v(" "),r("h1",{attrs:{id:"end-result"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#end-result"}},[e._v("#")]),e._v(" End Result")]),e._v(" "),r("p",[r("a",{attrs:{href:"/File:BasicInvSystem_E1.png"}},[r("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/e/e4/BasicInvSystem_E1.png",alt:"BasicInvSystem E1.png"}})])]),e._v(" "),r("p",[e._v("Note you can print the inventory of a player character by using the GetInv node in this setup:")]),e._v(" "),r("p",[r("a",{attrs:{href:"/File:BasicInvSystem_PrintInv_E1.jpg"}},[r("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/3/3a/BasicInvSystem_PrintInv_E1.jpg",alt:"BasicInvSystem PrintInv E1.jpg"}})])]),e._v(" "),r("p",[e._v('Retrieved from "'),r("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Basic_Inventory_/_Item_system&oldid=8223",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Basic_Inventory_/_Item_system&oldid=8223"),r("OutboundLink")],1),e._v('"')]),e._v(" "),r("p",[r("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Community_Created_Content",title:"Category:Community Created Content"}},[e._v("Community Created Content")])])]),e._v(" "),r("p",[e._v("Hidden category:")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[e._v("Templates")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=n.exports}}]);