(window.webpackJsonp=window.webpackJsonp||[]).push([[995],{640:function(e,t,a){"use strict";a.r(t);var n=a(28),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Slate Data Binding Part 3 - Epic Wiki")]),e._v(" "),a("h1",{attrs:{id:"slate-data-binding-part-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slate-data-binding-part-3"}},[e._v("#")]),e._v(" Slate Data Binding Part 3")]),e._v(" "),a("p",[a("strong",[e._v("Rate this Article:")])]),e._v(" "),a("p",[e._v("5.00")]),e._v(" "),a("p",[a("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),e._v(" (one vote)")]),e._v(" "),a("p",[e._v("Approved for Versions:(4.7)")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/a/a5/Icon_template_note1.png",alt:"Note"}})]),e._v(" "),a("p",[a("strong",[e._v("Some or all of the information on this page is inconsistent, irrelevant or confusing.")])]),e._v(" "),a("p",[e._v("Please help clean it up if you are able.")]),e._v(" "),a("h2",{attrs:{id:"contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Creating_Menus_with_Slate.2FC.2B.2B.2C_Part_3"}},[e._v("1 Creating Menus with Slate/C++, Part 3")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Overview"}},[e._v("1.1 Overview")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Step_1:_Overview_.26_Prep"}},[e._v("1.2 Step 1: Overview & Prep")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#TutorialGameHUDUI.h"}},[e._v("1.2.1 TutorialGameHUDUI.h")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutorialGameHUDUI.cpp"}},[e._v("1.2.2 TutorialGameHUDUI.cpp")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutorialGameHUD.h"}},[e._v("1.2.3 TutorialGameHUD.h")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutorialGameHUD.cpp"}},[e._v("1.2.4 TutorialGameHUD.cpp")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Step_3:_Binding_our_Data"}},[e._v("1.3 Step 3: Binding our Data")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Step_4:_Binding_it_to_something_Useful"}},[e._v("1.4 Step 4: Binding it to something Useful")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#TutGameMode.h"}},[e._v("1.4.1 TutGameMode.h")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutGameMode.cpp"}},[e._v("1.4.2 TutGameMode.cpp")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutorialCharacter.h"}},[e._v("1.4.3 TutorialCharacter.h")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutorialCharacter.cpp"}},[e._v("1.4.4 TutorialCharacter.cpp")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#TutorialGameHUDUI.cpp_2"}},[e._v("1.4.5 TutorialGameHUDUI.cpp")])])])])])])]),e._v(" "),a("h1",{attrs:{id:"creating-menus-with-slate-c-part-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-menus-with-slate-c-part-3"}},[e._v("#")]),e._v(" Creating Menus with Slate/C++, Part 3")]),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[a("em",[e._v("Original Author")]),e._v(" "),a("a",{attrs:{href:"https://forums.unrealengine.com/member.php?1034-Minalien",target:"_blank",rel:"noopener noreferrer"}},[e._v("Minalien"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Welcome back to my tutorial series on creating menus in Unreal Engine 4 using Slate & C++!")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://wiki.unrealengine.com/Slate_Introduction_%E2%80%92_Basic_Menu_Part_1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Part 1: Introduction & Basic Menu"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.unrealengine.com/Slate_Style_Sets_Part_2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Part 2: Style Sets"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://wiki.unrealengine.com/Slate_Data_Binding_Part_3",target:"_blank",rel:"noopener noreferrer"}},[e._v("Part 3: Data Binding"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"step-1-overview-prep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-1-overview-prep"}},[e._v("#")]),e._v(" Step 1: Overview & Prep")]),e._v(" "),a("p",[e._v("What is data binding? Data binding is a concept from software development where information output, such as the player’s current health, is tied to the information it actually represents. In this way, any time you change the data (for example, by damaging the player) the display is updated automatically. This can have a great many uses, both simple and complex – in Soul Tech, a Mech Action/RPG I am programming for, I use data binding handle the individual pages available in the Mech customization & shop screens. My UI only has to worry about having space to display data from the current page – updating the actual page does not require also sending update messages to the UI.")]),e._v(" "),a("p",[e._v("In our case, we are going to create a new Slate UI that will serve as an in-game HUD, displaying the player’s current health and score in the upper corners of the screen. Initially, the HUD will only have static values – we will change it to be bound data in the next step. I’m going to paste the code below, but I will not go into detail on how it works – it’s all pretty simple content that has been covered in past tutorials.")]),e._v(" "),a("h3",{attrs:{id:"tutorialgamehudui-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialgamehudui-h"}},[e._v("#")]),e._v(" TutorialGameHUDUI.h")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n// TutorialGameHUDUI.h - Provides an implementation of the Slate UI representing the tutorial game HUD.\n \n#pragma once\n \n#include "Slate.h"\n \n// Lays out and controls the Tutorial HUD UI.\n \nclass STutorialGameHUDUI : public SCompoundWidget\n{\nSLATE_BEGIN_ARGS(STutorialGameHUDUI)\n: _OwnerHUD()\n{\n}\n \nSLATE_ARGUMENT(TWeakObjectPtr<class ATutorialGameHUD>, OwnerHUD);\n \nSLATE_END_ARGS()\n \npublic:\n/**\n* Constructs and lays out the Tutorial HUD UI Widget.\n*\n* \\args Arguments structure that contains widget-specific setup information.\n**/\nvoid Construct(const FArguments& args);\n \nprivate:\n/**\n* Stores a weak reference to the HUD owning this widget.\n**/\nTWeakObjectPtr<class ATutorialGameHUD> OwnerHUD;\n \n/**\n* A reference to the Slate Style used for this HUD\'s widgets.\n**/\nconst struct FGlobalStyle* HUDStyle;\n};')]),e._v(" "),a("h3",{attrs:{id:"tutorialgamehudui-cpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialgamehudui-cpp"}},[e._v("#")]),e._v(" TutorialGameHUDUI.cpp")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n \n#include "SlateTutorials.h"\n \n#include "TutorialGameHUD.h"\n#include "TutorialGameHUDUI.h"\n \n#include "Menus/GlobalMenuStyle.h"\n#include "Menus/MenuStyles.h"\n \nvoid STutorialGameHUDUI::Construct(const FArguments& args)\n{\nOwnerHUD = args._OwnerHUD;\n \nHUDStyle = &FMenuStyles::Get().GetWidgetStyle<FGlobalStyle>("Global");\n \nChildSlot\n[\nSNew(SOverlay)\n+ SOverlay::Slot()\n.HAlign(HAlign_Right)\n.VAlign(VAlign_Top)\n[\nSNew(STextBlock)\n.TextStyle(&HUDStyle->MenuTitleStyle)\n.Text(FText::FromString("SCORE: 0"))\n]\n+ SOverlay::Slot()\n.HAlign(HAlign_Left)\n.VAlign(VAlign_Top)\n[\nSNew(STextBlock)\n.TextStyle(&HUDStyle->MenuTitleStyle)\n.Text(FText::FromString("HEALTH: 100"))\n]\n];\n}')]),e._v(" "),a("h3",{attrs:{id:"tutorialgamehud-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialgamehud-h"}},[e._v("#")]),e._v(" TutorialGameHUD.h")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n// TutorialGameHUD.h - Provides an implementation of the HUD that will embed the Tutorial Game UI.\n \n#pragma once\n \n#include "GameFramework/HUD.h"\n \n#include "TutorialGameHUD.generated.h"\n \n/**\n* Provides an implementation of the game\'s in-game HUD, which will display the player\'s current health and score.\n**/\nUCLASS()\nclass ATutorialGameHUD : public AHUD\n{\nGENERATED_UCLASS_BODY()\n \npublic:\n/**\n* Initializes the Slate UI and adds it as a widget to the game viewport.\n**/\nvirtual void PostInitializeComponents() override;\n \nprivate:\n/**\n* Reference to the Game HUD UI.\n**/\nTSharedPtr<class STutorialGameHUDUI> GameHUD;\n};')]),e._v(" "),a("h3",{attrs:{id:"tutorialgamehud-cpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialgamehud-cpp"}},[e._v("#")]),e._v(" TutorialGameHUD.cpp")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n \n#include "SlateTutorials.h"\n \n#include "TutorialGameHUD.h"\n#include "TutorialGameHUDUI.h"\n \nATutorialGameHUD::ATutorialGameHUD(const class FPostConstructInitializeProperties& PCIP)\n: Super(PCIP)\n{\n}\n \nvoid ATutorialGameHUD::PostInitializeComponents()\n{\nSuper::PostInitializeComponents();\n \nif (GEngine && GEngine->GameViewport)\n{\nUGameViewportClient* Viewport = GEngine->GameViewport;\n \nSAssignNew(GameHUD, STutorialGameHUDUI)\n.OwnerHUD(TWeakObjectPtr<ATutorialGameHUD>(this));\n \nViewport->AddViewportWidgetContent(\nSNew(SWeakWidget).PossiblyNullContent(GameHUD.ToSharedRef())\n);\n}\n}')]),e._v(" "),a("p",[e._v("Go ahead and build the project and set up a new map and game mode and test the HUD out!")]),e._v(" "),a("h2",{attrs:{id:"step-3-binding-our-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-3-binding-our-data"}},[e._v("#")]),e._v(" Step 3: Binding our Data")]),e._v(" "),a("p",[e._v("We have two bits of information that we want to bind to our UI: Score and Health. Both of these are integers, but they have to be bound as strings for our HUD! I will cover obtaining this information from the Game Mode (Score) and active Character (Health) in a minute, but first we’ll handle the data binding portion. Our binding is going to have two important tasks: first, it is going to obtain the actual data. Next, it will convert it to an FText to be applied to the text block widgets.")]),e._v(" "),a("p",[e._v("There are two things needed for each of these: the Attribute, and something to bind it to. In our case, because we need to do extra processing on the data (converting from an integer to a string), we will have a function on our widget class itself to bind to. Add the following private values to the STutorialGameHUDUI class:")]),e._v(" "),a("p",[e._v("private:\n/**\n* Attribute storing the binding for the player's score.\n**/\nTAttribute<FText> Score;\n \n/**\n* Attribute storing the binding for the player's health.\n**/\nTAttribute<FText> Health;\n \n/**\n* Our Score will be bound to this function, which will retrieve the appropriate data and convert it into an FText.\n**/\nFText GetScore() const;\n \n/**\n* Our Health will be bound to this function, which will retrieve the appropriate data and convert it into an FText.\n**/\nFText GetHealth() const;")]),e._v(" "),a("p",[e._v("The TAttribute type is used in Unreal to provide data binding that only has an accessor/getter. Next, we have two constant functions that will be responsible for retrieving and formatting the data into a form the UI can use! So how do we actually do the binding? Well, it’s quite simple – in fact, you’ve already done it if you’ve ever done input binding within C++ for an Unreal project. In the top of STutorialGameHUDUI’s Construct method, just after capturing HUDStyle, add the following to bind our TAttributes to their appropriate functions:")]),e._v(" "),a("p",[e._v("Score.Bind(this, &STutorialGameHUDUI::GetScore);\nHealth.Bind(this, &STutorialGameHUDUI::GetHealth);")]),e._v(" "),a("p",[e._v("Next, we can use the TAttributes directly in our Text specifications when constructing the UI layout:")]),e._v(" "),a("ul",[a("li",[e._v("SOverlay::Slot()\n.HAlign(HAlign_Right)\n.VAlign(VAlign_Top)\n[\nSNew(STextBlock)\n.TextStyle(&HUDStyle->MenuTitleStyle)\n.Text(Score)\n]")]),e._v(" "),a("li",[e._v("SOverlay::Slot()\n.HAlign(HAlign_Left)\n.VAlign(VAlign_Top)\n[\nSNew(STextBlock)\n.TextStyle(&HUDStyle->MenuTitleStyle)\n.Text(Health)\n]")])]),e._v(" "),a("p",[e._v("And finally, we’ll put in some placeholder data for our bound functions, just to make sure everything’s worked:")]),e._v(" "),a("p",[e._v('FText STutorialGameHUDUI::GetScore() const { return FText::FromString("SCORE: --"); }\nFText STutorialGameHUDUI::GetHealth() const { return FText::FromString("HEALTH: --"); }')]),e._v(" "),a("p",[e._v("Go ahead and build and make sure everything’s working, and congratulations! You’ve just bound your text blocks! You can do this binding for just about everything in Slate – button text, list items, image backgrounds, styles, etc.")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82_2015-03-18_16.55.25.png"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/4/47/%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82_2015-03-18_16.55.25.png",alt:"Скриншот 2015-03-18 16.55.25.png"}})])]),e._v(" "),a("h2",{attrs:{id:"step-4-binding-it-to-something-useful"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-4-binding-it-to-something-useful"}},[e._v("#")]),e._v(" Step 4: Binding it to something Useful")]),e._v(" "),a("p",[e._v("If you only needed to learn how to do data binding, and don’t care about the specifics for this tutorial then you don’t need to continue past this point – here, we’re just implementing our Score and Health functions. Consider it bonus content!")]),e._v(" "),a("p",[e._v("To get the score and health data for this tutorial, I’ve added the following GameMode and Character classes and set them up to be used with the GameMap level.")]),e._v(" "),a("h3",{attrs:{id:"tutgamemode-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutgamemode-h"}},[e._v("#")]),e._v(" TutGameMode.h")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n// TutGameMode.h - Provides a simple game mode providing a Score!\n \n#pragma once\n \n#include "GameFramework/GameMode.h"\n#include "TutGameMode.generated.h"\n \n/**\n* A simple game mode providing a means of retrieving and adjusting a single Score value.\n**/\nUCLASS()\nclass ATutGameMode : public AGameMode\n{\nGENERATED_UCLASS_BODY()\n \npublic:\n/**\n* Retrieves the current Score from the game mode.\n**/\nUFUNCTION(BlueprintPure, BlueprintCallable, Category = "Score")\nint32 GetScore();\n \n/**\n* Adds to the game score.\n**/\nUFUNCTION(BlueprintCallable, Category = "Score")\nvoid AddPoints(int32 value);\n \n/**\n* Removes from the game score.\n**/\nUFUNCTION(BlueprintCallable, Category = "Score")\nvoid DeductPoints(int32 value);\n \nprivate:\n/**\n* Stores the current score.\n**/\nint32 CurrentScore;\n};')]),e._v(" "),a("h3",{attrs:{id:"tutgamemode-cpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutgamemode-cpp"}},[e._v("#")]),e._v(" TutGameMode.cpp")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n \n#include "SlateTutorials.h"\n \n#include '),a("algorithm",[e._v('\n \n#include "TutGameMode.h"\n \nATutGameMode::ATutGameMode(const class FPostConstructInitializeProperties& PCIP)\n: Super(PCIP), CurrentScore(0)\n{\n}\n \nint32 ATutGameMode::GetScore()\n{\nreturn CurrentScore;\n}\n \nvoid ATutGameMode::AddPoints(int32 value)\n{\nif (value > 0)\nCurrentScore += value;\n}\n \nvoid ATutGameMode::DeductPoints(int32 value)\n{\nif (value > 0)\nCurrentScore = std::max(CurrentScore - value, 0);\n}')])],1),e._v(" "),a("h3",{attrs:{id:"tutorialcharacter-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialcharacter-h"}},[e._v("#")]),e._v(" TutorialCharacter.h")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n// TutorialCharacter.h - Provides a simple character providing Health!\n \n#pragma once\n \n#include "GameFramework/Character.h"\n#include "TutorialCharacter.generated.h"\n \n/**\n* A simple character providing a means of retrieving and manipulating health.\n**/\nUCLASS()\nclass ATutorialCharacter : public ACharacter\n{\nGENERATED_UCLASS_BODY()\n \npublic:\n/**\n* Stores the character\'s current health.\n**/\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Combat")\nint32 Health;\n};')]),e._v(" "),a("h3",{attrs:{id:"tutorialcharacter-cpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialcharacter-cpp"}},[e._v("#")]),e._v(" TutorialCharacter.cpp")]),e._v(" "),a("p",[e._v('// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.\n \n#include "SlateTutorials.h"\n \n#include "TutorialCharacter.h"\n \nATutorialCharacter::ATutorialCharacter(const class FPostConstructInitializeProperties& PCIP)\n: Super(PCIP)\n{\nHealth = 100;\n}')]),e._v(" "),a("p",[e._v("Once we’ve got these, retrieving and applying the score and health is simple")]),e._v(" "),a("h3",{attrs:{id:"tutorialgamehudui-cpp-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutorialgamehudui-cpp-2"}},[e._v("#")]),e._v(" TutorialGameHUDUI.cpp")]),e._v(" "),a("p",[e._v('FText STutorialGameHUDUI::GetScore() const\n{\n// NOTE: THIS IS A TERRIBLE WAY TO DO THIS. DO NOT DO IT. IT ONLY WORKS ON SERVERS. USE GAME STATES INSTEAD!\nATutGameMode* gameMode = Cast<ATutGameMode>(OwnerHUD->GetWorldSettings()->GetWorld()->GetAuthGameMode());\n \nif (gameMode == nullptr)\nreturn FText::FromString(TEXT("SCORE: --"));\n \nFString score = TEXT("SCORE: ");\nscore.AppendInt(gameMode->GetScore());\n \nreturn FText::FromString(score);\n}\n \nFText STutorialGameHUDUI::GetHealth() const\n{\nATutorialCharacter* character = Cast<ATutorialCharacter>(OwnerHUD->PlayerOwner->GetCharacter());\n \nif (character == nullptr)\nreturn FText::FromString(TEXT("HEALTH: --"));\n \nFString health = TEXT("HEALTH: ");\nhealth.AppendInt(character->Health);\n \nreturn FText::FromString(health);\n}')]),e._v(" "),a("p",[e._v("Go ahead and run the game, then update the score! (You can do this in the sample files by pressing the Home/End to adjust health & Page Up/Page Down to adjust score).")]),e._v(" "),a("p",[e._v("Source code: "),a("a",{attrs:{href:"/index.php?title=Special:Upload&wpDestFile=SlateTutorials-3",title:"File:SlateTutorials-3"}},[e._v("File:SlateTutorials-3")]),e._v(" (~547KB)")]),e._v(" "),a("p",[e._v('Retrieved from "'),a("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Slate_Data_Binding_Part_3&oldid=23279",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Slate_Data_Binding_Part_3&oldid=23279"),a("OutboundLink")],1),e._v('"')]),e._v(" "),a("p",[a("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/Category:Pages_with_broken_file_links",title:"Category:Pages with broken file links"}},[e._v("Pages with broken file links")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Community_Created_Content",title:"Category:Community Created Content"}},[e._v("Community Created Content")])])]),e._v(" "),a("p",[e._v("Hidden category:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[e._v("Templates")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);