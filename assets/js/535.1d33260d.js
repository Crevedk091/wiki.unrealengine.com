(window.webpackJsonp=window.webpackJsonp||[]).push([[535],{944:function(e,t,n){"use strict";n.r(t);var r=n(28),i=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Get Available Screen Resolutions in Blueprints - Epic Wiki")]),e._v(" "),n("h1",{attrs:{id:"get-available-screen-resolutions-in-blueprints"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-available-screen-resolutions-in-blueprints"}},[e._v("#")]),e._v(" Get Available Screen Resolutions in Blueprints")]),e._v(" "),n("p",[n("strong",[e._v("Rate this Page:")])]),e._v(" "),n("p",[e._v("5.00")]),e._v(" "),n("p",[n("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),n("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),n("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),n("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),n("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),e._v(" (one vote)")]),e._v(" "),n("p",[e._v("Approved for Versions:4.6")]),e._v(" "),n("h2",{attrs:{id:"contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Code"}},[e._v("2 Code")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Header_File"}},[e._v("2.1 Header File")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Cpp_File"}},[e._v("2.2 Cpp File")])])])])]),e._v(" "),n("h1",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[e._v("The following Blueprint Node is based on the function provided by Rama, see "),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Solus_C%2B%2B_Tutorials&oldid=9371#Solus_Options_Menu:_Screen_Resolutions",target:"_blank",rel:"noopener noreferrer"}},[e._v("Solus Options Menu: Screen Resolutions"),n("OutboundLink")],1),e._v(". The provided function has the limitation that you cannot use it in your own Blueprint Library. The reason is because the "),n("a",{attrs:{href:"https://docs.unrealengine.com/latest/INT/API/Runtime/RHI/FScreenResolutionRHI/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("FScreenResolutionRHI"),n("OutboundLink")],1),e._v(" Type is not a BlueprintType. As I required such a function for my options UMG widget I wrote it, tested it and decided to share it.")]),e._v(" "),n("h1",{attrs:{id:"code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[e._v("#")]),e._v(" Code")]),e._v(" "),n("p",[e._v("The following code is meant to be included in your own Blueprint Library. If you do not know how to make a Blueprint Library I recommend you read "),n("a",{attrs:{href:"/Blueprint_Function_Library,_Create_Your_Own_to_Share_With_Others",title:"Blueprint Function Library, Create Your Own to Share With Others"}},[e._v("Rama's Guide")])]),e._v(" "),n("h2",{attrs:{id:"header-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#header-file"}},[e._v("#")]),e._v(" Header File")]),e._v(" "),n("p",[e._v("First you declare the new FScreenResolutionRHI type. As mentioned in the comments it is not an exact duplicate of FScreenResolutionRHI. The reason is that when I used uint32 I was not able to use break or make nodes. My guess is that the Blueprint's Integer Type is defined as int32 in c++ and thus is not compatible with uint32. If someone can confirm this feel free to do.")]),e._v(" "),n("p",[e._v("/**\n* Screen Resolution\n* @remark Engine type is not meant for blueprints so we replicate the type.\n* @remark The Engine type uses uint32 but we need to use int32. Otherwise it won't be possible to break/make this type.\n*/\nUSTRUCT(BlueprintType)\nstruct FScreenResolutionRHIBP\n{\nGENERATED_USTRUCT_BODY()\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = ScreenResolution)\nint32 Width;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = ScreenResolution)\nint32 Height;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = ScreenResolution)\nint32 RefreshRate;\n \nFScreenResolutionRHIBP()\n{\nWidth = Height = RefreshRate = 0;\n}\n};\n \n/**\n* Retrieve a sorted list of all screen resolutions supported by the player's display adapter.\n*\n* @returns the array of all supported screen resolutions.\n*/\nUFUNCTION(BlueprintPure, Category = Utility)\nstatic TArray<struct FScreenResolutionRHIBP> GetDisplayAdapterScreenResolutions();")]),e._v(" "),n("h2",{attrs:{id:"cpp-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cpp-file"}},[e._v("#")]),e._v(" Cpp File")]),e._v(" "),n("p",[e._v('#include "RHI.h"\n \n...\n \nTArray<FScreenResolutionRHIBP> YourBlueprintLibrary::GetDisplayAdapterScreenResolutions()\n{\nTArray<FScreenResolutionRHIBP> ResolutionsToReturn;\nFScreenResolutionArray Resolutions;\nif (RHIGetAvailableResolutions(Resolutions, false))\n{\n// Preallocate just enough memory to store all elements\nResolutionsToReturn.Reserve(Resolutions.Num());\n \nfor (const FScreenResolutionRHI& EachResolution : Resolutions)\n{\nFScreenResolutionRHIBP resolution;\nresolution.Width = EachResolution.Width;\nresolution.Height = EachResolution.Height;\nresolution.RefreshRate = EachResolution.RefreshRate;\n \nResolutionsToReturn.Add(resolution);\n}\n}\n \nreturn ResolutionsToReturn;\n}')]),e._v(" "),n("p",[e._v("Enjoy!")]),e._v(" "),n("p",[e._v("--"),n("a",{attrs:{href:"/index.php?title=User:Jtpgames&action=edit&redlink=1",title:"User:Jtpgames (page does not exist)"}},[e._v("Jtpgames")]),e._v(" ("),n("a",{attrs:{href:"/index.php?title=User_talk:Jtpgames&action=edit&redlink=1",title:"User talk:Jtpgames (page does not exist)"}},[e._v("talk")]),e._v(") 13:27, 18 January 2015 (UTC)")]),e._v(" "),n("p",[e._v('Retrieved from "'),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Get_Available_Screen_Resolutions_in_Blueprints&oldid=11080",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Get_Available_Screen_Resolutions_in_Blueprints&oldid=11080"),n("OutboundLink")],1),e._v('"')]),e._v(" "),n("p",[n("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),n("li",[n("a",{attrs:{href:"/Category:Blueprint",title:"Category:Blueprint"}},[e._v("Blueprint")])])]),e._v(" "),n("p",[e._v("Hidden category:")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[e._v("Templates")])])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=i.exports}}]);