(window.webpackJsonp=window.webpackJsonp||[]).push([[421],{811:function(e,t,n){"use strict";n.r(t);var i=n(28),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("CustomSettings - Epic Wiki")]),e._v(" "),n("h1",{attrs:{id:"customsettings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#customsettings"}},[e._v("#")]),e._v(" CustomSettings")]),e._v(" "),n("h2",{attrs:{id:"contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Custom_settings"}},[e._v("1.1 Custom settings")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Creating_your_settings_object"}},[e._v("1.1.1 Creating your settings object")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Registering_the_object_with_our_module"}},[e._v("1.1.2 Registering the object with our module")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Using_Auto-discovery_Settings"}},[e._v("1.2 Using Auto-discovery Settings")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Summary"}},[e._v("1.3 Summary")])])])])]),e._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[n("em",[e._v("Original Author:")]),e._v(" "),n("a",{attrs:{href:"/User:Moss",title:"User:Moss"}},[e._v("Moss")]),e._v(" (GitHub repo: "),n("a",{attrs:{href:"https://github.com/moritz-wundke/CustomSettings",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/moritz-wundke/CustomSettings"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("p",[e._v("Hi guys!")]),e._v(" "),n("p",[e._v("The following tutorial will guide you to expose your config objects (UObjects that have decorated UPROPERTY fields) in a more user-friendly way. What we will do is to expose the configuration fields into the *"),n("strong",[e._v("Project Settings")]),e._v(" part of the editor so you can tweak and change those values from the editor directly without going into the low-level "),n("strong",[e._v("ini")]),e._v(" files.")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:CustomSettings.png"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/0/0f/CustomSettings.png",alt:"CustomSettings.png"}})])]),e._v(" "),n("h3",{attrs:{id:"custom-settings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-settings"}},[e._v("#")]),e._v(" Custom settings")]),e._v(" "),n("h4",{attrs:{id:"creating-your-settings-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-your-settings-object"}},[e._v("#")]),e._v(" Creating your settings object")]),e._v(" "),n("p",[e._v("We will create a simple "),n("strong",[e._v("UObject")]),e._v(" that will hold out config data. The header should be look like the following:")]),e._v(" "),n("p",[e._v('// Copyright 2015 Moritz Wundke. All Rights Reserved.\n// Released under MIT.\n \n#pragma once\n \n#include "CustomGameSettings.generated.h"\n \n/**\n* Setting object used to hold both config settings and editable ones in one place\n* To ensure the settings are saved to the specified config file make sure to add\n* props using the globalconfig or config meta.\n*/\nUCLASS(config = Game, defaultconfig)\nclass UCustomGameSettings : public UObject\n{\nGENERATED_BODY()\n \npublic:\nUCustomGameSettings(const FObjectInitializer& ObjectInitializer);\n \n/** Sample bool property */\nUPROPERTY(EditAnywhere, config, Category = Custom)\nbool bSampleBool;\n \n/** Sample float property that requires a restart */\nUPROPERTY(EditAnywhere, config, Category = Custom, meta = (ConfigRestartRequired = true))\nfloat SampleFloatRequireRestart;\n \n/** Sample string list */\nUPROPERTY(config, EditAnywhere, Category = Custom)\nTArray<FString> SampleStringList;\n \n/** Or add min, max or clamp values to the settings */\nUPROPERTY(config, EditAnywhere, Category = Custom, meta = (UIMin = 1, ClampMin = 1))\nint32 ClampedIntSetting;\n \n/** We can even use asset references */\nUPROPERTY(config, EditAnywhere, Category = Materials, meta = (AllowedClasses = "MaterialInterface"))\nFStringAssetReference StringMaterialAssetReference;\n \n};')]),e._v(" "),n("p",[e._v("As you can see we have to tell the engine which config file to use, the "),n("em",[e._v("UCLASS")]),e._v(" decorators will take care of it. Then to add items to our config we just have to decorate our "),n("em",[e._v("UPROPERTY")]),e._v(" fileds with the "),n("em",[e._v("config")]),e._v(" or "),n("em",[e._v("globalconfig")]),e._v(" flags.")]),e._v(" "),n("p",[e._v("We will just add a stub ctor as our implementation:")]),e._v(" "),n("p",[e._v('// Copyright 2015 Moritz Wundke. All Rights Reserved.\n// Released under MIT.\n \n#include "CustomSettings.h"\n#include "CustomGameSettings.h"\n \nUCustomGameSettings::UCustomGameSettings(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\n{\n \n}')]),e._v(" "),n("h4",{attrs:{id:"registering-the-object-with-our-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#registering-the-object-with-our-module"}},[e._v("#")]),e._v(" Registering the object with our module")]),e._v(" "),n("p",[e._v("You can register the object to any game module, this will work for your game modules or even plugins. What we have to do is to create a child class of our "),n("strong",[e._v("IModuleInterface")]),e._v(", plugins and game modules will inherit from different classes but the process of registering settings will be exactly the same.")]),e._v(" "),n("p",[e._v("So we will have to override the "),n("em",[e._v("StartupModule")]),e._v(" and "),n("em",[e._v("ShutdownModule")]),e._v(" functions, in our case I will also override "),n("em",[e._v("SupportsDynamicReloading")]),e._v(". The idea is to register our settings object in "),n("em",[e._v("StartModule")]),e._v(" and unregister them in "),n("em",[e._v("ShutdownModule")]),e._v(".")]),e._v(" "),n("p",[e._v("Our module source should be something like the following:")]),e._v(" "),n("p",[e._v('// Copyright 2015 Moritz Wundke.All Rights Reserved.\n// Released under MIT.\n \n#include "CustomSettings.h"\n \n// Settings\n#include "CustomGameSettings.h"\n#include "ISettingsModule.h"\n#include "ISettingsSection.h"\n#include "ISettingsContainer.h"\n \n#define LOCTEXT_NAMESPACE "CustomSettings"\n \nclass FCustomSettingsModule : public FDefaultGameModuleImpl\n{\nvirtual void StartupModule() override\n{\nRegisterSettings();\n}\n \nvirtual void ShutdownModule() override\n{\nif (UObjectInitialized())\n{\nUnregisterSettings();\n}\n}\n \nvirtual bool SupportsDynamicReloading() override\n{\nreturn true;\n}\n \nprivate:\n \n// Callback for when the settings were saved.\nbool HandleSettingsSaved()\n{\nUCustomGameSettings* Settings = GetMutableDefault<UCustomGameSettings>();\nbool ResaveSettings = false;\n \n// You can put any validation code in here and resave the settings in case an invalid\n// value has been entered\n \nif (ResaveSettings)\n{\nSettings->SaveConfig();\n}\n \nreturn true;\n}\n \nvoid RegisterSettings()\n{\n// Registering some settings is just a matter of exposing the default UObject of\n// your desired class, feel free to add here all those settings you want to expose\n// to your LDs or artists.\n \nif (ISettingsModule* SettingsModule = FModuleManager::GetModulePtr<ISettingsModule>("Settings"))\n{\n// Create the new category\nISettingsContainerPtr SettingsContainer = SettingsModule->GetContainer("Project");\n \nSettingsContainer->DescribeCategory("CustomSettings",\nLOCTEXT("RuntimeWDCategoryName", "CustomSettings"),\nLOCTEXT("RuntimeWDCategoryDescription", "Game configuration for the CustomSettings game module"));\n \n// Register the settings\nISettingsSectionPtr SettingsSection = SettingsModule->RegisterSettings("Project", "CustomSettings", "General",\nLOCTEXT("RuntimeGeneralSettingsName", "General"),\nLOCTEXT("RuntimeGeneralSettingsDescription", "Base configuration for our game module"),\nGetMutableDefault<UCustomGameSettings>()\n);\n \n// Register the save handler to your settings, you might want to use it to\n// validate those or just act to settings changes.\nif (SettingsSection.IsValid())\n{\nSettingsSection->OnModified().BindRaw(this, &FCustomSettingsModule::HandleSettingsSaved);\n}\n}\n}\n \nvoid UnregisterSettings()\n{\n// Ensure to unregister all of your registered settings here, hot-reload would\n// otherwise yield unexpected results.\n \nif (ISettingsModule* SettingsModule = FModuleManager::GetModulePtr<ISettingsModule>("Settings"))\n{\nSettingsModule->UnregisterSettings("Project", "CustomSettings", "General");\n}\n}\n};\n \nIMPLEMENT_PRIMARY_GAME_MODULE( FCustomSettingsModule, CustomSettings, "CustomSettings" );\n \n#undef LOCTEXT_NAMESPACE')]),e._v(" "),n("p",[e._v("As you can see we register our "),n("strong",[e._v("UCustomGameSettings")]),e._v(" into a new category, we can create as many categories as we like but I prefer having one one custom section, if not it will get messy quickly. "),n("em",[e._v("HandleSettingsSaved")]),e._v(" gets called once the config object has changed, this is the best place to validate your changes and to act to the config changes to reload any required logic.")]),e._v(" "),n("h3",{attrs:{id:"using-auto-discovery-settings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-auto-discovery-settings"}},[e._v("#")]),e._v(" Using Auto-discovery Settings")]),e._v(" "),n("p",[e._v("If you just want to add your settings to the "),n("strong",[e._v("Game")]),e._v(" section of the project settings you can skip all the custom stuff from above and just inherit from "),n("strong",[e._v("UDeveloperSettings")]),e._v(".")]),e._v(" "),n("p",[e._v('UCLASS(config=Game, defaultconfig, meta=(DisplayName="My Settings"))\nclass LOADINGSCREEN_API UMyDeveloperSettings : public UDeveloperSettings\n{\nGENERATED_UCLASS_BODY()\n \npublic:\n \n// Add all your properties here as we did before\n};')]),e._v(" "),n("h3",{attrs:{id:"summary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),n("p",[e._v("Adding settings to your editor makes it easier to modify them and lets non-code folk tweak without the fear of breaking the low-level config files.")]),e._v(" "),n("p",[e._v('Retrieved from "'),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=CustomSettings&oldid=17228",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=CustomSettings&oldid=17228"),n("OutboundLink")],1),e._v('"')]),e._v(" "),n("p",[n("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),n("li",[n("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=s.exports}}]);