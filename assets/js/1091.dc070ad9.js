(window.webpackJsonp=window.webpackJsonp||[]).push([[1091],{559:function(e,n,t){"use strict";t.r(n);var r=t(28),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("UDP Socket Sender Receiver From One UE4 Instance To Another - Epic Wiki")]),e._v(" "),t("h1",{attrs:{id:"udp-socket-sender-receiver-from-one-ue4-instance-to-another"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp-socket-sender-receiver-from-one-ue4-instance-to-another"}},[e._v("#")]),e._v(" UDP Socket Sender Receiver From One UE4 Instance To Another")]),e._v(" "),t("h2",{attrs:{id:"contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#Setup"}},[e._v("1.1 Setup")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Build_CS"}},[e._v("1.2 Build CS")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Custom_Data"}},[e._v("2 Custom Data")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Sender"}},[e._v("3 Sender")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#.h"}},[e._v("3.1 .h")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#.cpp"}},[e._v("3.2 .cpp")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Receiver"}},[e._v("4 Receiver")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#.h_2"}},[e._v("4.1 .h")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#.cpp_2"}},[e._v("4.2 .cpp")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#TCP"}},[e._v("5 TCP")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Conclusion"}},[e._v("6 Conclusion")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#Post_4.12"}},[e._v("7 Post 4.12")])])]),e._v(" "),t("h2",{attrs:{id:"overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),t("p",[t("strong",[e._v("Author:")]),e._v(" "),t("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),t("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(") "),t("a",{attrs:{href:"http://www.ue4code.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("www.ue4code.com"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("In this tutorial I give you the core code for how you can send any custom data structure you want, BP-exposed, from one instance of UE4 to another!")]),e._v(" "),t("p",[e._v("The implications are vast, the use cases are nearly infinite!")]),e._v(" "),t("p",[e._v("You can send any data you want from any 1 UE4 instance to any other!")]),e._v(" "),t("p",[t("a",{attrs:{href:"/File:UDPVictory.jpg",title:"px=900"}},[t("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/7/78/UDPVictory.jpg",alt:"px=900"}})]),e._v(" "),t("a",{attrs:{href:"/File:UDPGraph.jpg",title:"px=900"}},[t("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/a/a2/UDPGraph.jpg",alt:"px=900"}})])]),e._v(" "),t("h3",{attrs:{id:"setup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[e._v("#")]),e._v(" Setup")]),e._v(" "),t("p",[e._v("Below are two actor classes, you should spawn 1 in your sending instance of UE4 and 1 in your receiving instance of UE4, of the respective types.")]),e._v(" "),t("p",[e._v("The reason they are actors is to allow them to be easily blueprintable and have async BP event responses via BlueprintImplementable event.")]),e._v(" "),t("p",[e._v("I used this ip,port")]),e._v(" "),t("p",[e._v("IP = 127.0.0.1")]),e._v(" "),t("p",[e._v("Port = 8890")]),e._v(" "),t("p",[e._v("The IP is passed in an FString")]),e._v(" "),t("h3",{attrs:{id:"build-cs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-cs"}},[e._v("#")]),e._v(" Build CS")]),e._v(" "),t("p",[e._v("Make sure to include the extra dependencies!")]),e._v(" "),t("p",[e._v('PublicDependencyModuleNames.AddRange(new string[] {\n"Core", "CoreUObject", "Engine", "InputCore",\n \n"Sockets", "Networking"   //<~~~~~\n});')]),e._v(" "),t("h2",{attrs:{id:"custom-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#custom-data"}},[e._v("#")]),e._v(" Custom Data")]),e._v(" "),t("p",[e._v("The core of my method is that your data structure must have its own serialization function defined, here is the code for a BP exposed serializable data structure in UE4.")]),e._v(" "),t("p",[e._v('#pragma once\n \n#include "AnyCustomData.generated.h"\n \nUSTRUCT(BlueprintType)\nstruct FAnyCustomData\n{\nGENERATED_USTRUCT_BODY()\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Joy Color")\nFString Name = "Victory!";\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Joy Color")\nint32 Count = 1;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Joy Color")\nfloat Scale = 1.f;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Joy Color")\nFLinearColor Color = FLinearColor::Red;\n \nFAnyCustomData()\n{}\n};\n \nFORCEINLINE FArchive& operator<<(FArchive &Ar, FAnyCustomData& TheStruct )\n{\nAr << TheStruct.Name;\nAr << TheStruct.Count;\nAr << TheStruct.Scale;\nAr << TheStruct.Color;\n \nreturn Ar;\n}')]),e._v(" "),t("p",[e._v("As you can see am using a C++ operator overload of operator<< to tell UE4's FArchive how to serialize my data structure.")]),e._v(" "),t("p",[e._v("Because the data types are simple I can rely on UE4's existing serialization overloads for each simple data type.")]),e._v(" "),t("h2",{attrs:{id:"sender"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sender"}},[e._v("#")]),e._v(" Sender")]),e._v(" "),t("h3",{attrs:{id:"h"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[e._v("#")]),e._v(" .h")]),e._v(" "),t("p",[e._v('/*\n \nBy Rama\n \n*/\n#pragma once\n \n//Networking\n#include "Networking.h"\n \n//Base\n#include "RamaUDPSender.generated.h"\n \nUCLASS()\nclass ARamaUDPSender : public AActor\n{\nGENERATED_UCLASS_BODY()\n \nbool IsUDP;\n \n//UFUNCTION(BlueprintCallable, Category=RamaUDPSender)\nbool RamaUDPSender_SendString(FString ToSend);\n \npublic:\nTSharedPtr<FInternetAddr>\tRemoteAddr;\nFSocket* SenderSocket;\n \nbool StartUDPSender(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort,\nbool UDP = false\n);\n \npublic:\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Rama UDP Sender")\nbool ShowOnScreenDebugMessages;\n \n \n//ScreenMsg\nFORCEINLINE void ScreenMsg(const FString& Msg)\n{\nif(!ShowOnScreenDebugMessages) return;\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, *Msg);\n}\nFORCEINLINE void ScreenMsg(const FString& Msg, const float Value)\n{\nif(!ShowOnScreenDebugMessages) return;\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("%s %f"), *Msg, Value));\n}\nFORCEINLINE void ScreenMsg(const FString& Msg, const FString& Msg2)\n{\nif(!ShowOnScreenDebugMessages) return;\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("%s %s"), *Msg, *Msg2));\n}\n \n \npublic:\n \n/** Called whenever this actor is being removed from a level */\nvirtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n};')]),e._v(" "),t("h3",{attrs:{id:"cpp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpp"}},[e._v("#")]),e._v(" .cpp")]),e._v(" "),t("p",[e._v('/*\n \nRamaUDPSender\n \nby Rama\n*/\n#include "UDPSendReceive.h"\n#include "RamaUDPSender.h"\n \nARamaUDPSender::ARamaUDPSender(const FObjectInitializer& ObjectInitializer)\n: Super(ObjectInitializer)\n{\t\nSenderSocket = NULL;\n \nShowOnScreenDebugMessages = true;\n}\n \nvoid ARamaUDPSender::EndPlay(const EEndPlayReason::Type EndPlayReason)\n{\nSuper::EndPlay(EndPlayReason);\n//~~~~~~~~~~~~~~~~\n \nif(SenderSocket)\n{\nSenderSocket->Close();\nISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->DestroySocket(SenderSocket);\n}\n}\n \nbool ARamaUDPSender::StartUDPSender(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort\n){\t\n//Create Remote Address.\nRemoteAddr = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->CreateInternetAddr();\n \nbool bIsValid;\nRemoteAddr->SetIp(*TheIP, bIsValid);\nRemoteAddr->SetPort(ThePort);\n \nif(!bIsValid)\n{\nScreenMsg("Rama UDP Sender>> IP address was not valid!", TheIP);\nreturn false;\n}\n \nSenderSocket = FUdpSocketBuilder(*YourChosenSocketName)\n.AsReusable()\n.WithBroadcast()\n;\n \n \n//check(SenderSocket->GetSocketType() == SOCKTYPE_Datagram);\n \n//Set Send Buffer Size\nint32 SendSize = 2*1024*1024;\nSenderSocket->SetSendBufferSize(SendSize,SendSize);\nSenderSocket->SetReceiveBufferSize(SendSize, SendSize);\n \nUE_LOG(LogTemp,Log,TEXT("\\n\\n\\n~'),t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[t("s",[e._v('"));\nUE_LOG(LogTemp,Log,TEXT("Rama ****UDP**** Sender Initialized Successfully!!!"));\nUE_LOG(LogTemp,Log,TEXT("')])])])])])])])])])])])])])]),e._v('~\\n\\n\\n"));\n \nreturn true;\n}\n \nbool ARamaUDPSender::RamaUDPSender_SendString(FString ToSend)\n{\nif(!SenderSocket)\n{\nScreenMsg("No sender socket");\nreturn false;\n}\n//~~~~~~~~~~~~~~~~\n \nint32 BytesSent = 0;\n \nFAnyCustomData NewData;\nNewData.Scale = FMath::FRandRange(0,1000);\nNewData.Count = FMath::RandRange(0,100);\nNewData.Color = FLinearColor(FMath::FRandRange(0,1),FMath::FRandRange(0,1),FMath::FRandRange(0,1),1);\n \nFArrayWriter Writer;\n \nWriter << NewData; //Serializing our custom data, thank you UE4!\n \nSenderSocket->SendTo(Writer.GetData(),Writer.Num(),BytesSent,*RemoteAddr);\n \nif(BytesSent <= 0)\n{\nconst FString Str = "Socket is valid but the receiver received 0 bytes, make sure it is listening properly!";\nUE_LOG(LogTemp,Error,TEXT("%s"),*Str);\nScreenMsg(Str);\nreturn false;\n}\n \nScreenMsg("UDP~ Send Succcess! Bytes Sent = ",BytesSent );\n \nreturn true;\n}')]),e._v(" "),t("p",[e._v("The core here is:")]),e._v(" "),t("p",[e._v("FArrayWriter Writer;\n \nWriter << NewData; //Serializing our custom data, thank you UE4!\n \nSenderSocket->SendTo(Writer.GetData(),Writer.Num(),BytesSent,*RemoteAddr);")]),e._v(" "),t("p",[e._v("I am using UE4's ArrayWriter to do the serializtion and then send this serialized data over the network.")]),e._v(" "),t("h2",{attrs:{id:"receiver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#receiver"}},[e._v("#")]),e._v(" Receiver")]),e._v(" "),t("h3",{attrs:{id:"h-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#h-2"}},[e._v("#")]),e._v(" .h")]),e._v(" "),t("p",[e._v('/*\n \nBy Rama\n \n*/\n#pragma once\n \n//Networking\n#include "Networking.h"\n \n//Base\n#include "RamaUDPReceiver.generated.h"\n \nUCLASS()\nclass ARamaUDPReceiver : public AActor\n{\nGENERATED_UCLASS_BODY()\n \n//====================================================\n//\t\tData Received Events!\npublic:\n/** Data has been received!! */\nUFUNCTION(BlueprintImplementableEvent)\nvoid BPEvent_DataReceived(const FAnyCustomData& ReceivedData );\n \n//====================================================\n \npublic:\nFSocket* ListenSocket;\n \nFUdpSocketReceiver* UDPReceiver = nullptr;\nvoid Recv(const FArrayReaderPtr& ArrayReaderPtr, const FIPv4Endpoint& EndPt);\n \nbool StartUDPReceiver(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort\n);\n \n//ScreenMsg\nFORCEINLINE void ScreenMsg(const FString& Msg)\n{\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, *Msg);\n}\nFORCEINLINE void ScreenMsg(const FString& Msg, const float Value)\n{\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("%s %f"), *Msg, Value));\n}\nFORCEINLINE void ScreenMsg(const FString& Msg, const FString& Msg2)\n{\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("%s %s"), *Msg, *Msg2));\n}\n \n \npublic:\n \n/** Called whenever this actor is being removed from a level */\nvirtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;\n};')]),e._v(" "),t("h3",{attrs:{id:"cpp-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpp-2"}},[e._v("#")]),e._v(" .cpp")]),e._v(" "),t("p",[e._v('/*\n \nRamaUDPReceiver\n \nby Rama\n*/\n#include "UDPSendReceive.h"\n#include "RamaUDPReceiver.h"\n \nARamaUDPReceiver::ARamaUDPReceiver(const FObjectInitializer& ObjectInitializer)\n: Super(ObjectInitializer)\n{\t\nListenSocket = NULL;\n}\n \nvoid ARamaUDPReceiver::EndPlay(const EEndPlayReason::Type EndPlayReason)\n{\nSuper::EndPlay(EndPlayReason);\n//~~~~~~~~~~~~~~~~\n \ndelete UDPReceiver;\nUDPReceiver = nullptr;\n \n//Clear all sockets!\n//\t\tmakes sure repeat plays in Editor dont hold on to old sockets!\nif(ListenSocket)\n{\nListenSocket->Close();\nISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->DestroySocket(ListenSocket);\n}\n}\n \n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n//Rama\'s Start TCP Receiver\nbool ARamaUDPReceiver::StartUDPReceiver(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort\n){\n \nScreenMsg("RECEIVER INIT");\n \n//~~~\n \nFIPv4Address Addr;\nFIPv4Address::Parse(TheIP, Addr);\n \n//Create Socket\nFIPv4Endpoint Endpoint(Addr, ThePort);\n \n//BUFFER SIZE\nint32 BufferSize = 2*1024*1024;\n \nListenSocket = FUdpSocketBuilder(*YourChosenSocketName)\n.AsNonBlocking()\n.AsReusable()\n.BoundToEndpoint(Endpoint)\n.WithReceiveBufferSize(BufferSize);\n;\n \nFTimespan ThreadWaitTime = FTimespan::FromMilliseconds(100);\nUDPReceiver = new FUdpSocketReceiver(ListenSocket, ThreadWaitTime, TEXT("UDP RECEIVER"));\nUDPReceiver->OnDataReceived().BindUObject(this, &ARamaUDPReceiver::Recv);\n \nreturn true;\n}\n \nvoid ARamaUDPReceiver::Recv(const FArrayReaderPtr& ArrayReaderPtr, const FIPv4Endpoint& EndPt)\n{\nScreenMsg("Received bytes", ArrayReaderPtr->Num() );\n \nFAnyCustomData Data;\n*ArrayReaderPtr << Data;\t\t//Now de-serializing! See AnyCustomData.h\n \n//BP Event\nBPEvent_DataReceived(Data);\n}')]),e._v(" "),t("p",[e._v("The core here is the binding of the receiver thread delegate:")]),e._v(" "),t("p",[e._v("UDPReceiver->OnDataReceived().BindUObject(this, &ARamaUDPReceiver::Recv);")]),e._v(" "),t("p",[e._v("and then deserializing inside this delegate binded function:")]),e._v(" "),t("p",[e._v("FAnyCustomData Data;\n*ArrayReaderPtr << Data;\t\t//Now de-serializing! See AnyCustomData.h\n \n//BP Event\nBPEvent_DataReceived(Data);")]),e._v(" "),t("h2",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[e._v("#")]),e._v(" TCP")]),e._v(" "),t("p",[e._v("I have a wiki on communicating via TCP here! "),t("a",{attrs:{href:"/TCP_Socket_Listener,_Receive_Binary_Data_From_an_IP/Port_Into_UE4,_(Full_Code_Sample)",title:"TCP Socket Listener, Receive Binary Data From an IP/Port Into UE4, (Full Code Sample)"}},[e._v("TCP_Socket_Listener,_Receive_Binary_Data_From_an_IP/Port_Into_UE4,_(Full_Code_Sample)")])]),e._v(" "),t("h2",{attrs:{id:"conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),t("p",[e._v("As you can see I am using my custom USTRUCT serialization function to send any data I want from one instance of UE4 to another, and straight into Blueprints!")]),e._v(" "),t("p",[e._v("Now you can too!")]),e._v(" "),t("p",[e._v("Enjoy!")]),e._v(" "),t("p",[t("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),t("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(") "),t("a",{attrs:{href:"http://www.ue4code.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("www.ue4code.com"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"post-4-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#post-4-12"}},[e._v("#")]),e._v(" Post 4.12")]),e._v(" "),t("p",[e._v("If your receiver doesn't receive anything, you might want to try add this line:")]),e._v(" "),t("p",[e._v("Receiver->Start();")]),e._v(" "),t("p",[e._v("Thanks to David_88 here: "),t("a",{attrs:{href:"https://forums.unrealengine.com/showthread.php?125064-FUdpSocketReceiver-not-receiving-data",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://forums.unrealengine.com/showthread.php?125064-FUdpSocketReceiver-not-receiving-data"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Another thing might help you: if you want to spawn actor or set timer in your blueprint after receiving data, you'll have to call the blueprint event BPEvent_DataReceived(...) in game thread. Rama has another tutorial about multithreading here: "),t("a",{attrs:{href:"https://wiki.unrealengine.com/Multi-Threading:_How_to_Create_Threads_in_UE4",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/Multi-Threading:_How_to_Create_Threads_in_UE4"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("What's needed here, is the last bit of that tutorial:")]),e._v(" "),t("p",[e._v('#include "Async.h"\n...\nAsyncTask(ENamedThreads::GameThread, [&]() {\nBPEvent_DataReceived(Data); // call your event this way so it\'ll be executed on game thread\n});')]),e._v(" "),t("p",[e._v("This'll call your blueprint event in game thread.")]),e._v(" "),t("p",[e._v('Retrieved from "'),t("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=UDP_Socket_Sender_Receiver_From_One_UE4_Instance_To_Another&oldid=23922",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=UDP_Socket_Sender_Receiver_From_One_UE4_Instance_To_Another&oldid=23922"),t("OutboundLink")],1),e._v('"')]),e._v(" "),t("p",[t("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=a.exports}}]);