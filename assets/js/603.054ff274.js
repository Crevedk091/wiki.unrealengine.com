(window.webpackJsonp=window.webpackJsonp||[]).push([[603],{1015:function(e,t,n){"use strict";n.r(t);var a=n(28),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Interfaces And Blueprints - Epic Wiki")]),e._v(" "),n("h1",{attrs:{id:"interfaces-and-blueprints"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#interfaces-and-blueprints"}},[e._v("#")]),e._v(" Interfaces And Blueprints")]),e._v(" "),n("p",[e._v("From Epic Wiki")]),e._v(" "),n("p",[e._v("Jump to: "),n("a",{attrs:{href:"#mw-head"}},[e._v("navigation")]),e._v(", "),n("a",{attrs:{href:"#p-search"}},[e._v("search")])]),e._v(" "),n("p",[n("a",{attrs:{href:"/index.php?title=Template:Rating&action=edit&redlink=1",title:"Template:Rating (page does not exist)"}},[e._v("Template:Rating")]),e._v(" Using interfaces with C++ and Blueprints can be a little tricky when the interface is implemented purely in Blueprints. Currently, when a Blueprint implements an Interface the C++ InterfaceCast<> type cast does not work.")]),e._v(" "),n("p",[n("strong",[e._v("Interface Cast Method")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}},[e._v(" auto MyInterface = InterfaceCast"),n("IMyInterface",[e._v("(ActorInstance); if (MyInterface) {")])],1)],1),e._v(" "),n("p",[e._v("// Other code")]),e._v(" "),n("p",[e._v("} ")]),e._v(" "),n("p",[e._v("What you need to do instead is:")]),e._v(" "),n("p",[e._v("(Originally discovered by Lion032, "),n("a",{attrs:{href:"https://answers.unrealengine.com/questions/43038/buginerfacecast-returns-null-for-blueprint-classes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("source"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("p",[n("strong",[e._v("Implements Interface Method")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}},[e._v(" if (ActorInstance->GetClass()->ImplementsInterface(UMyInterface::StaticClass())) {")])],1),e._v(" "),n("p",[e._v("// Other code")]),e._v(" "),n("p",[e._v("} ")]),e._v(" "),n("p",[e._v("This will work for both C++ implemented interfaces and Blueprint implemented interfaces. From here, you can use the static Execute versions of the interface functions.")]),e._v(" "),n("p",[n("strong",[e._v("Header:")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}},[e._v(" UINTERFACE(MinimalAPI) class UMyInterface : public UInterface {")])],1),e._v(" "),n("p",[e._v("GENERATED_UINTERFACE_BODY()")]),e._v(" "),n("p",[e._v("};")]),e._v(" "),n("p",[e._v("class IMyInterface {")]),e._v(" "),n("p",[e._v("GENERATED_IINTERFACE_BODY()")]),e._v(" "),n("p",[e._v("public:")]),e._v(" "),n("p",[e._v("UFUNCTION(BlueprintImplementableEvent)\nvoid MyInterfaceFunction();")]),e._v(" "),n("p",[e._v("}; ")]),e._v(" "),n("p",[n("strong",[e._v("Interface function example:")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}},[e._v(" if (ActorInstance->GetClass()->ImplementsInterface(UMyInterface::StaticClass())) {")])],1),e._v(" "),n("p",[e._v("IMyInterface::Execute_MyInterfaceFunction(ActorInstance);")]),e._v(" "),n("p",[e._v("} ")]),e._v(" "),n("p",[e._v("It is likely that the static Execute functions are generated by the Unreal Header Tool (UHT) only for interface functions that declare UFUNCTION(). This means that you can't make a virtual interface function which uses UFUNCTION() and intellisense won't pick them up.")]),e._v(" "),n("h2",{attrs:{id:"more-complete-example-passing-self-as-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#more-complete-example-passing-self-as-reference"}},[e._v("#")]),e._v(" More Complete Example (Passing Self as Reference):")]),e._v(" "),n("p",[n("strong",[e._v("MyInterface.H:")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}})],1),e._v(" "),n("p",[e._v("class AMyActor;")]),e._v(" "),n("p",[e._v('UINTERFACE(Category = "My Interface", BlueprintType, meta = (DisplayName = "My Interface")) class MYMODULE_API UMyInterface : public UInterface { GENERATED_UINTERFACE_BODY() };')]),e._v(" "),n("p",[e._v('class MYMODULE_API IMyInterface { GENERATED_IINTERFACE_BODY() public: /// My Initialization Interface. UFUNCTION(Category = "My Interface", BlueprintNativeEvent, BlueprintCallable, meta = (DisplayName = "On My Interface Execute") void OnInitialized(const AMyActor* Context); };')]),e._v(" "),n("p",[n("strong",[e._v("MyActor.H:")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}},[e._v(' UFUNCTION(Category = "My Interface", BlueprintNativeEvent, BlueprintCallable, meta = (DisplayName = "On My Interface Call")) void OnInitialized(const AMyActor* Context); ')])],1),e._v(" "),n("p",[n("strong",[e._v("MyActor.CPP:")]),e._v(" "),n("syntaxhighlight",{attrs:{lang:"cpp"}})],1),e._v(" "),n("p",[e._v("void AMyActor::OnInitialized_Implementation(const AMyActor* Context) {")]),e._v(" "),n("p",[e._v("if (Context != this) {return;}")]),e._v(" "),n("p",[e._v("TArray<AActor*>Interfaces; // Pick only Actors with Interface, instead of iterating whole World: UGameplayStatics::GetAllActorsWithInterface(this,UMyInterface::StaticClass(),Interfaces);")]),e._v(" "),n("p",[e._v("for (const auto &Actor : Interfaces) {")]),e._v(" "),n("p",[e._v("// Try to Execute on C++ layer: const auto &Interface = Cast"),n("IMyInterface",[e._v("(Actor); if (Interface) {Interface->Execute_OnInitialized(Actor,Context);} else")])],1),e._v(" "),n("p",[e._v("// Else, Execute Interface on Blueprint layer instead: if (Actor->GetClass()->ImplementsInterface(UMyInterface::StaticClass())) { IMyInterface::Execute_OnInitialized(Actor,Context); }")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("void AMyActor::BeginPlay() { Super::BeginPlay();")]),e._v(" "),n("p",[e._v("// Fire off the Native Event, which is going to be received by all the other Actors: Execute_OnInitialized(this,this);")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("Notes: Example above is implemented with old "),n("strong",[e._v("GENERATED_UCLASS_BODY()")]),e._v(" instead of new "),n("strong",[e._v("GENERATED_BODY()")]),e._v(" one. If you want your Actor to receive C++ Interface calls instead of from Blueprint layer, your Actor must inherit from both AActor class and your Interface class, like so: "),n("syntaxhighlight",{attrs:{lang:"cpp"}},[e._v(" class MYMODULE_API AMyActor : public AActor, public IMyInterface {...} ")])],1),e._v(" "),n("h2",{attrs:{id:"update-and-pointer-to-more-detailed-discussion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#update-and-pointer-to-more-detailed-discussion"}},[e._v("#")]),e._v(" Update and pointer to more detailed discussion")]),e._v(" "),n("p",[e._v("Thanks for this wiki; I think it is essential on getting interfaces to work properly. I wrote a longer discussion of what I think is going on with Blueprint and C++ interfaces at "),n("a",{attrs:{href:"https://answers.unrealengine.com/questions/214147/grand-unified-cblueprint-cast-interface-explanatio.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://answers.unrealengine.com/questions/214147/grand-unified-cblueprint-cast-interface-explanatio.html"),n("OutboundLink")],1),e._v(" which I thought readers of this topic might find useful. -Xarol")]),e._v(" "),n("p",[n("a",{attrs:{href:"/index.php?title=User:Solid_Snake&action=edit&redlink=1",title:"User:Solid Snake (page does not exist)"}},[e._v("James Tan")]),e._v(" , "),n("a",{attrs:{href:"/index.php?title=User:BrUnO_XaVIeR&action=edit&redlink=1",title:"User:BrUnO XaVIeR (page does not exist)"}},[e._v("Bruno Xavier")])]),e._v(" "),n("p",[e._v('Retrieved from "'),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Interfaces_And_Blueprints&oldid=717",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Interfaces_And_Blueprints&oldid=717"),n("OutboundLink")],1),e._v('"')]),e._v(" "),n("p",[n("a",{attrs:{href:"/index.php?title=Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/index.php?title=Category:Tutorials&action=edit&redlink=1",title:"Category:Tutorials (page does not exist)"}},[e._v("Tutorials")])]),e._v(" "),n("li",[n("a",{attrs:{href:"/index.php?title=Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),n("li",[n("a",{attrs:{href:"/index.php?title=Category:Community_Created_Content",title:"Category:Community Created Content"}},[e._v("Community Created Content")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);