(window.webpackJsonp=window.webpackJsonp||[]).push([[1047],{589:function(e,t,n){"use strict";n.r(t);var r=n(28),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("TCP Socket Listener, Receive Binary Data From an IP/Port Into UE4, (Full Code Sample) - Epic Wiki")]),e._v(" "),n("h1",{attrs:{id:"tcp-socket-listener-receive-binary-data-from-an-ip-port-into-ue4-full-code-sample"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tcp-socket-listener-receive-binary-data-from-an-ip-port-into-ue4-full-code-sample"}},[e._v("#")]),e._v(" TCP Socket Listener, Receive Binary Data From an IP/Port Into UE4, (Full Code Sample)")]),e._v(" "),n("h2",{attrs:{id:"contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Build.CS"}},[e._v("2 Build.CS")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#.h"}},[e._v("3 .h")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#.cpp"}},[e._v("4 .cpp")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#How_It_Works"}},[e._v("5 How It Works")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Another_TCP_Source_Code.2C_by_alfalfasprossen"}},[e._v("6 Another TCP Source Code, by alfalfasprossen")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Another_TCP_Source.2C_by_Phi.WOP"}},[e._v("7 Another TCP Source, by Phi.WOP")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#UDP"}},[e._v("8 UDP")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Conclusion"}},[e._v("9 Conclusion")])])]),e._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[n("em",[e._v("Author:")]),e._v(" "),n("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),n("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),n("p",[e._v("Dear Community,")]),e._v(" "),n("p",[e._v("In this tutorial I am giving you the code I used to enable a python script to communicate with UE4 over a TCP socket!")]),e._v(" "),n("p",[e._v("That's right!")]),e._v(" "),n("p",[n("strong",[e._v("I am just straight up giving you my whole source code that I spent the past several hours writing!")])]),e._v(" "),n("p",[e._v("♥")]),e._v(" "),n("p",[e._v("Rama")]),e._v(" "),n("p",[n("strong",[n("em",[e._v("COMMUNITY CAVEAT")]),e._v(" [02/06/2017, UE4.14.3]")]),e._v(" From the readme found in the Networking module ("),n("em",[e._v("<Path_to_Engine>/Source/Runtime/Networking/Readme.txt")]),e._v("):")]),e._v(" "),n("p",[n("em",[e._v('"This module is an internal R&D effort to explore how the socket subsystem could be improved. Production use is NOT encouraged at this point."')])]),e._v(" "),n("p",[e._v("For the reader of this tutorial this means the module will likely perpetually change as development on the UE4 is progressing. For example, since the initial writing of this wiki tutorial the "),n("em",[e._v("FTcpListener")]),e._v(" class has been added which makes a lot of Rama's delightful work redundant. However, in the future this class may again be changed or removed entirely.")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:PythonToUE4Socket.jpg"}},[n("img",{attrs:{src:"https://d3ar1piqh1oeli.cloudfront.net/c/c3/PythonToUE4Socket.jpg/1000px-PythonToUE4Socket.jpg",alt:"PythonToUE4Socket.jpg"}})])]),e._v(" "),n("h2",{attrs:{id:"build-cs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-cs"}},[e._v("#")]),e._v(" Build.CS")]),e._v(" "),n("p",[e._v("You will need at least this to work with sockets in UE4")]),e._v(" "),n("p",[e._v('PublicDependencyModuleNames.AddRange(new string[] {\n"Core",\n"CoreUObject",\n"Engine",\n"InputCore",\n \n"Sockets","Networking"\n});')]),e._v(" "),n("h2",{attrs:{id:"h"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#h"}},[e._v("#")]),e._v(" .h")]),e._v(" "),n("p",[e._v('#include "Networking.h"\n \n//AYourClass definition\n \npublic:\n \nFSocket* ListenerSocket;\nFSocket* ConnectionSocket;\nFIPv4Endpoint RemoteAddressForConnection;\n \nbool StartTCPReceiver(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort\n);\n \nFSocket* CreateTCPConnectionListener(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort,\nconst int32 ReceiveBufferSize = 2*1024*1024\n);\n \n//Timer functions, could be threads\nvoid TCPConnectionListener(); \t//can thread this eventually\nvoid TCPSocketListener();\t\t//can thread this eventually\n \n \n//Format String IP4 to number array\nbool FormatIP4ToNumber(const FString& TheIP, uint8 (&Out)[4]);\n \n//Rama\'s StringFromBinaryArray\nFString StringFromBinaryArray(const TArray<uint8>& BinaryArray);')]),e._v(" "),n("h2",{attrs:{id:"cpp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cpp"}},[e._v("#")]),e._v(" .cpp")]),e._v(" "),n("p",[e._v("The flow goes basically from the top down, you can probably guess the purpose of this first function.")]),e._v(" "),n("p",[e._v('void AYourClass::Laaaaaauuuunch()\n{\n//IP = 127.0.0.1, Port = 8890 for my Python test case\nif( ! StartTCPReceiver("RamaSocketListener", "127.0.0.1", 8890))\n{\n//UE_LOG  "TCP Socket Listener Created!"\nreturn;\n}\n \n//UE_LOG  "TCP Socket Listener Created! Yay!"\n}\n \n//Rama\'s Start TCP Receiver\nbool AYourClass::StartTCPReceiver(\nconst FString& YourChosenSocketName,\nconst FString& TheIP,\nconst int32 ThePort\n){\n//Rama\'s CreateTCPConnectionListener\nListenerSocket = CreateTCPConnectionListener(YourChosenSocketName,TheIP, ThePort);\n \n//Not created?\nif(!ListenerSocket)\n{\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("StartTCPReceiver>> Listen socket could not be created! ~> %s %d"), *TheIP, ThePort));\nreturn false;\n}\n \n//Start the Listener! //thread this eventually\nGetWorldTimerManager().SetTimer(this,\n&AYourClass::TCPConnectionListener, 0.01, true);\t\n \nreturn true;\n}\n//Format IP String as Number Parts\nbool AYourClass::FormatIP4ToNumber(const FString& TheIP, uint8 (&Out)[4])\n{\n//IP Formatting\nTheIP.Replace( TEXT(" "), TEXT("") );\n \n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\t\t\t\t\t\t   IP 4 Parts\n \n//String Parts\nTArray<FString> Parts;\nTheIP.ParseIntoArray( &Parts, TEXT("."), true );\nif ( Parts.Num() != 4 )\nreturn false;\n \n//String to Number Parts\nfor ( int32 i = 0; i < 4; ++i )\n{\nOut[i] = FCString::Atoi( *Parts[i] );\n}\n \nreturn true;\n}\n//Rama\'s Create TCP Connection Listener\nFSocket* AYourClass::CreateTCPConnectionListener(const FString& YourChosenSocketName,const FString& TheIP, const int32 ThePort,const int32 ReceiveBufferSize)\n{\nuint8 IP4Nums[4];\nif( ! FormatIP4ToNumber(TheIP, IP4Nums))\n{\nVShow("Invalid IP! Expecting 4 parts separated by .");\nreturn false;\n}\n \n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n//Create Socket\nFIPv4Endpoint Endpoint(FIPv4Address(IP4Nums[0], IP4Nums[1], IP4Nums[2], IP4Nums[3]), ThePort);\nFSocket* ListenSocket = FTcpSocketBuilder(*YourChosenSocketName)\n.AsReusable()\n.BoundToEndpoint(Endpoint)\n.Listening(8);\n \n//Set Buffer Size\nint32 NewSize = 0;\nListenSocket->SetReceiveBufferSize(ReceiveBufferSize, NewSize);\n \n//Done!\nreturn ListenSocket;\t\n}\n//Rama\'s TCP Connection Listener\nvoid AYourClass::TCPConnectionListener()\n{\n//~~~~~~~~~~~~~\nif(!ListenerSocket) return;\n//~~~~~~~~~~~~~\n \n//Remote address\nTSharedRef<FInternetAddr> RemoteAddress = ISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->CreateInternetAddr();\nbool Pending;\n \n// handle incoming connections\nif (ListenerSocket->HasPendingConnection(Pending) && Pending)\n{\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//Already have a Connection? destroy previous\nif(ConnectionSocket)\n{\nConnectionSocket->Close();\nISocketSubsystem::Get(PLATFORM_SOCKETSUBSYSTEM)->DestroySocket(ConnectionSocket);\n}\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n//New Connection receive!\nConnectionSocket = ListenerSocket->Accept(*RemoteAddress, TEXT("RamaTCP Received Socket Connection"));\n \nif (ConnectionSocket != NULL)\n{\n//Global cache of current Remote Address\nRemoteAddressForConnection = FIPv4Endpoint(RemoteAddress);\n \n//UE_LOG "Accepted Connection! WOOOHOOOO!!!";\n \n//can thread this too\nGetWorldTimerManager().SetTimer(this,\n&AYourClass::TCPSocketListener, 0.01, true);\t\n}\n}\n}\n \n//Rama\'s String From Binary Array\nFString AYourClass::StringFromBinaryArray(TArray<uint8> BinaryArray)\n{\nBinaryArray.Add(0); // Add 0 termination. Even if the string is already 0-terminated, it doesn\'t change the results.\n// Create a string from a byte array. The string is expected to be 0 terminated (i.e. a byte set to 0).\n// Use UTF8_TO_TCHAR if needed.\n// If you happen to know the data is UTF-16 (USC2) formatted, you do not need any conversion to begin with.\n// Otherwise you might have to write your own conversion algorithm to convert between multilingual UTF-16 planes.\nreturn FString(ANSI_TO_TCHAR(reinterpret_cast<const char*>(BinaryArray.GetData()));\n}\n \n//Rama\'s TCP Socket Listener\nvoid AYourClass::TCPSocketListener()\n{\n//~~~~~~~~~~~~~\nif(!ConnectionSocket) return;\n//~~~~~~~~~~~~~\n \n \n//Binary Array!\nTArray<uint8> ReceivedData;\n \nuint32 Size;\nwhile (ConnectionSocket->HasPendingData(Size))\n{\nReceivedData.Init(FMath::Min(Size, 65507u));\n \nint32 Read = 0;\nConnectionSocket->Recv(ReceivedData.GetData(), ReceivedData.Num(), Read);\n \n//GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("Data Read! %d"), ReceivedData.Num()));\n}\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \nif(ReceivedData.Num() <= 0)\n{\n//No Data Received\nreturn;\n}\n \nVShow("Total Data read!", ReceivedData.Num() );\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("Data Bytes Read ~> %d"), ReceivedData.Num()));\n \n \n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\t\t\t\t\t\tRama\'s String From Binary Array\nconst FString ReceivedUE4String = StringFromBinaryArray(ReceivedData);\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n \nVShow("As String!!!!! ~>",ReceivedUE4String);\t\nGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("As String Data ~> %s"), *ReceivedUE4String));\n}')]),e._v(" "),n("h2",{attrs:{id:"how-it-works"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" How It Works")]),e._v(" "),n("p",[e._v("The first socket listens on the port and IP supplied, and if a connection is received on this port, then the actual ListenerSocket is created.")]),e._v(" "),n("p",[e._v("The ListenerSocket is run in very short looping timer of 0.01 seconds.")]),e._v(" "),n("p",[e._v("You could also use a thread for this 😃")]),e._v(" "),n("p",[n("strong",[n("a",{attrs:{href:"/Multi-Threading:_How_to_Create_Threads_in_UE4",title:"Multi-Threading: How to Create Threads in UE4"}},[e._v("Rama's Tutorial on Multi-Threading, Create Threads in UE4")])])]),e._v(" "),n("p",[e._v("Whenever the ListenerSocket receives data, it makes sure to gather all of it using the while loop, and then I convert the results into a FString.")]),e._v(" "),n("p",[e._v('//Binary Array!\nTArray<uint8> ReceivedData;\n \nuint32 Size;\nwhile (ConnectionSocket->HasPendingData(Size))\n{\nReceivedData.Init(FMath::Min(Size, 65507u));\n \nint32 Read = 0;\nConnectionSocket->Recv(ReceivedData.GetData(), ReceivedData.Num(), Read);\n \n//GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, FString::Printf(TEXT("Data Read! %d"), ReceivedData.Num()));\n}')]),e._v(" "),n("p",[e._v("If you are not receiving string data you can skip that part and just pass out the binary array itself 😃")]),e._v(" "),n("h2",{attrs:{id:"another-tcp-source-code-by-alfalfasprossen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#another-tcp-source-code-by-alfalfasprossen"}},[e._v("#")]),e._v(" Another TCP Source Code, by alfalfasprossen")]),e._v(" "),n("p",[e._v("Community Member alfalfasprossen has been developing a communication interface between UE4 and Maya since 2014 using TCP sockets. Check out his code and see if you can learn some more!")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/m2u/m2uUE4Plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("alfalfa's m2u Plugin"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"another-tcp-source-by-phi-wop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#another-tcp-source-by-phi-wop"}},[e._v("#")]),e._v(" Another TCP Source, by Phi.WOP")]),e._v(" "),n("p",[e._v("Here is another implementation you can check out from a UE4 Community member!")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://forums.unrealengine.com/showthread.php?18566-TCP-Socket-Listener-Receiving-Binary-Data-into-UE4-From-a-Python-Script!&p=708455&viewfull=1#post708455",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://forums.unrealengine.com/showthread.php?18566-TCP-Socket-Listener-Receiving-Binary-Data-into-UE4-From-a-Python-Script!&p=708455&viewfull=1#post708455"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"udp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[e._v("#")]),e._v(" UDP")]),e._v(" "),n("p",[e._v("I have written a wiki on communicating via UDP from one UE4 instance to another here! "),n("a",{attrs:{href:"/UDP_Socket_Sender_Receiver_From_One_UE4_Instance_To_Another",title:"UDP Socket Sender Receiver From One UE4 Instance To Another"}},[e._v("UDP_Socket_Sender_Receiver_From_One_UE4_Instance_To_Another")])]),e._v(" "),n("h2",{attrs:{id:"conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),n("p",[e._v("I am sharing my last several hours of research with you in fully functional C++ code format!")]),e._v(" "),n("p",[e._v("Enjoy!")]),e._v(" "),n("p",[n("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),n("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),n("p",[e._v('Retrieved from "'),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=TCP_Socket_Listener,_Receive_Binary_Data_From_an_IP/Port_Into_UE4,_(Full_Code_Sample)&oldid=25110",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=TCP_Socket_Listener,_Receive_Binary_Data_From_an_IP/Port_Into_UE4,_(Full_Code_Sample)&oldid=25110"),n("OutboundLink")],1),e._v('"')]),e._v(" "),n("p",[n("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=a.exports}}]);