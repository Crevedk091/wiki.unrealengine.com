(window.webpackJsonp=window.webpackJsonp||[]).push([[550],{956:function(e,n,a){"use strict";a.r(n);var t=a(28),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Global Fade In out - Epic Wiki")]),e._v(" "),a("h1",{attrs:{id:"global-fade-in-out"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-fade-in-out"}},[e._v("#")]),e._v(" Global Fade In out")]),e._v(" "),a("h2",{attrs:{id:"contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#The_custom_UGameViewportClient"}},[e._v("1.1 The custom UGameViewportClient")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Our_fade_logic"}},[e._v("1.2 Our fade logic")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Using_the_screen_fade"}},[e._v("1.3 Using the screen fade")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Summary"}},[e._v("1.4 Summary")])])])])]),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[a("em",[e._v("Original Author:")]),e._v(" "),a("a",{attrs:{href:"/User:Moss",title:"User:Moss"}},[e._v("Moss")])]),e._v(" "),a("p",[e._v("Hi guys!")]),e._v(" "),a("p",[e._v("Doing a global fade in out is very simple in UE4, you do not need to create any fancy PP materials or using an animation in UMG. The following tutorial will implement the effect by using a custom "),a("strong",[e._v("UGameViewportClient")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"the-custom-ugameviewportclient"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-custom-ugameviewportclient"}},[e._v("#")]),e._v(" The custom UGameViewportClient")]),e._v(" "),a("p",[e._v("First of all we will create a new C++ class that inherits from "),a("strong",[e._v("UGameViewportClient")]),e._v(", for now we will just create an empty class and register it in your "),a("strong",[e._v("DefaultEngine.ini")]),e._v(" file.")]),e._v(" "),a("p",[e._v("Our header should look similar to the following:")]),e._v(" "),a("p",[e._v('// Copyright 2015 Moritz Wundke. All Rights Reserved.\n// Released under MIT\nÂ \n#pragma once\nÂ \n#include "Engine/GameViewportClient.h"\n#include "CustomGameViewportClient.generated.h"\nÂ \n/**\n* A simple UGameViewportClient used to handle a global fade in/out\n*/\nUCLASS()\nclass MYGAME_API UCustomGameViewportClient: public UGameViewportClient\n{\nGENERATED_BODY()\nÂ \n};')]),e._v(" "),a("p",[e._v("And an empty "),a("em",[e._v("cpp")]),e._v(" file such as:")]),e._v(" "),a("p",[e._v('// Copyright 2015 Moritz Wundke. All Rights Reserved.\n// Released under MIT\nÂ \n#include "MyGame.h"\n#include "CustomGameViewportClient.h"')]),e._v(" "),a("p",[e._v("To tell the engine to use our custom class instead of the base engine version we have to add the following into the projects "),a("strong",[e._v("DefaultEngine.ini")]),e._v(" file.")]),e._v(" "),a("p",[e._v("[/Script/Engine.Engine]\nGameViewportClientClassName=/Script/MyGame.CustomGameViewportClient")]),e._v(" "),a("h3",{attrs:{id:"our-fade-logic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#our-fade-logic"}},[e._v("#")]),e._v(" Our fade logic")]),e._v(" "),a("p",[e._v("The idea is to add the fading logic into our newly created ViewportClient. The "),a("em",[e._v("cpp")]),e._v(" and the "),a("em",[e._v("h")]),e._v(" should be something like the following.")]),e._v(" "),a("p",[e._v('// Copyright 2015 Moritz Wundke. All Rights Reserved.\n// Released under MIT\nÂ \n#pragma once\nÂ \n#include "Engine/GameViewportClient.h"\n#include "CustomGameViewportClient.generated.h"\nÂ \n/**\n* A simple UGameViewportClient used to handle a global fade in/out\n*/\nUCLASS()\nclass MYGAME_API UCustomGameViewportClient: public UGameViewportClient\n{\nGENERATED_BODY()\nÂ \npublic:\nÂ \n/**\n* Called after rendering the player views and HUDs to render menus, the console, etc.\n* This is the last rendering call in the render loop\n*\n* @param Canvas        The canvas to use for rendering.\n*/\nvirtual void PostRender( UCanvas* Canvas ) override;\nÂ \n/** Clear fading state */\nvirtual void ClearFade();\nÂ \n/** Used for Fade to and from black */\nvirtual void Fade(const float Duration, const bool bToBlack);\nÂ \n/** Does the actual screen fading */\nvoid DrawScreenFade(UCanvas* Canvas);\nÂ \nprivate:\nÂ \n// Values used by our screen fading\nuint32 bFading : 1;\nuint32 bToBlack : 1; // Fading to black will be applied even if alpha is 1\nfloat FadeAlpha;\nfloat FadeStartTime;\nfloat FadeDuration;\n};')]),e._v(" "),a("p",[e._v('// Copyright 2015 Moritz Wundke. All Rights Reserved.\n// Released under MIT\nÂ \n#include "MyGame.h"\n#include "CustomGameViewportClient.h"\nÂ \nvoid UCustomGameViewportClient::PostRender(UCanvas* Canvas)\n{\nSuper::PostRender(Canvas);\nÂ \n// Fade if requested, you could use the same DrawScreenFade method from any canvas such as the HUD\nif (bFading)\n{\nDrawScreenFade(Canvas);\n}\n}\nÂ \nvoid UCustomGameViewportClient::ClearFade()\n{\nbFading = false;\n}\nÂ \nvoid UCustomGameViewportClient::Fade(const float Duration, const bool bToBlack)\n{\nconst UWorld* World = GetWorld();\nif (World)\n{\nbFading = true;\nthis->bToBlack = bToBlack;\nFadeDuration = Duration;\nFadeStartTime = World->GetTimeSeconds();\n}\n}\nÂ \nvoid UCustomGameViewportClient::DrawScreenFade(UCanvas* Canvas)\n{\nif (bFading)\n{\nconst UWorld* World = GetWorld();\nif (World)\n{\nconst float Time = World->GetTimeSeconds();\nconst float Alpha = FMath::Clamp((Time - FadeStartTime) / FadeDuration, 0.f, 1.f);\nÂ \n// Make sure that we stay black in a fade to black\nif (Alpha == 1.f && !bToBlack)\n{\nbFading = false;\n}\nelse\n{\nFColor OldColor = Canvas->DrawColor;\nFLinearColor FadeColor = FLinearColor::Black;\nFadeColor.A = bToBlack ? Alpha : 1 - Alpha;\nCanvas->DrawColor = FadeColor.ToFColor(true); // TheJamsh: "4.10 cannot convert directly to FColor, so need to use FLinearColor::ToFColor()Â ðŸ˜ƒ\nCanvas->DrawTile(Canvas->DefaultTexture, 0, 0, Canvas->ClipX, Canvas->ClipY, 0, 0, Canvas->DefaultTexture->GetSizeX(), Canvas->DefaultTexture->GetSizeY());\nCanvas->DrawColor = OldColor;\n}\n}\n}\n}')]),e._v(" "),a("h3",{attrs:{id:"using-the-screen-fade"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-screen-fade"}},[e._v("#")]),e._v(" Using the screen fade")]),e._v(" "),a("p",[e._v("Using the fade logic from any "),a("em",[e._v("Actor")]),e._v(" is now just a matter of some simple lines:")]),e._v(" "),a("p",[e._v("const UWorld* World = GetWorld();\nif (World)\n{\nUCustomGameViewportClient* GameViewportClient = Cast<UCustomGameViewportClient>(World->GetGameViewport());\nif (GameViewportClient)\n{\nGameViewportClient->Fade(Duration, bToBlack);\n}\n}")]),e._v(" "),a("h3",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("Now we have a simple yet very effective way on doing a screen fade globally, it will cost you just the overhead of drawing a texture on screen and that's it. You can add more functionality to the whole thingy but the basics are all set.")]),e._v(" "),a("p",[e._v('Retrieved from "'),a("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Global_Fade_In_out&oldid=17043",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Global_Fade_In_out&oldid=17043"),a("OutboundLink")],1),e._v('"')]),e._v(" "),a("p",[a("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=o.exports}}]);