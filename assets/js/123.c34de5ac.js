(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{435:function(t,n,e){"use strict";e.r(n);var i=e(28),o=Object(i.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Bind keyboard and mouse input events dynamically - Epic Wiki")]),t._v(" "),e("h1",{attrs:{id:"bind-keyboard-and-mouse-input-events-dynamically"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind-keyboard-and-mouse-input-events-dynamically"}},[t._v("#")]),t._v(" Bind keyboard and mouse input events dynamically")]),t._v(" "),e("p",[t._v("Hi ,")]),t._v(" "),e("p",[t._v("In this tutorial I am going to show you how to bind your input axis and action events in runtime, as in most of today's game , we have the option of customizing keyboard input. So , here I am assuming that you have one datatable imported which contains the following columnsÂ :")]),t._v(" "),e("p",[t._v("1>Action 2>DefaultInput 3>Input")]),t._v(" "),e("p",[t._v("Action is the column which contains the event name , DefaultInput contains the default value the event is bound to(this column is useful only when you hit the RESET button in your key customization menu) , and Input column contains the current input value , which is the value user has saved most recently. You can modify this Input column in your widget class on key pressed event , however , that is a story for another day.")]),t._v(" "),e("p",[t._v("Lets move on to our playercharacter class. Include these three namespaces.")]),t._v(" "),e("ol",[e("li",[t._v('include "Runtime/Engine/Classes/GameFramework/PlayerInput.h"')]),t._v(" "),e("li",[t._v('include "Runtime/Engine/Classes/GameFramework/InputSettings.h"')]),t._v(" "),e("li",[t._v('include "Runtime/CoreUObject/Public/UObject/UObjectGlobals.h"')])]),t._v(" "),e("p",[t._v("Now in your constructor , initialize your datatable , whcih you have to define in the header file")]),t._v(" "),e("p",[t._v("static ConstructorHelpers::FObjectFinder"),e("UDataTable",[t._v(" KeyBoardBindingTable_BP(TEXT(\"DataTable'/Game/DataTables/KeyboardConfig.KeyboardConfig'\"));")])],1),t._v(" "),e("p",[t._v("KeyBoardBindingTable = KeyBoardBindingTable_BP.Object;")]),t._v(" "),e("p",[t._v("Now , in your SetupPlayerInputComponent method inside your playercharacter, add the following lines")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('check(InputComponent);\nconst UInputSettings\\* InputSettings = GetDefault<UInputSettings>();\nint rowindex = 1;\nwhile (true)\n{\n\tFKeyBoardBindingTable\\* LookUpRow = KeyBoardBindingTable->FindRow<FKeyBoardBindingTable>(FName(\\*FString::FromInt(rowindex)), TEXT("Look Up"));\n\tif (LookUpRow)\n\t{\n\t\tif (LookUpRow->Action == "Move Forward")\n\t\t{\n\t\t\tconst FInputAxisKeyMapping axismapping(FName("Move Forward"), FKey(FName(\\*LookUpRow->Input)), 1);\n\t\t\t((UInputSettings\\*)InputSettings)->AddAxisMapping(axismapping);\n\t\t}\n\t\telse if (LookUpRow->Action == "Move Backward")\n\t\t{\n\t\t\tconst FInputAxisKeyMapping axismapping(FName("Move Forward"), FKey(FName(\\*LookUpRow->Input)), -1);\n\t\t\t((UInputSettings\\*)InputSettings)->AddAxisMapping(axismapping);\n\n\t\t}\n\t\telse if (LookUpRow->Action == "Move Left")\n\t\t{\n\t\t\tconst FInputAxisKeyMapping axismapping(FName("Move Right"), FKey(FName(\\*LookUpRow->Input)), -1);\n\t\t\t((UInputSettings\\*)InputSettings)->AddAxisMapping(axismapping);\n\t\t}\n\t\telse if (LookUpRow->Action == "Move Right")\n\t\t{\n\t\t\tconst FInputAxisKeyMapping axismapping(FName("Move Right"), FKey(FName(\\*LookUpRow->Input)), 1);\n\t\t\t((UInputSettings\\*)InputSettings)->AddAxisMapping(axismapping);\n\t\t}\n\n\t\telse\n\t\t{\n\t\t\tconst FInputActionKeyMapping actionmapping(FName(\\*LookUpRow->Action), FKey(FName(\\*LookUpRow->Input)), false, false, false, false);\n\t\t\t((UInputSettings\\*)InputSettings)->AddActionMapping(actionmapping);\n\t\t}\n\t\trowindex++;\n\n\t}\n\telse\n\t{\n\t\tbreak;\n\t}\n}\n\nconst FInputAxisKeyMapping turnaxismapping(FName("Turn"), FKey(FName("MouseX")), 1);\n((UInputSettings\\*)InputSettings)->AddAxisMapping(turnaxismapping);\n\nconst FInputAxisKeyMapping lookupaxismapping(FName("LookUp"), FKey(FName("MouseY")), 1);\n((UInputSettings\\*)InputSettings)->AddAxisMapping(lookupaxismapping);\n\n((UInputSettings\\*)InputSettings)->SaveKeyMappings();\n\nInputComponent->BindAction("Jump", IE\\_Pressed, this, &ACharacter::Jump);\n\nInputComponent->BindAxis("Move Forward", this, &AForgottenLegionCharacter::MoveForward);\nInputComponent->BindAxis("Move Right", this, &AForgottenLegionCharacter::MoveRight);\nInputComponent->BindAxis("Turn", this, &APawn::AddControllerYawInput);\nInputComponent->BindAxis("LookUp", this, &APawn::AddControllerPitchInput);\n')])])]),e("p",[t._v('That\'s it. Now every time , you are going to hit "Play" in your editor , the input column will be read from your datatable and saved in your config file , which you can verify by going to Project Settings->Input section.')]),t._v(" "),e("p",[t._v("Enjoy.")]),t._v(" "),e("p",[t._v('Retrieved from "'),e("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Bind_keyboard_and_mouse_input_events_dynamically&oldid=14313",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://wiki.unrealengine.com/index.php?title=Bind_keyboard_and_mouse_input_events_dynamically&oldid=14313"),e("OutboundLink")],1),t._v('"')]),t._v(" "),e("p",[e("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[t._v("Categories")]),t._v(":")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[t._v("Code")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[t._v("Tutorials")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=o.exports}}]);