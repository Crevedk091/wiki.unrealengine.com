(window.webpackJsonp=window.webpackJsonp||[]).push([[1024],{1404:function(e,t,r){"use strict";r.r(t);var n=r(28),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Stereo Rendered VR Crosshair - Epic Wiki")]),e._v(" "),r("h1",{attrs:{id:"stereo-rendered-vr-crosshair"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stereo-rendered-vr-crosshair"}},[e._v("#")]),e._v(" Stereo Rendered VR Crosshair")]),e._v(" "),r("p",[r("strong",[e._v("Rate this Article:")])]),e._v(" "),r("p",[e._v("0.00")]),e._v(" "),r("p",[r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}})]),e._v(" "),r("p",[e._v("Approved for Versions:4.9, 4.10, 4.11")]),e._v(" "),r("p",[e._v("Original author: "),r("a",{attrs:{href:"https://twitter.com/HegiDev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Michael 'Hegi' Hegemann"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"contents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Code"}},[e._v("2 Code")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#VrCrosshairComponent.h"}},[e._v("2.1 VrCrosshairComponent.h")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#VrCrosshairComponent.cpp"}},[e._v("2.2 VrCrosshairComponent.cpp")])])])])]),e._v(" "),r("h1",{attrs:{id:"overview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),r("p",[e._v("Hello!")]),e._v(" "),r("p",[e._v("VR is now upon us and creating a proper 3D stereo crosshair that is always rendered correctly requires a bit more work than traditional 2D crosshairs. If the crosshair is rendered behind a surface, you get a cross-eyed image, that is why the crosshair always has to be ontop of the closest surface.")]),e._v(" "),r("p",[e._v("This code is compatible with all VR headsets. You may have to adjust some properties, though.")]),e._v(" "),r("p",[e._v("Here is the code for a component, that can be attached to the Pawn's first person camera. You can use any kind of static mesh as crosshair, for example a plane with an animated circle on it or a simple sphere.")]),e._v(" "),r("h1",{attrs:{id:"code"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[e._v("#")]),e._v(" Code")]),e._v(" "),r("p",[e._v("The properties are self-explanatory, except for these.")]),e._v(" "),r("p",[r("strong",[e._v("CrosshairScaleOffset :")]),e._v(" The multiplicator that is applied when the crosshair gets closer to the players view.")]),e._v(" "),r("p",[r("strong",[e._v("CrosshairConstSurfaceOffset :")]),e._v(" This offsets the crosshair towards the players view, it is recommended to change this value instead of disabling depth-test on the crosshair material.")]),e._v(" "),r("h3",{attrs:{id:"vrcrosshaircomponent-h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vrcrosshaircomponent-h"}},[e._v("#")]),e._v(" VrCrosshairComponent.h")]),e._v(" "),r("p",[e._v('#pragma once\n \n#include "GameFramework/Actor.h"\n#include "Components/StaticMeshComponent.h"\n#include "VrCrosshairComponent.generated.h"\n \nUCLASS(meta = (BlueprintSpawnableComponent), ClassGroup = Rendering)\nclass UVrCrosshairComponent : public UStaticMeshComponent\n{\nGENERATED_BODY()\n \nUVrCrosshairComponent();\n \nvirtual void OnRegister() override;\nvirtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;\n \npublic:\nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat CrosshairSize;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat CrosshairScreenDistance;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat CrosshairScaleOffset;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat CrosshairConstSurfaceOffset;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nfloat CrosshairMinDist;\n \nfloat SavedTraceDist;\n \nUPROPERTY(BlueprintReadOnly)\nFHitResult CrosshairHit;\n \nUPROPERTY(BlueprintReadOnly)\nbool bReturnHit;\n};')]),e._v(" "),r("h3",{attrs:{id:"vrcrosshaircomponent-cpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vrcrosshaircomponent-cpp"}},[e._v("#")]),e._v(" VrCrosshairComponent.cpp")]),e._v(" "),r("p",[e._v('#include "YOURGAME.h"\n \n#include "VrCrosshairComponent.h"\n#include "Kismet/KismetSystemLibrary.h"\n \nUVrCrosshairComponent::UVrCrosshairComponent()\n{\nPrimaryComponentTick.bCanEverTick = true;\nbTickInEditor = false;\nbAutoActivate = true;\n \nCrosshairScreenDistance = 1500.0;\nCrosshairSize = 0.15;\nCrosshairScaleOffset = 0.9;\nCrosshairConstSurfaceOffset = 1.0;\nCrosshairMinDist = 50.0;\n \nSavedTraceDist = CrosshairScreenDistance;\n}\n \nvoid UVrCrosshairComponent::OnRegister()\n{\nSuper::OnRegister();\n}\n \nvoid UVrCrosshairComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)\n{\nSuper::TickComponent(DeltaTime, TickType, ThisTickFunction);\n \nAPawn *VrPawn = Cast<APawn>(GetOwner());\n \n//Works only on pawn, parented by a camera\nif (VrPawn == NULL)\nreturn;\n \nFVector ViewPoint;\nFRotator ViewRotation;\nVrPawn->GetActorEyesViewPoint(ViewPoint, ViewRotation);\nViewRotation.Roll = 0;\n \nconst FVector Start = ViewPoint;\nconst FVector End = Start + ViewRotation.Vector() * CrosshairScreenDistance;\n \nFHitResult Hit;\nFCollisionQueryParams TraceParams(NAME_None, false, VrPawn);\n \nconst bool bHit = GetWorld()->LineTraceSingleByChannel(Hit, Start, End, ECC_Camera, TraceParams);\n \nfloat TraceDist;\n \nif (bHit)\n{\n//UE_LOG(LogTemp, Warning, TEXT("hit"))\nconst FVector TraceToStart = Hit.Location - Start;\nTraceDist = TraceToStart.Size();\n \n//Save the last known hit distance\nSavedTraceDist = TraceDist;\n}\nelse\n{\n//Set to the last known hit distance, otherwise it would just snap back too far\nTraceDist = SavedTraceDist;\n}\n \n//Output some values\nbReturnHit = bHit;\nCrosshairHit = Hit;\n \nconst float Distance = CrosshairScreenDistance;\n \nTraceDist = FMath::Clamp<float>(TraceDist, CrosshairMinDist, Distance);\n \n//Set Position\nconst float CrosshairPos = TraceDist - CrosshairConstSurfaceOffset;\nSetRelativeLocation(FVector(1, 0, 0) * CrosshairPos);\n \n//Set Scale\nconst float CrosshairDistScale = FMath::Min<float>(TraceDist * CrosshairScaleOffset / Distance, 1.0);\nconst float CrosshairScale = CrosshairDistScale * CrosshairSize;\nSetWorldScale3D(CrosshairScale * FVector(1,1,1));\n}')]),e._v(" "),r("p",[r("strong",[e._v("Afterthought:")]),e._v(" It would be possible to scale the crosshair with the vertex shader in a custom material, this might even provide a bit more accuracy in making it look like the crosshair is rendered in screen space. Another way would be to attach a billboard component to the crosshair. I have not tried these two ways yet.")]),e._v(" "),r("p",[r("strong",[e._v("In other notes:")]),e._v(" A while ago, John Carmack said that it would be optimal to use four raytraces for checking the crosshair against surfaces. "),r("a",{attrs:{href:"https://www.facebook.com/permalink.php?story_fbid=1717273305173846&id=100006735798590",target:"_blank",rel:"noopener noreferrer"}},[e._v("See here"),r("OutboundLink")],1),e._v(" . But for most cases one trace should be enough, another option would be to use a spherical trace with a very small radius.")]),e._v(" "),r("p",[e._v("Enjoy! If you have any improvements or suggestions, don't hesitate to edit this page.")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://wiki.unrealengine.com/User:HEGI",target:"_blank",rel:"noopener noreferrer"}},[e._v("HEGI"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v('Retrieved from "'),r("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Stereo_Rendered_VR_Crosshair&oldid=18425",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Stereo_Rendered_VR_Crosshair&oldid=18425"),r("OutboundLink")],1),e._v('"')]),e._v(" "),r("p",[r("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[e._v("Templates")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=a.exports}}]);