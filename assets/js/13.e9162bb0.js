(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{295:function(t,e,n){"use strict";n.r(e);var o=n(28),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("6DOF from Flying Template - Epic Wiki")]),t._v(" "),n("h1",{attrs:{id:"_6dof-from-flying-template"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6dof-from-flying-template"}},[t._v("#")]),t._v(" 6DOF from Flying Template")]),t._v(" "),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" "),n("strong",[t._v("Introduction")])]),t._v(" "),n("p",[t._v('This is a tutorial, on how to use the existing flying c++ template to create a 6DOF (six dimensions of freedom) first person game. Before you start, create a new project from the flying template, in this tutorial I\'ll be using the name "SDOF".')]),t._v(" "),n("h2",{attrs:{id:"getting-the-camera-right"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-the-camera-right"}},[t._v("#")]),t._v(" "),n("strong",[t._v("Getting the camera right")])]),t._v(" "),n("p",[t._v('Open up the c++ files "SDOFPawn.h" and "SDOFPawn.cpp". First, let\'s modify the viewpoint, so it\'s actually first person.')]),t._v(" "),n("p",[t._v("In the header file, find those pieces of code:")]),t._v(" "),n("p",[t._v('UPROPERTY(Category = Camera, VisibleDefaultsOnly, BlueprintReadOnly, meta = (AllowPrivateAccess = "true"))')]),t._v(" "),n("p",[t._v("class USpringArmComponent* SpringArm;")]),t._v(" "),n("p",[t._v("and")]),t._v(" "),n("p",[t._v("FORCEINLINE class USpringArmComponent* GetSpringArm() const { return SpringArm; }")]),t._v(" "),n("p",[t._v("and delete them. Because this is what is actually holding our camera in the position it is now.")]),t._v(" "),n("p",[t._v("After that, open the cpp file, and find the piece:")]),t._v(" "),n("p",[t._v("SpringArm = ObjectInitializer.CreateDefaultSubobject"),n("USpringArmComponent",[t._v('(this, TEXT("SpringArm0"));\nSpringArm->AttachTo(RootComponent);\nSpringArm->TargetArmLength = 160.0f; // The camera follows at this distance behind the character\t\nSpringArm->SocketOffset = FVector(0.f,0.f,60.f);\nSpringArm->bEnableCameraLag = false;\nSpringArm->CameraLagSpeed = 15.f;')])],1),t._v(" "),n("p",[t._v("delete it too.")]),t._v(" "),n("p",[t._v("Now we have to attach the camera to something, as we deleted the Spring Arm, so find the line:")]),t._v(" "),n("p",[t._v("Camera->AttachTo(SpringArm, USpringArmComponent::SocketName);")]),t._v(" "),n("p",[t._v("and change it to:")]),t._v(" "),n("p",[t._v("Camera->AttachTo(RootComponent);")]),t._v(" "),n("p",[t._v("Now you can compile it and you will be in first person view.")]),t._v(" "),n("h2",{attrs:{id:"making-it-actually-6dof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#making-it-actually-6dof"}},[t._v("#")]),t._v(" "),n("strong",[t._v("Making it actually 6DOF")])]),t._v(" "),n("p",[t._v("First we have to remove the force that is keeping us upright. To do that, find the function")]),t._v(" "),n("p",[t._v("void ASDOFPawn::MoveRightInput(float Val)")]),t._v(" "),n("p",[t._v("in the cpp file. And delete this part:")]),t._v(" "),n("p",[t._v("// Is there any left/right input?\nconst bool bIsTurning = FMath::Abs(Val) > 0.2f;\n// If turning, yaw value is used to influence roll\n// If not turning, roll to reverse current roll value\nfloat TargetRollSpeed = bIsTurning ? (CurrentYawSpeed * 0.5f) : (GetActorRotation().Roll * -2.f);\n// Smoothly interpolate roll speed\nCurrentRollSpeed = FMath::FInterpTo(CurrentRollSpeed, TargetRollSpeed, GetWorld()->GetDeltaSeconds(), 2.f);")]),t._v(" "),n("p",[t._v("Now we need to create a function that makes it possible to control rolling.")]),t._v(" "),n("p",[t._v("So open up the header file and after the line")]),t._v(" "),n("p",[t._v("void MoveRightInput(float Val);")]),t._v(" "),n("p",[t._v("add this line")]),t._v(" "),n("p",[t._v("void RollInput(float Val);")]),t._v(" "),n("p",[t._v("Then, open the cpp file ad at the end add this code:")]),t._v(" "),n("p",[t._v("void ASDOFPawn::RollInput(float Val)\n{\nfloat TargetRollSpeed = (Val * TurnSpeed);\nCurrentRollSpeed = FMath::FInterpTo(CurrentRollSpeed, TargetRollSpeed, GetWorld()->GetDeltaSeconds(), 2.f);\n}")]),t._v(" "),n("p",[t._v("This is actually the code from the MoveRightInput function, just slightly modified to influence roll instead of yaw.")]),t._v(" "),n("p",[t._v("Now we need to bind our Roll input axis to this function. So find the lines:")]),t._v(" "),n("p",[t._v('InputComponent->BindAxis("Thrust", this, &ASDOFPawn::ThrustInput);\nInputComponent->BindAxis("MoveUp", this, &ASDOFPawn::MoveUpInput);\nInputComponent->BindAxis("MoveRight", this, &ASDOFPawn::MoveRightInput);')]),t._v(" "),n("p",[t._v("and add this line after them:")]),t._v(" "),n("p",[t._v('InputComponent->BindAxis("Roll", this, &ASDOFPawn::RollInput);')]),t._v(" "),n("p",[t._v("Now compile the project.")]),t._v(" "),n("p",[t._v('That\'s it, now we have to change the config of our project so we have a way to input roll. Open the project in the unreal editor, and open the input config using Edit->Project Settings...->Input, add an axis mapping, name it "Roll" and add two keys to it. E and Q. Set E scale to 1, and Q scale to -1.')]),t._v(" "),n("p",[t._v("That's it!")]),t._v(" "),n("p",[t._v('Retrieved from "'),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=6DOF_from_Flying_Template&oldid=10483",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://wiki.unrealengine.com/index.php?title=6DOF_from_Flying_Template&oldid=10483"),n("OutboundLink")],1),t._v('"')]),t._v(" "),n("p",[n("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[t._v("Category")]),t._v(":")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[t._v("Tutorials")])])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);e.default=a.exports}}]);