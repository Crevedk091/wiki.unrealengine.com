(window.webpackJsonp=window.webpackJsonp||[]).push([[427],{817:function(e,n,t){"use strict";t.r(n);var o=t(28),i=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Custom Context Menu for Actors in Editor - Epic Wiki")]),e._v(" "),t("h1",{attrs:{id:"custom-context-menu-for-actors-in-editor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#custom-context-menu-for-actors-in-editor"}},[e._v("#")]),e._v(" Custom Context Menu for Actors in Editor")]),e._v(" "),t("h1",{attrs:{id:"description"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[e._v("#")]),e._v(" Description")]),e._v(" "),t("p",[e._v('This Wiki page will show you how to add a custom context menu for your Actors in the Unreal Editor. Here an example of a menu with a custom entry and tooltip when clicking on a custom Actor in the "Scene Outliner".')]),e._v(" "),t("p",[t("a",{attrs:{href:"/File:Custom_ContextMenu_01.png"}},[t("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/9/9c/Custom_ContextMenu_01.png",alt:""}})])]),e._v(" "),t("p",[t("a",{attrs:{href:"/File:Custom_ContextMenu_01.png",title:"Enlarge"}},[t("img",{attrs:{src:"/skins/common/images/magnify-clip.png",alt:""}})])]),e._v(" "),t("p",[e._v("An example image")]),e._v(" "),t("h2",{attrs:{id:"engine-code-changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#engine-code-changes"}},[e._v("#")]),e._v(" Engine Code changes")]),e._v(" "),t("p",[e._v("Some Engine code changes are required. I will probably submit a code pull request to Epic so they can add this code to the Engine, but for now you should be able to simply add this code by yourself. Its not too complicated.")]),e._v(" "),t("p",[e._v('First of all we need to add some code that allows us to insert menus into the existing context menu being filled in at engine level. For this purpose in "LevelEditorContextMenu.cpp" you need to add the following struct.')]),e._v(" "),t("p",[e._v("struct FLevelActorSpecificContextMenu\n{\n/**\n* Fills in menu options for custom menu entries that can be associated with that actor\n*\n* @param MenuBuilder\tThe menu to add items to\n* @param InCommandList\tThe container for all commands\n* @param InCommandList\tThe container for all selected actors\n*/\nstatic void AddActorSpecificMenu(class FMenuBuilder& MenuBuilder, const TSharedPtr< FUICommandList >& InCommandList, const TArray<AActor*>& SelectedActors);\n};")]),e._v(" "),t("p",[e._v("the function is implemented as follows")]),e._v(" "),t("p",[e._v("void FLevelActorSpecificContextMenu::AddActorSpecificMenu(class FMenuBuilder& MenuBuilder, const TSharedPtr< FUICommandList >& InCommandList, const TArray<AActor*>& SelectedActors)\n{\nfor (AActor* Actor : SelectedActors)\n{\nif (Actor)\n{\nActor->AddCustomMenuEntries(MenuBuilder, InCommandList);\n}\n}\n}")]),e._v(" "),t("p",[e._v("and we need to add the function call inside")]),e._v(" "),t("p",[e._v("void FLevelEditorContextMenu::FillMenu( FMenuBuilder& MenuBuilder, TWeakPtr<SLevelEditor> LevelEditor, LevelEditorMenuContext ContextType, TSharedPtr<FExtender> Extender )")]),e._v(" "),t("p",[e._v("at the end of the method you should now see something like this")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("FLevelScriptEventMenuHelper::FillLevelBlueprintEventsMenu(MenuBuilder, SelectedActors);\n")])])]),t("p",[e._v("FLevelActorSpecificContextMenu::AddActorSpecificMenu(MenuBuilder, LevelEditorActions, SelectedActors);\n \nMenuBuilder.PopCommandList();\nMenuBuilder.PopExtender();")]),e._v(" "),t("p",[e._v('Last but not least in Actor.h we need to add the virtual method for "AddCustomMenuEntries", like this')]),e._v(" "),t("p",[e._v("#if WITH_EDITOR\nclass FUICommandList;  // Forward declaration - editor only\n#endif")]),e._v(" "),t("p",[e._v("and add the method in one of the public places within the AActor class")]),e._v(" "),t("p",[e._v("#if WITH_EDITOR\n//Used to add a custom menu for custom actors\nvirtual void AddCustomMenuEntries(class FMenuBuilder& MenuBuilder, const TSharedPtr< FUICommandList >& InCommandList) { }\n#endif")]),e._v(" "),t("p",[e._v('one more ting that needs to be done is add a method to remove existing commands from the list of commands. In UICommandList.h you need to add this method declaration in the public scope of the "FUICommandList" class.')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("bool RemoveCommandAndAction(TSharedPtr<const FUICommandInfo\\> Command);\n")])])]),t("p",[e._v("and in the FUICommandInfo.cpp add the method implementation.")]),e._v(" "),t("p",[e._v("bool FUICommandList::RemoveCommandAndAction(TSharedPtr<const FUICommandInfo> Command)\n{\nconst FUIAction* Action = UICommandBindingMap.Find(Command);\nif (Action)\n{\nUICommandBindingMap.Remove(Command);\nreturn true;\n}\nreturn false;\n}")]),e._v(" "),t("p",[e._v("we are now done modifying the Unreal Engine - lets move on to our own Game code.")]),e._v(" "),t("h2",{attrs:{id:"game-code-changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#game-code-changes"}},[e._v("#")]),e._v(" Game code changes")]),e._v(" "),t("p",[e._v('First of all we need to define a new command class - something like this Create a new Header File called "MyEditorCommands.h"')]),e._v(" "),t("p",[e._v('#pragma once\n \n#if WITH_EDITOR\n#include "UnrealEd.h"\n#include "Commands.h"\n#include "UICommandList.h"\n#include "UICommandInfo.h"\n \nclass FMyEditorCommands : public TCommands < FMyEditorCommands >\n{\npublic:\nFMyEditorCommands();\n \nvirtual void RegisterCommands() override;\nstatic void MapActions(AActor* InActor, const TSharedPtr< FUICommandList >& InCommandList);\nstatic void AddToMenu(class FMenuBuilder& MenuBuilder);\n \nTSharedPtr< FUICommandInfo > SomeCommandData;   //you need one of these for each command you want to execute\n};\n#endif')]),e._v(" "),t("p",[e._v('create a cpp file called "MyEditorCommands.cpp"')]),e._v(" "),t("p",[e._v('#include "MyGameProject.h"\n#include "MyEditorCommands.h"\n#include "MyCustomActorObject.h"\n \n#if WITH_EDITOR\n \nFMyEditorCommands::FMyEditorCommands() :\nTCommands<FMyEditorCommands>(TEXT("MyEditorCommands"), NSLOCTEXT("MyEditor", "MyEditorCommands", "My-Editor"), NAME_None, FEditorStyle::GetStyleSetName())\n{\n \n}\n \nvoid FMyEditorCommands::RegisterCommands()\n{\nUI_COMMAND(SomeCommandData, "Do Some stuff", "Description of what my stuff is doing.", EUserInterfaceActionType::Button, FInputGesture());\n}\n \nvoid FMyEditorCommands::MapActions(AActor* InActor, const TSharedPtr< FUICommandList >& InCommandList)\n{\nRegister();\n \nAMyCustomActorObject* pMyObject = Cast<AMyCustomActorObject>(InActor);\n \nif (pMyObject)\n{\n \nInCommandList->RemoveCommandAndAction(Get().SomeCommandData);\n \nInCommandList->MapAction(\nGet().SomeCommandData,\nFExecuteAction::CreateUObject(pMyObject , &AMyCustomActorObject::MyNonStaticMethod));\n}\n}\n \nvoid FMyEditorCommands::AddToMenu(class FMenuBuilder& MenuBuilder)\n{\nMenuBuilder.BeginSection("MyCustomStuff", FText::FromString("MyCustomActor"));\n{\nMenuBuilder.AddMenuEntry(Get().SomeCommandData);\n}\nMenuBuilder.EndSection();\n}\n \n#endif')]),e._v(" "),t("p",[e._v("all that is left to do is implement and override the method in your custom actor class like this")]),e._v(" "),t("p",[e._v('//add these headers to your cpp file\n#if WITH_EDITOR\n#include "UnrealEd.h"\n#include "MultiBox.h"\n#include "Commands.h"\n#include "GlobalEditorCommonCommands.h"\n#include "UICommandList.h"\n#include "Private/Helpers/Tool/AWEditorCommands.h"\n#endif\n \n//and then add the implementation here\n \n#if WITH_EDITOR\nvoid AMyCustomActorObject::AddCustomMenuEntries(class FMenuBuilder& MenuBuilder, const TSharedPtr< FUICommandList >& InCommandList)\n{\nFMyEditorCommands::MapActions(this, InCommandList);\nFMyEditorCommands::AddToMenu(MenuBuilder);\n}\n#endif')]),e._v(" "),t("p",[e._v("That's it now you can implement as many context menu entries as you want for your custom objects. If we can get Epic to add the necessary code for the engine side then adding custom context menus is a piece of cake.")]),e._v(" "),t("p",[e._v('Retrieved from "'),t("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Custom_Context_Menu_for_Actors_in_Editor&oldid=10058",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Custom_Context_Menu_for_Actors_in_Editor&oldid=10058"),t("OutboundLink")],1),e._v('"')]),e._v(" "),t("p",[t("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);n.default=i.exports}}]);