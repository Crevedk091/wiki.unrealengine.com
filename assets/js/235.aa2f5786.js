(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{882:function(e,t,a){"use strict";a.r(t);var o=a(28),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Blueprint Node: Math Node - Epic Wiki")]),e._v(" "),a("h1",{attrs:{id:"blueprint-node-math-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blueprint-node-math-node"}},[e._v("#")]),e._v(" Blueprint Node: Math Node")]),e._v(" "),a("p",[a("strong",[e._v("Rate this Article:")])]),e._v(" "),a("p",[e._v("0.00")]),e._v(" "),a("p",[a("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),a("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}})]),e._v(" "),a("p",[e._v("Approved for Versions:(please verify)")]),e._v(" "),a("h2",{attrs:{id:"contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Random_Cone_vector"}},[e._v("2 Random Cone vector")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Radians"}},[e._v("2.1 Radians")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Degrees"}},[e._v("2.2 Degrees")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Angle_to_Angle"}},[e._v("3 Angle to Angle")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Degrees_to_Radians"}},[e._v("3.1 Degrees to Radians")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Radians_to_Degrees"}},[e._v("3.2 Radians to Degrees")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Is_Float_nearly_equal_to"}},[e._v("4 Is Float nearly equal to")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#IsNearlyEqual"}},[e._v("4.1 IsNearlyEqual")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#IsEqualZero"}},[e._v("4.2 IsEqualZero")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#IsPowerOfTwo"}},[e._v("5 IsPowerOfTwo")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#Full_code"}},[e._v("6 Full code")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Header"}},[e._v("6.1 Header")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#C.2B.2B"}},[e._v("6.2 C++")])])])])]),e._v(" "),a("h1",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("This is a node that exposes a couple of extra math functions to blueprints, which may be of use.")]),e._v(" "),a("p",[e._v('I\'ve detailed each node individually, explaining the node\'s inputs and its uses. I\'ve also put the full source at the bottom, which you can just copy and paste into a .h/.cpp file and compile directly. The only change that must be done is in the .cpp where it reads "#include "HyperPro.h"" - this must be changed to the project header, which is the name of your project - i.e if your project is called "MyAwesomeGame" then the header you want to use should be "MyAwesomeGame.h"')]),e._v(" "),a("p",[e._v("- "),a("a",{attrs:{href:"/User:G-Rath",title:"User:G-Rath"}},[e._v("G-Rath")]),e._v(" ("),a("a",{attrs:{href:"/User_talk:G-Rath",title:"User talk:G-Rath"}},[e._v("talk")]),e._v(")")]),e._v(" "),a("h1",{attrs:{id:"random-cone-vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#random-cone-vector"}},[e._v("#")]),e._v(" Random Cone vector")]),e._v(" "),a("p",[e._v("This node returns a random vector in the shape of a cone.")]),e._v(" "),a("p",[e._v("Note the bIsSquished - This is for if you have a cone thats not uniform. While HorizontalConeHalfAngleRad / HorizontalConeHalfAngleDeg has the word Horizontal in it, if bIsSquished is false then HorizontalConeHalfAngleRad /HorizontalConeHalfAngleDeg will be used for all axes.")]),e._v(" "),a("h2",{attrs:{id:"radians"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#radians"}},[e._v("#")]),e._v(" Radians")]),e._v(" "),a("p",[e._v("This version takes the angles as radians:")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_RanVCone_1.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/f/f5/BlueNode_RanVCone_1.jpg",alt:"BlueNode RanVCone 1.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Random VCone", CompactNodeTitle = "RanVCone", Keywords = "random vector cone radians"), Category = Math)\nstatic FVector VRandomConeFromRad(const FVector& Dir, float HorizontalConeHalfAngleRad, bool bIsSquished, float VerticalConeHalfAngleRad);')]),e._v(" "),a("h2",{attrs:{id:"degrees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#degrees"}},[e._v("#")]),e._v(" Degrees")]),e._v(" "),a("p",[e._v("This version takes the angles in degrees:")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_RanVConeDeg_1.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/b/bf/BlueNode_RanVConeDeg_1.jpg",alt:"BlueNode RanVConeDeg 1.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Random VCone From Degrees", CompactNodeTitle = "RanVConeDeg", Keywords = "random vector cone degrees"), Category = Math)\nstatic FVector VRandomConeFromDeg(const FVector& Dir, float HorizontalConeHalfAngleDeg, bool bIsSquished, float VerticalConeHalfAngleDeg);')]),e._v(" "),a("h1",{attrs:{id:"angle-to-angle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#angle-to-angle"}},[e._v("#")]),e._v(" Angle to Angle")]),e._v(" "),a("p",[e._v("This just converts from one angle type to another.")]),e._v(" "),a("h2",{attrs:{id:"degrees-to-radians"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#degrees-to-radians"}},[e._v("#")]),e._v(" Degrees to Radians")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_DegToRad_1.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/d/d8/BlueNode_DegToRad_1.jpg",alt:"BlueNode DegToRad 1.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Convert Degrees to Radians", CompactNodeTitle = "DegToRad", Keywords = "convert radians degrees"), Category = Math)\nstatic float FDegToRad(float AngleInDegrees);')]),e._v(" "),a("h2",{attrs:{id:"radians-to-degrees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#radians-to-degrees"}},[e._v("#")]),e._v(" Radians to Degrees")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_RadToDeg_1.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/e/ed/BlueNode_RadToDeg_1.jpg",alt:"BlueNode RadToDeg 1.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Convert Radians to Degrees", CompactNodeTitle = "RadToDeg", Keywords = "convert radians degrees"), Category = Math)\nstatic float FRadToDeg(float AngleInRadians);')]),e._v(" "),a("h1",{attrs:{id:"is-float-nearly-equal-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-float-nearly-equal-to"}},[e._v("#")]),e._v(" Is Float nearly equal to")]),e._v(" "),a("p",[e._v("These two nodes take a float and check if it equals zero or another number within range. This is very reason for eliminating what's known as machine epsilon.")]),e._v(" "),a("p",[e._v("Its an error caused by rounding when doing math with floating points and an issue I had when working with UDK + UnrealScript. If you add 0.004 enough times you'll get something like 0.x999 with x being the number of times you added -1. For me, in unrealscript it was normally about 4 times, so:")]),e._v(" "),a("p",[e._v("0.001+ 0.001 = 0.002")]),e._v(" "),a("p",[e._v("0.002+ 0.001 = 0.003")]),e._v(" "),a("p",[e._v("0.003+ 0.001 = 0.39999999999")]),e._v(" "),a("p",[e._v('This is a massive pain when doing things such as math animations or movement, where you compare if x == y. The computer will be comparing 0.00399999999 == 0.004 and thus return false. These two nodes are very useful for eliminating that, because you can do "Does X equal Y +- 1?". Note that machine epsilon can\'t be eliminated by rounding as you would lose decimal precision - You can use very careful rounding to eliminate the issue, but its easy to get confused and mix up your numbers. Thus this is a useful shortcut both in Blueprints and C++.')]),e._v(" "),a("h2",{attrs:{id:"isnearlyequal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnearlyequal"}},[e._v("#")]),e._v(" IsNearlyEqual")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_IsNear%3D_1.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/b/b8/BlueNode_IsNear%3D_1.jpg",alt:"BlueNode IsNear= 1.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Is float nearly equal", CompactNodeTitle = "IsNear=", Keywords = "nearly equal float"), Category = Math)\nstatic bool IsNearlyEqual(float A, float B, float ErrorTolerance);')]),e._v(" "),a("h2",{attrs:{id:"isequalzero"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isequalzero"}},[e._v("#")]),e._v(" IsEqualZero")]),e._v(" "),a("p",[e._v("This is the same, but it just compares to zero, instead of a given number.")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_IsNear0.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/c/cc/BlueNode_IsNear0.jpg",alt:"BlueNode IsNear0.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Is float nearly zero", CompactNodeTitle = "IsNear0", Keywords = "nearly zero float"), Category = Math)\nstatic bool IsNearlyZero(float Value, float ErrorTolerance);')]),e._v(" "),a("h1",{attrs:{id:"ispoweroftwo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ispoweroftwo"}},[e._v("#")]),e._v(" IsPowerOfTwo")]),e._v(" "),a("p",[e._v("This tells you quickly if a number is a power of two or not.")]),e._v(" "),a("p",[a("a",{attrs:{href:"/File:BlueNode_IsPowOf2_1.jpg"}},[a("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/0/05/BlueNode_IsPowOf2_1.jpg",alt:"BlueNode IsPowOf2 1.jpg"}})])]),e._v(" "),a("p",[e._v('UFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Is power of two", CompactNodeTitle = "IsPowOf2", Keywords = "is power two"), Category = Math)\nstatic bool IsPowerOfTwo(float Value);')]),e._v(" "),a("h1",{attrs:{id:"full-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#full-code"}},[e._v("#")]),e._v(" Full code")]),e._v(" "),a("h2",{attrs:{id:"header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[e._v("#")]),e._v(" Header")]),e._v(" "),a("p",[e._v('// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.\n \n#pragma once\n \n#include "EdGraph/EdGraphNode.h"\n#include "EdGraph/EdGraphSchema.h"\n#include "BlueprintMath.generated.h"\n \n/**\n* Created by Gareth "G-Rath" Jones, 06/04/2014L\n*/\nUCLASS()\nclass UBlueprintMath : public UEdGraphNode\n{\nGENERATED_UCLASS_BODY()\n \npublic:\n \n/*\n* Returns a random unit vector, uniformly distributed, within the specified cone.\n* HorizontalConeHalfAngleRad is the half-angle of cone, in radians.  Returns a normalized vector.\n*\n* If bIsSquished is true then it creates a random cone with different angle limits in the Y and Z axes.\n* Set by HorizontalConeHalfAngleRad and VerticalConeHalfAngleRad respectively\n*\tOtherwise only HorizontalConeHalfAngleRad is used.\n*\n* Assumes world Y and Z, although this could be extended to handle arbitrary rotations.\n*/\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Random VCone", CompactNodeTitle = "RanVCone", Keywords = "random vector cone radians"), Category = Math)\nstatic FVector VRandomConeFromRad(const FVector& Dir, float HorizontalConeHalfAngleRad, bool bIsSquished, float VerticalConeHalfAngleRad);\n \n/*\n* Returns a random unit vector, uniformly distributed, within the specified cone.\n* HorizontalConeHalfAngleDeg is the half-angle of cone, in degrees.  Returns a normalized vector.\n*\n* If bIsSquished is true then it creates a random cone with different angle limits in the Y and Z axes.\n* Set by HorizontalConeHalfAngleDeg and VerticalConeHalfAngleDeg respectively.\n*\tOtherwise only HorizontalConeHalfAngleDeg is used.\n*\n* Assumes world Y and Z, although this could be extended to handle arbitrary rotations.\n*/\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Random VCone From Degrees", CompactNodeTitle = "RanVConeDeg", Keywords = "random vector cone degrees"), Category = Math)\nstatic FVector VRandomConeFromDeg(const FVector& Dir, float HorizontalConeHalfAngleDeg, bool bIsSquished, float VerticalConeHalfAngleDeg);\n \n/** Convets a angle in degrees into radians */\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Convert Degrees to Radians", CompactNodeTitle = "DegToRad", Keywords = "convert radians degrees"), Category = Math)\nstatic float FDegToRad(float AngleInDegrees);\n \n/** Convets a angle in radians into degrees */\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Convert Radians to Degrees", CompactNodeTitle = "RadToDeg", Keywords = "convert radians degrees"), Category = Math)\nstatic float FRadToDeg(float AngleInRadians);\n \n/**\n*\tChecks if two floating point numbers are nearly equal.\n*\t@param A\t\t\t\tFirst number to compare\n*\t@param B\t\t\t\tSecond number to compare\n*\t@param ErrorTolerance\tMaximum allowed difference for considering them as \'nearly equal\'\n*\t@return\t\t\t\t\ttrue if A and B are nearly equal\n*/\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Is float nearly equal", CompactNodeTitle = "IsNear=", Keywords = "nearly equal float"), Category = Math)\nstatic bool IsNearlyEqual(float A, float B, float ErrorTolerance);\n \n/**\n*\tChecks if a floating point number is nearly zero.\n*\t@param Value\t\t\tNumber to compare\n*\t@param ErrorTolerance\tMaximum allowed difference for considering Value as \'nearly zero\'\n*\t@return\t\t\t\t\ttrue if Value is nearly zero\n*/\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Is float nearly zero", CompactNodeTitle = "IsNear0", Keywords = "nearly zero float"), Category = Math)\nstatic bool IsNearlyZero(float Value, float ErrorTolerance);\n \n/**\n*\tChecks whether a number is a power of two.\n*\t@param Value\tNumber to check\n*\t@return\t\t\ttrue if Value is a power of two\n*/\nUFUNCTION(BlueprintPure, meta = (HidePin = "WorldContextObject", DefaultToSelf = "WorldContextObject", FriendlyName = "Is power of two", CompactNodeTitle = "IsPowOf2", Keywords = "is power two"), Category = Math)\nstatic bool IsPowerOfTwo(float Value);\n \n};')]),e._v(" "),a("h2",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[e._v("#")]),e._v(" C++")]),e._v(" "),a("p",[e._v('// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.\n \n#include "HyperPro.h" //Change this to your project\'s header file (Its the file thats got the same name as your project and ends with .h)\n#include "UnrealMathVectorCommon.h"\n#include "BlueprintMath.h"\n \n#define SMALL_NUMBER\t\t(1.e-8f)\n \nUBlueprintMath::UBlueprintMath(const class FPostConstructInitializeProperties& PCIP)\n: Super(PCIP)\n{\n}\n \nFVector UBlueprintMath::VRandomConeFromRad(const FVector& Dir, float HorizontalConeHalfAngleRad, bool bIsSquished, float VerticalConeHalfAngleRad)\n{\nif (bIsSquished)\nreturn FMath::VRandCone(Dir, HorizontalConeHalfAngleRad, VerticalConeHalfAngleRad);\nelse\nreturn FMath::VRandCone(Dir, HorizontalConeHalfAngleRad);\n}\n \nFVector UBlueprintMath::VRandomConeFromDeg(const FVector& Dir, float HorizontalConeHalfAngleDeg, bool bIsSquished,  float VerticalConeHalfAngleDeg)\n{\nif (bIsSquished)\nreturn FMath::VRandCone(Dir, FMath::DegreesToRadians(HorizontalConeHalfAngleDeg), FMath::DegreesToRadians(VerticalConeHalfAngleDeg));\nelse\nreturn FMath::VRandCone(Dir, FMath::DegreesToRadians(HorizontalConeHalfAngleDeg));\n}\n \nfloat UBlueprintMath::FDegToRad(float AngleInDegrees)\n{\nreturn FMath::DegreesToRadians(AngleInDegrees);\n}\n \nfloat UBlueprintMath::FRadToDeg(float AngleInRadians)\n{\nreturn FMath::RadiansToDegrees(AngleInRadians);\n}\n \nbool UBlueprintMath::IsNearlyEqual(float A, float B, float ErrorTolerance = SMALL_NUMBER)\n{\nreturn FMath::IsNearlyEqual(A, B, ErrorTolerance);\n}\n \nbool UBlueprintMath::IsNearlyZero(float Value, float ErrorTolerence = SMALL_NUMBER)\n{\nreturn FMath::IsNearlyZero(Value, ErrorTolerence);\n}\n \nbool UBlueprintMath::IsPowerOfTwo(float Value)\n{\nreturn FMath::IsPowerOfTwo(Value);\n}')]),e._v(" "),a("p",[e._v('Retrieved from "'),a("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Blueprint_Node:_Math_Node&oldid=8231",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Blueprint_Node:_Math_Node&oldid=8231"),a("OutboundLink")],1),e._v('"')]),e._v(" "),a("p",[a("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Blueprint",title:"Category:Blueprint"}},[e._v("Blueprint")])]),e._v(" "),a("li",[a("a",{attrs:{href:"/Category:Community_Created_Content",title:"Category:Community Created Content"}},[e._v("Community Created Content")])])]),e._v(" "),a("p",[e._v("Hidden category:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[e._v("Templates")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);