(window.webpackJsonp=window.webpackJsonp||[]).push([[973],{373:function(e,a,r){"use strict";r.r(a);var t=r(28),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Save System, Read & Write Any Data to Compressed Binary Files - Epic Wiki")]),e._v(" "),r("h1",{attrs:{id:"save-system-read-write-any-data-to-compressed-binary-files"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#save-system-read-write-any-data-to-compressed-binary-files"}},[e._v("#")]),e._v(" Save System, Read & Write Any Data to Compressed Binary Files")]),e._v(" "),r("p",[r("strong",[e._v("Rate this Article:")])]),e._v(" "),r("p",[e._v("4.00")]),e._v(" "),r("p",[r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_on.gif",alt:""}}),r("img",{attrs:{src:"/extensions/VoteNY/images/star_off.gif",alt:""}}),e._v(" (12 votes)")]),e._v(" "),r("p",[e._v("Approved for Versions:(please verify)")]),e._v(" "),r("h2",{attrs:{id:"contents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Custom_Save_System_To_Binary_Files"}},[e._v("1 Custom Save System To Binary Files")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Pre-Summary"}},[e._v("1.1 Pre-Summary")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Two_Levels_of_Conversions"}},[e._v("1.2 Two Levels of Conversions")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Binary_Array_.3D_TArray.3Cuint8.3E"}},[e._v("1.2.1 Binary Array = TArray"),r("uint8")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"#Step_1:_Variable_Format_-.3E_Binary_Array"}},[e._v("1.2.2 Step 1: Variable Format -> Binary Array")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Step_2:_Binary_Array_-.3E_Hard_Disk"}},[e._v("1.2.3 Step 2: Binary Array -> Hard Disk")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Optional_Step_3:_Compressed_Binary"}},[e._v("1.2.4 Optional Step 3: Compressed Binary")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Core_Header_Files"}},[e._v("1.3 Core Header Files")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Archive.h_and_ArchiveBase.h"}},[e._v("1.3.1 Archive.h and ArchiveBase.h")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#FileManager.h"}},[e._v("1.3.2 FileManager.h")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#BufferArchive"}},[e._v("1.3.3 BufferArchive")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#FMemoryReader"}},[e._v("1.3.4 FMemoryReader")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#The_.3C.3C_Operator"}},[e._v("1.4 The << Operator")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Variable_-.3E_Binary"}},[e._v("1.4.1 Variable -> Binary")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Binary_-.3E_Variable"}},[e._v("1.4.2 Binary -> Variable")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#The_Hardest_Concept_of_UE4_C.2B.2B_Custom_Save_System"}},[e._v("1.5 The Hardest Concept of UE4 C++ Custom Save System")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Writing_Your_Function_to_Be_Two-Way"}},[e._v("1.5.1 Writing Your Function to Be Two-Way")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#The_order_of_how_you_write_out_data_to_binary_file_must_be_the_exact_order_that_you_read_it_back_in.21"}},[e._v("1.5.1.1 The order of how you write out data to binary file must be the exact order that you read it back in!")])])])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#"}},[e._v("1.6")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#SaveLoadData:_Two-Way_Save_System_Function"}},[e._v("1.7 SaveLoadData: Two-Way Save System Function")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Saving"}},[e._v("1.7.1 Saving")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Loading"}},[e._v("1.7.2 Loading")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Summary"}},[e._v("1.7.3 Summary")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#My_Binary_Save_System_Functions_For_You"}},[e._v("1.8 My Binary Save System Functions For You")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#Saving_Binary_Files"}},[e._v("1.8.1 Saving Binary Files")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Loading_Binary_Files"}},[e._v("1.8.2 Loading Binary Files")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Saving_Compressed"}},[e._v("1.8.3 Saving Compressed")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Loading_Compressed"}},[e._v("1.8.4 Loading Compressed")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#_2"}},[e._v("1.9")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Overloading_the_.3C.3C_Operator"}},[e._v("1.10 Overloading the << Operator")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Crashes.3F"}},[e._v("1.11 Crashes?")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#Enjoy.21"}},[e._v("1.12 Enjoy!")])])])])]),e._v(" "),r("h1",{attrs:{id:"custom-save-system-to-binary-files"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#custom-save-system-to-binary-files"}},[e._v("#")]),e._v(" Custom Save System To Binary Files")]),e._v(" "),r("p",[e._v("Original Author: "),r("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),r("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),r("p",[e._v("Dear Community,")]),e._v(" "),r("p",[r("strong",[e._v("Using what I explain in this tutorial you can write your own custom save systems wherein you")])]),e._v(" "),r("ul",[r("li",[e._v("write out literally any game-related data you want")]),e._v(" "),r("li",[e._v("read back in this data any time you want, from hard-disk")]),e._v(" "),r("li",[e._v("compress (ZLIB) these files to minimize usage of the end-user's computer hard disk space")])]),e._v(" "),r("p",[e._v("I've already been writing out and loading back in levels that are zipped binary data files for my in-game editor.")]),e._v(" "),r("p",[r("strong",[e._v("I am currently able to save literally any custom data I want, including dynamic arrays, for all my custom classes.")])]),e._v(" "),r("p",[e._v("I've developed a streamlined method for doing all this by overloading a specific UE4 C++ operator, so yay thank you thank you Epic for C++ access!")]),e._v(" "),r("h2",{attrs:{id:"pre-summary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pre-summary"}},[e._v("#")]),e._v(" Pre-Summary")]),e._v(" "),r("p",[e._v("There's a lot of concepts in this tutorial, try out each part and get it working before moving on to the next")]),e._v(" "),r("p",[e._v("Just copy-pasting code will not work here, you need to understand the basics, because all I am presenting is the basics,")]),e._v(" "),r("p",[e._v("and you must apply the basics to your own project's needs.")]),e._v(" "),r("p",[e._v("After all, this is about a save system for any arbitrary project-specific custom class dataÂ ðŸ˜ƒ")]),e._v(" "),r("h2",{attrs:{id:"two-levels-of-conversions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#two-levels-of-conversions"}},[e._v("#")]),e._v(" Two Levels of Conversions")]),e._v(" "),r("p",[e._v("When you want to save custom variable data for your custom save system,")]),e._v(" "),r("p",[e._v("there are TWO major steps involved")]),e._v(" "),r("p",[r("strong",[e._v("Step 1")]),e._v(" = variable format -> binary array (serialized by Archive class of UE4)")]),e._v(" "),r("p",[r("strong",[e._v("Step 2")]),e._v(" = Binary array -> hard disk")]),e._v(" "),r("p",[e._v("These steps are then done in reverse to read back in data from hard disk.")]),e._v(" "),r("h3",{attrs:{id:"binary-array-tarray"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#binary-array-tarray"}},[e._v("#")]),e._v(" Binary Array = TArray"),r("uint8")],1),e._v(" "),r("p",[e._v("Binary data is represented in a very UE4 C++ friendly looking way as a dynamic array of uint8.")]),e._v(" "),r("p",[e._v("So any time you see TArray"),r("uint8",[e._v(' in my code in this tutorial, that literally means "Binary Array" from UE4 C++ standpoint.')])],1),e._v(" "),r("h3",{attrs:{id:"step-1-variable-format-binary-array"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#step-1-variable-format-binary-array"}},[e._v("#")]),e._v(" Step 1: Variable Format -> Binary Array")]),e._v(" "),r("p",[e._v("An int32 takes up 4 bytes, as does a float.")]),e._v(" "),r("p",[e._v("An int64 takes up 8 bytes.")]),e._v(" "),r("p",[e._v("An FName takes up 8 bytes.")]),e._v(" "),r("p",[e._v("An FString takes up 16 bytes.")]),e._v(" "),r("p",[e._v("An FVector takes up 3 x float bytes.")]),e._v(" "),r("p",[e._v("etc.")]),e._v(" "),r("p",[e._v("So even a single int32 is actually an array of bytes, not a single entry.")]),e._v(" "),r("p",[e._v("Now let's suppose your save system needs to store")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("3 FVector's")])]),e._v(" "),r("li",[r("p",[e._v("40 int32's")])]),e._v(" "),r("li",[r("p",[e._v("20 FName's")])])]),e._v(" "),r("p",[e._v("Do all the math and this is a lot of bytes!")]),e._v(" "),r("p",[e._v("3 x 3 x 4 = 36")]),e._v(" "),r("p",[e._v("40 x 4 = 160")]),e._v(" "),r("p",[e._v("20 x 8 = 160")]),e._v(" "),r("p",[e._v("356")]),e._v(" "),r("p",[e._v("So this means that before your data leaves UE4 and goes to hard disk, you need a TArray"),r("uint8",[e._v(" that has 356 entries.")])],1),e._v(" "),r("h3",{attrs:{id:"step-2-binary-array-hard-disk"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#step-2-binary-array-hard-disk"}},[e._v("#")]),e._v(" Step 2: Binary Array -> Hard Disk")]),e._v(" "),r("p",[e._v("UE4 C++ gives you functions via FileManager.h to write out TArray"),r("uint8",[e._v(" to hard disk!")])],1),e._v(" "),r("h3",{attrs:{id:"optional-step-3-compressed-binary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#optional-step-3-compressed-binary"}},[e._v("#")]),e._v(" Optional Step 3: Compressed Binary")]),e._v(" "),r("p",[e._v("UE4 gives you functionality via Archive.h to compress a TArray"),r("uint8",[e._v(" before sending it to the FileManager")])],1),e._v(" "),r("p",[e._v("C++ Code For You")]),e._v(" "),r("p",[e._v("Below I am giving you the functions that I use to to read and write binary files of any custom data I choose")]),e._v(" "),r("h2",{attrs:{id:"core-header-files"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#core-header-files"}},[e._v("#")]),e._v(" Core Header Files")]),e._v(" "),r("h3",{attrs:{id:"archive-h-and-archivebase-h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#archive-h-and-archivebase-h"}},[e._v("#")]),e._v(" Archive.h and ArchiveBase.h")]),e._v(" "),r("p",[e._v("See Archive.h and ArchiveBase.h for all the info you need about getting from your varibles and custom class data to binary format (serialized data).")]),e._v(" "),r("h3",{attrs:{id:"filemanager-h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#filemanager-h"}},[e._v("#")]),e._v(" FileManager.h")]),e._v(" "),r("p",[e._v("All the functions you need to")]),e._v(" "),r("ul",[r("li",[e._v("create directories")]),e._v(" "),r("li",[e._v("delete directories")]),e._v(" "),r("li",[e._v("create files")]),e._v(" "),r("li",[e._v("delete files")]),e._v(" "),r("li",[e._v("get a listing of all files in a given path")]),e._v(" "),r("li",[e._v("get a listing of all folders in a given path")]),e._v(" "),r("li",[e._v("get the age of a file")])]),e._v(" "),r("p",[e._v("and more are found in FileManager.h")]),e._v(" "),r("p",[e._v("You access these functions from anywhere using")]),e._v(" "),r("p",[e._v("if(GFileManager) GFileManager->TheFunction()")]),e._v(" "),r("h3",{attrs:{id:"bufferarchive"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bufferarchive"}},[e._v("#")]),e._v(" BufferArchive")]),e._v(" "),r("p",[e._v("The buffer archive is both a binary array (TArray"),r("uint8",[e._v("), and a MemoryWriter")])],1),e._v(" "),r("p",[r("strong",[e._v("Archive.h")])]),e._v(" "),r("p",[e._v("/**\n* Buffer archiver.\n*/\nclass FBufferArchive : public FMemoryWriter, public TArray<uint8>\n{")]),e._v(" "),r("p",[e._v("Because of this multiple-inheritance, the BufferArchive is my preferred way to write data to binary file.")]),e._v(" "),r("p",[e._v("As my code will show, because the GFileManager wants to receive a TArray"),r("uint8",[e._v(", not a MemoryArchive.")])],1),e._v(" "),r("p",[e._v("Review my Steps 1 and 2 to see why this is such an awesome class.Â ðŸ˜ƒ")]),e._v(" "),r("p",[e._v("Thanks UE4 Devs!")]),e._v(" "),r("h3",{attrs:{id:"fmemoryreader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fmemoryreader"}},[e._v("#")]),e._v(" FMemoryReader")]),e._v(" "),r("p",[e._v("To read Data back from a binary array, that is retrieved by the FileManager, you need a MemoryReader")]),e._v(" "),r("p",[r("strong",[e._v("Archive.h")])]),e._v(" "),r("p",[e._v("/**\n* Archive for reading arbitrary data from the specified memory location\n*/\nclass FMemoryReader : public FMemoryArchive\n{\npublic:")]),e._v(" "),r("h2",{attrs:{id:"the-operator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-operator"}},[e._v("#")]),e._v(" The << Operator")]),e._v(" "),r("p",[e._v("The BufferArchive/Binary Array needs to retrieve your game's variable data, how do you tell it what you want stored as binary?")]),e._v(" "),r("p",[e._v("The << operator!")]),e._v(" "),r("h3",{attrs:{id:"variable-binary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#variable-binary"}},[e._v("#")]),e._v(" Variable -> Binary")]),e._v(" "),r("p",[e._v("Here's how you would put an FVector into a BufferArchive to then be saved to hard disk.")]),e._v(" "),r("p",[e._v("//in player controller class")]),e._v(" "),r("p",[e._v("FBufferArchive ToBinary;\nToBinary << GetPawn()->GetActorLocation(); //save player location to hard disk\nÂ \n//save ToBinary to hard disk using File Manager,\n//see complete code samples below")]),e._v(" "),r("h3",{attrs:{id:"binary-variable"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#binary-variable"}},[e._v("#")]),e._v(" Binary -> Variable")]),e._v(" "),r("p",[e._v("Here's how you would retrieve an FVector from a TArray"),r("uint8",[e._v(" as retrieved by GFileManager.")])],1),e._v(" "),r("p",[e._v("//TheBinaryArray was already obtained from FileManager,\n//see code below for full examples\nÂ \n//need to supply a variable to be filled with the data\nFVector ToBeFilledWithData;\nÂ \nFMemoryReader Ar = FMemoryReader(TheBinaryArray, true); //true, free data after done\nAr.Seek(0); //make sure we are at the beginning\nÂ \nAr << ToBeFilledWithData;")]),e._v(" "),r("h2",{attrs:{id:"the-hardest-concept-of-ue4-c-custom-save-system"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-hardest-concept-of-ue4-c-custom-save-system"}},[e._v("#")]),e._v(" The Hardest Concept of UE4 C++ Custom Save System")]),e._v(" "),r("p",[e._v("Compare these two lines")]),e._v(" "),r("p",[e._v("ToBinary << GetPawn()->GetActorLocation();\nAr << ToBeFilledWithData;")]),e._v(" "),r("p",[e._v("The hardest concept for me about the UE4 archive system was the fact that the << operator could mean")]),e._v(" "),r("p",[e._v("- getting data out of the archive and putting it into the variable")]),e._v(" "),r("p",[e._v("or")]),e._v(" "),r("p",[e._v("- putting data from the variable into the archived binary format")]),e._v(" "),r("p",[e._v("depending on the context!")]),e._v(" "),r("p",[e._v("So that's why I recommend you name your BufferArchive something like ToBinary,")]),e._v(" "),r("p",[e._v("and your MemoryReader something "),r("strong",[e._v("totally different")]),e._v(",")]),e._v(" "),r("p",[e._v("you can only discern the difference between writing to binary and reading from binary")]),e._v(" "),r("p",[e._v("based on the context as you show it in your code, as the << operator will tell you nothing from a simple glance.")]),e._v(" "),r("h3",{attrs:{id:"writing-your-function-to-be-two-way"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#writing-your-function-to-be-two-way"}},[e._v("#")]),e._v(" Writing Your Function to Be Two-Way")]),e._v(" "),r("p",[e._v("The critical advantage of this system though is that you can write a single function that works both ways.")]),e._v(" "),r("p",[e._v("So you can write a single function that loads data from file, or saves to file.")]),e._v(" "),r("p",[e._v("But why would you want this?")]),e._v(" "),r("p",[e._v("Because:")]),e._v(" "),r("h4",{attrs:{id:"the-order-of-how-you-write-out-data-to-binary-file-must-be-the-exact-order-that-you-read-it-back-in"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-order-of-how-you-write-out-data-to-binary-file-must-be-the-exact-order-that-you-read-it-back-in"}},[e._v("#")]),e._v(" The order of how you write out data to binary file must be the exact order that you read it back in!")]),e._v(" "),r("p",[e._v("The computer does not have any way of knowing, nor does UE4, what the correct order of variable data should be.")]),e._v(" "),r("p",[e._v("You are responsible for telling the computer and UE4 to read data back in in the same order it was written out to file.")]),e._v(" "),r("p",[e._v("Thus, having a single function that both reads and writes, using the multi-purpose << operator, is the safest thing you can do to ensure consistency of writing/reading binary data.")]),e._v(" "),r("h2",{attrs:{id:"saveloaddata-two-way-save-system-function"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#saveloaddata-two-way-save-system-function"}},[e._v("#")]),e._v(" SaveLoadData: Two-Way Save System Function")]),e._v(" "),r("p",[e._v("'''.h'''\nÂ \n//FArchive is shared base class for FBufferArchive and FMemoryReader\nvoid SaveLoadData(FArchive& Ar, int32& SaveDataInt32, FVector& SaveDataVector, TArray<FRotator>& SaveDataRotatorArray);\nÂ \n'''.cpp'''\nÂ \n//I am using controller class for convenience, use any class you want\nÂ \n//SaveLoadData\nvoid YourControllerClass::SaveLoadData(FArchive& Ar,\nint32& SaveDataInt32,\nFVector& SaveDataVector,\nTArray<FRotator>& SaveDataRotatorArray\n)\n{\nAr << SaveDataInt32;\nAr << SaveDataVector;\nAr << SaveDataRotatorArray;\n}")]),e._v(" "),r("h3",{attrs:{id:"saving"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#saving"}},[e._v("#")]),e._v(" Saving")]),e._v(" "),r("p",[e._v("Make a BufferArchive and pass it in, it is a Binary Array and also an FArchive")]),e._v(" "),r("p",[e._v("FBufferArchive ToBinary;\nSaveLoadData(ToBinary,NumGemsCollected,PlayerLocation,ArrayOfRotationsOfTheStars);\n//save the binary array / FBufferArchive to hard disk, see below")]),e._v(" "),r("h3",{attrs:{id:"loading"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#loading"}},[e._v("#")]),e._v(" Loading")]),e._v(" "),r("p",[e._v("// TheBinaryArray already retrieved from file, see full code sample\nFMemoryReader FromBinary = FMemoryReader(TheBinaryArray, true); //true, free data after done\nFromBinary.Seek(0);\nSaveLoadData(FromBinary,NumGemsCollected,PlayerLocation,ArrayOfRotationsOfTheStars);")]),e._v(" "),r("h3",{attrs:{id:"summary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),r("p",[e._v("Use this setup to avoid crashes due to reading data not in same order that you wrote it to disk!")]),e._v(" "),r("p",[e._v("this two way functionality of UE4 << operator saves the day!")]),e._v(" "),r("p",[e._v("Thanks Epic Devs!")]),e._v(" "),r("h2",{attrs:{id:"my-binary-save-system-functions-for-you"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#my-binary-save-system-functions-for-you"}},[e._v("#")]),e._v(" My Binary Save System Functions For You")]),e._v(" "),r("p",[e._v("Below I am giving you the functions that I use to save/load binary files!")]),e._v(" "),r("h3",{attrs:{id:"saving-binary-files"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#saving-binary-files"}},[e._v("#")]),e._v(" Saving Binary Files")]),e._v(" "),r("p",[e._v('bool ControllerClass::SaveGameDataToFile(const FString& FullFilePath, FBufferArchive& ToBinary)\n{\n//note that the supplied FString must be the entire Filepath\n// \tif writing it out yourself in C++ make sure to use the \\\\\n// \tfor example:\nÂ \n// \tFString SavePath = "C:\\\\MyProject\\\\MySaveDir\\\\mysavefile.save";\nÂ \n//Step 1: Variable Data -> Binary\nÂ \n//following along from above examples\nSaveLoadData(ToBinary,NumGemsCollected,PlayerLocation,ArrayOfRotationsOfTheStars);\n//presumed to be global var data,\n//could pass in the data too if you preferred\nÂ \n//No Data\nif(ToBinary.Num() <= 0) return false;\n//~\nÂ \n//Step 2: Binary to Hard Disk\nif (FFileHelper::SaveArrayToFile(ToBinary, * FullFilePath))\n{\n// Free Binary Array\nToBinary.FlushCache();\nToBinary.Empty();\nÂ \nClientMessage("Save Success!");\nreturn true;\n}\nÂ \n// Free Binary Array\nToBinary.FlushCache();\nToBinary.Empty();\nÂ \nClientMessage("File Could Not Be Saved!");\nÂ \nreturn false;\n}')]),e._v(" "),r("p",[e._v("FBufferArchive")]),e._v(" "),r("h3",{attrs:{id:"loading-binary-files"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#loading-binary-files"}},[e._v("#")]),e._v(" Loading Binary Files")]),e._v(" "),r("p",[e._v('//I am using the sample save data from above examples as the data being loaded\nbool ControllerClass::LoadGameDataFromFile(\nconst FString& FullFilePath,\nint32& SaveDataInt32,\nFVector& SaveDataVector,\nTArray<FRotator>& SaveDataRotatorArray\n){\n//Load the data array,\n// \tyou do not need to pre-initialize this array,\n//\t\tUE4 C++ is awesome and fills it\n//\t\twith whatever contents of file are,\n//\t\tand however many bytes that is\nTArray<uint8> TheBinaryArray;\nif (!FFileHelper::LoadFileToArray(TheBinaryArray, *FullFilePath))\n{\nClientMessage("FFILEHELPER:>> Invalid File");\nreturn false;\n//~~\n}\nÂ \n//Testing\nClientMessage("Loaded File Size");\nClientMessage(FString::FromInt(TheBinaryArray.Num()));\nÂ \n//File Load Error\nif(TheBinaryArray.Num() <= 0) return false;\nÂ \n//~\n//\t\t  Read the Data Retrieved by GFileManager\n//~\nÂ \nFMemoryReader FromBinary = FMemoryReader(TheBinaryArray, true); //true, free data after done\nFromBinary.Seek(0);\nSaveLoadData(FromBinary,NumGemsCollected,PlayerLocation,ArrayOfRotationsOfTheStars);\nÂ \n//~\n//\t\t\t\t\t\t\t\tClean up\n//~\nFromBinary.FlushCache();\nÂ \n// Empty & Close Buffer\nTheBinaryArray.Empty();\nFromBinary.Close();\nÂ \nreturn true;\n}')]),e._v(" "),r("h3",{attrs:{id:"saving-compressed"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#saving-compressed"}},[e._v("#")]),e._v(" Saving Compressed")]),e._v(" "),r("p",[e._v('bool ControllerClass::SaveGameDataToFileCompressed(const FString& FullFilePath,\nint32& SaveDataInt32,\nFVector& SaveDataVector,\nTArray<FRotator>& SaveDataRotatorArray\n){\nFBufferArchive ToBinary;\nSaveLoadData(ToBinary,NumGemsCollected,PlayerLocation,ArrayOfRotationsOfTheStars);\nÂ \n//Pre Compressed Size\nClientMessage("~ PreCompressed Size ~");\nClientMessage(FString::FromInt(ToBinary.Num()));\nÂ \n//\nÂ \n// Compress File\n//tmp compressed data array\nTArray<uint8> CompressedData;\nFArchiveSaveCompressedProxy Compressor =\nFArchiveSaveCompressedProxy(CompressedData, ECompressionFlags::COMPRESS_ZLIB);\nÂ \n//Send entire binary array/archive to compressor\nCompressor << ToBinary;\nÂ \n//send archive serialized data to binary array\nCompressor.Flush();\nÂ \n//\nÂ \n//Compressed Size\nClientMessage("~ Compressed Size ~");\nClientMessage(FString::FromInt(CompressedData.Num()));\nÂ \nÂ \nif (!GFileManager) return false;\nÂ \n//vibes to file, return successful or not\nif (FFileHelper::SaveArrayToFile(CompressedData, * FullFilePath))\n{\n// Free Binary Arrays\nCompressor.FlushCache();\nCompressedData.Empty();\nÂ \nToBinary.FlushCache();\nToBinary.Empty();\nÂ \n// Close Buffer\nToBinary.Close();\nÂ \nClientMessage("File Save Success!");\nÂ \nreturn true;\n//\n}\nelse\n{\n// Free Binary Arrays\nCompressor.FlushCache();\nCompressedData.Empty();\nÂ \nToBinary.FlushCache();\nToBinary.Empty();\nÂ \n// Close Buffer\nToBinary.Close();\nÂ \nClientMessage("File Could Not Be Saved!");\nÂ \nreturn false;\n//\n}\n}')]),e._v(" "),r("h3",{attrs:{id:"loading-compressed"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#loading-compressed"}},[e._v("#")]),e._v(" Loading Compressed")]),e._v(" "),r("p",[e._v('//I am using the sample save data from above examples as the data being loaded\nbool ControllerClass::LoadGameDataFromFileCompressed(\nconst FString& FullFilePath,\nint32& SaveDataInt32,\nFVector& SaveDataVector,\nTArray<FRotator>& SaveDataRotatorArray\n){\n//Load the Compressed data array\nTArray<uint8> CompressedData;\nif (!FFileHelper::LoadFileToArray(CompressedData, *FullFilePath))\n{\nOptimize("FFILEHELPER:>> Invalid File");\nreturn false;\n//~~\n}\nÂ \n// Decompress File\nFArchiveLoadCompressedProxy Decompressor =\nFArchiveLoadCompressedProxy(CompressedData, ECompressionFlags::COMPRESS_ZLIB);\nÂ \n//Decompression Error?\nif(Decompressor.GetError())\n{\nOptimize("FArchiveLoadCompressedProxy>> ERRORÂ : File Was Not Compressed ");\nreturn false;\n//\n}\nÂ \n//Decompress\nFBufferArchive DecompressedBinaryArray;\nDecompressor << DecompressedBinaryArray;\nÂ \n//~\n//\t\t  Read the Data Retrieved by GFileManager\n//~\nÂ \nFMemoryReader FromBinary = FMemoryReader(DecompressedBinaryArray, true); //true, free data after done\nFromBinary.Seek(0);\nSaveLoadData(FromBinary,NumGemsCollected,PlayerLocation,ArrayOfRotationsOfTheStars);\nÂ \n//~\n//\t\t\t\t\t\t\t\tClean up\n//~\nCompressedData.Empty();\nDecompressor.FlushCache();\nFromBinary.FlushCache();\nÂ \n// Empty & Close Buffer\nDecompressedBinaryArray.Empty();\nDecompressedBinaryArray.Close();\nÂ \nreturn true;\n}')]),e._v(" "),r("h2",{attrs:{id:"overloading-the-operator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#overloading-the-operator"}},[e._v("#")]),e._v(" Overloading the << Operator")]),e._v(" "),r("p",[e._v("Create your own << Operator overloads to simplify the process!")]),e._v(" "),r("p",[e._v("Let's say you have your own USTRUCT or your own class, and you want to write a way to")]),e._v(" "),r("p",[e._v("simply write")]),e._v(" "),r("p",[e._v("ToBinary << MyEntireSaveSystem;")]),e._v(" "),r("p",[e._v("or")]),e._v(" "),r("p",[e._v("ToBinary << MySpecialUStruct;")]),e._v(" "),r("p",[e._v("Here's how you overload the << Operator!")]),e._v(" "),r("p",[e._v("Please note this must be in the .h file, and no contents in the .cpp.")]),e._v(" "),r("p",[e._v("Also there is no context, such as MyClass::, it must be at the global level.")]),e._v(" "),r("p",[e._v("Also the .h file that has this definition must be compiled before any classes that want to use it.")]),e._v(" "),r("p",[e._v("You can use UClass(dependson=UYourDefinitionsClass) to ensure this")]),e._v(" "),r("p",[e._v("or simply put the .h contents in your public directory")]),e._v(" "),r("p",[e._v("and include them as a header somewhere.")]),e._v(" "),r("p",[r("strong",[e._v(".h")])]),e._v(" "),r("p",[e._v("//Make as many Unique Overloads as you want!\nFORCEINLINE FArchive& operator<<(FArchive &Ar, UMySaveGameClass* SaveGameData )\n{\nif(!SaveGameData) return Ar;\n//~\nÂ \nAr << SaveGameData->NumGemsCollected;  //int32\nAr << SaveGameData->PlayerLocation;  //FVector\nAr << SaveGameData->ArrayOfRotationsOfTheStars; //TArray"),r("FRotator",[e._v("\nÂ \nreturn Ar;\n}")])],1),e._v(" "),r("p",[r("strong",[e._v("Note:")])]),e._v(" "),r("p",[e._v("1. The operator is returning the Ar by reference.")]),e._v(" "),r("p",[e._v("2. No const are allowed at global level (its a compile error)")]),e._v(" "),r("p",[e._v("3. No const allowed inside because you dont know if you are reading or writing due to nature of << operator.")]),e._v(" "),r("h2",{attrs:{id:"crashes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#crashes"}},[e._v("#")]),e._v(" Crashes?")]),e._v(" "),r("p",[e._v("If you get crashes you are not reading/writing data in same order,")]),e._v(" "),r("p",[e._v("use overloaded << operator and the idea of a single function like SaveLoadGame to avoid this")]),e._v(" "),r("p",[e._v("Also, if you "),r("strong",[e._v("compress data before saving it")]),e._v(" make sure you are loading it using my "),r("strong",[e._v("compressed function")]),e._v(", not the regular one, and vice versaÂ ðŸ˜ƒ")]),e._v(" "),r("h2",{attrs:{id:"enjoy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#enjoy"}},[e._v("#")]),e._v(" Enjoy!")]),e._v(" "),r("p",[e._v("Have fun making your very own custom save game system, and saving it to compressed binary file!")]),e._v(" "),r("p",[e._v("â™¥")]),e._v(" "),r("p",[r("a",{attrs:{href:"/User:Rama",title:"User:Rama"}},[e._v("Rama")]),e._v(" ("),r("a",{attrs:{href:"/User_talk:Rama",title:"User talk:Rama"}},[e._v("talk")]),e._v(")")]),e._v(" "),r("p",[e._v('Retrieved from "'),r("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=Save_System,_Read_%26_Write_Any_Data_to_Compressed_Binary_Files&oldid=22381",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=Save_System,_Read_%26_Write_Any_Data_to_Compressed_Binary_Files&oldid=22381"),r("OutboundLink")],1),e._v('"')]),e._v(" "),r("p",[r("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Categories")]),e._v(":")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"/Category:Templates",title:"Category:Templates"}},[e._v("Templates")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Tutorials",title:"Category:Tutorials"}},[e._v("Tutorials")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])]),e._v(" "),r("li",[r("a",{attrs:{href:"/Category:Community_Created_Content",title:"Category:Community Created Content"}},[e._v("Community Created Content")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);a.default=n.exports}}]);