(window.webpackJsonp=window.webpackJsonp||[]).push([[559],{264:function(e,t,n){"use strict";n.r(t);var a=n(28),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("HUD: Unity 3D OnGUI Remake - Epic Wiki")]),e._v(" "),n("h1",{attrs:{id:"hud-unity-3d-ongui-remake"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hud-unity-3d-ongui-remake"}},[e._v("#")]),e._v(" HUD: Unity 3D OnGUI Remake")]),e._v(" "),n("h2",{attrs:{id:"contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Overview"}},[e._v("1 Overview")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Functions_Matching_Unity.27s_GUI_class"}},[e._v("1.1 Functions Matching Unity's GUI class")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Transparency"}},[e._v("1.2 Transparency")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Centering"}},[e._v("1.3 Centering")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Input"}},[e._v("1.4 Input")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Demos"}},[e._v("2 Demos")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Credit"}},[e._v("3 Credit")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Pre-requisites"}},[e._v("4 Pre-requisites")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Font"}},[e._v("4.1 Font")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Texture"}},[e._v("4.2 Texture")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Button_Material"}},[e._v("4.3 Button Material")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Animated_Button_Material"}},[e._v("4.4 Animated Button Material")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Slider_Background_Material"}},[e._v("4.5 Slider Background Material")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Slider_Button_Material"}},[e._v("4.6 Slider Button Material")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#C.2B.2B_Code"}},[e._v("5 C++ Code")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#HUDObjects.h"}},[e._v("5.1 HUDObjects.h")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#HUDObjects.cpp"}},[e._v("5.2 HUDObjects.cpp")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#GUI.h"}},[e._v("5.3 GUI.h")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#GUI.cpp"}},[e._v("5.4 GUI.cpp")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#YourHUD.h"}},[e._v("5.5 YourHUD.h")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#YourHUD.cpp"}},[e._v("5.6 YourHUD.cpp")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#BluePrint.2FEditor_End"}},[e._v("6 BluePrint/Editor End")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#Text_Section"}},[e._v("6.1 Text Section")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Buttons_Section"}},[e._v("6.2 Buttons Section")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Textures_Section"}},[e._v("6.3 Textures Section")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Materials_Section"}},[e._v("6.4 Materials Section")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Animations_Section"}},[e._v("6.5 Animations Section")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#Conclusion"}},[e._v("7 Conclusion")])])]),e._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[n("em",[e._v("Code Author:")]),e._v(" "),n("a",{attrs:{href:"https://forums.unrealengine.com/member.php?4329-Loken01",target:"_blank",rel:"noopener noreferrer"}},[e._v("Loken01"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("For a while I had taken a break from UDK and had been using Unity3D for a bit, and even though it will never quite match up with AutoDesk ScaleForm, I thought I'd give it a whirl at making a more simplistic HUD system for users.")]),e._v(" "),n("p",[e._v("The basics of AHUD I learnt from Rama's awesome tutorials! "),n("a",{attrs:{href:"/HUD,_Canvas,_Code_Sample_of_800%2B_Lines,_Create_Buttons_%26_Draw_Materials",title:"HUD, Canvas, Code Sample of 800+ Lines, Create Buttons & Draw Materials"}},[e._v("HUD, Canvas, Code Sample of 800+ Lines")])]),e._v(" "),n("p",[e._v("Everything in this is based on objects, so everything can handle it's own instance! Makes things super easy for us!")]),e._v(" "),n("h3",{attrs:{id:"functions-matching-unity-s-gui-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#functions-matching-unity-s-gui-class"}},[e._v("#")]),e._v(" Functions Matching Unity's GUI class")]),e._v(" "),n("ul",[n("li",[e._v("Labels")]),e._v(" "),n("li",[e._v("Textures")]),e._v(" "),n("li",[e._v("Materials")]),e._v(" "),n("li",[e._v("Animated Materials")]),e._v(" "),n("li",[e._v("Buttons")]),e._v(" "),n("li",[e._v("Animated Buttons")]),e._v(" "),n("li",[e._v("Horizontal Sliders")]),e._v(" "),n("li",[e._v("Vertical Sliders")]),e._v(" "),n("li",[e._v("Movable Windows (Coming soon)")])]),e._v(" "),n("h3",{attrs:{id:"transparency"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transparency"}},[e._v("#")]),e._v(" Transparency")]),e._v(" "),n("p",[e._v("Everything in this entire HUD system has full control over transparency. Materials are handled in the material editor. Textures work best if their LOD group is set to 'UI'.")]),e._v(" "),n("h3",{attrs:{id:"centering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#centering"}},[e._v("#")]),e._v(" Centering")]),e._v(" "),n("p",[e._v("I wanted to make sure everything could be scaled according to screen size so I made four functions:")]),e._v(" "),n("ul",[n("li",[e._v("Scale Width")]),e._v(" "),n("li",[e._v("Scale Height")]),e._v(" "),n("li",[e._v("Center Horizontal")]),e._v(" "),n("li",[e._v("Center Vertical")])]),e._v(" "),n("p",[e._v("These work based on getting the sizes from the Canvas, and then doing a check against the relative position of 1920x1080. It means no matter the screen size, everything will stay exactly the same relative to the edges of the screen.")]),e._v(" "),n("h3",{attrs:{id:"input"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[e._v("#")]),e._v(" Input")]),e._v(" "),n("p",[e._v("Currently the only form of input is the mouse. But you can use your PlayerController or Character class to bind other actions and simply tweak this code. My personal version works using the controller and simulating mouse movement, but I wanted to generalize as much as possible for this tutorial.")]),e._v(" "),n("h2",{attrs:{id:"demos"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demos"}},[e._v("#")]),e._v(" Demos")]),e._v(" "),n("p",[e._v("So I made a few gifs just to show what could be done in about 2-3 minutes with this HUD system!")]),e._v(" "),n("p",[e._v("Labels:")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:Label.png",title:"Label"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/0/06/Label.png",alt:"Label"}})])]),e._v(" "),n("p",[e._v("Buttons:")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:Button.gif",title:"Button"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/7/7a/Button.gif",alt:"Button"}})])]),e._v(" "),n("p",[e._v("Animated Buttons:")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:AnimatedButton.gif",title:"Animated Buttons"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/2/2e/AnimatedButton.gif",alt:"Animated Buttons"}})])]),e._v(" "),n("p",[e._v("Horizontal Sliders:")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:HorizontalSlider.gif",title:"Slider"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/2/23/HorizontalSlider.gif",alt:"Slider"}})])]),e._v(" "),n("p",[e._v("Vertical Sliders:")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:VerticalSlider.gif",title:"Slider"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/f/f0/VerticalSlider.gif",alt:"Slider"}})])]),e._v(" "),n("h2",{attrs:{id:"credit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#credit"}},[e._v("#")]),e._v(" Credit")]),e._v(" "),n("p",[e._v("Everything I learnt about the standard AHUD system came directly from Rama, so this is like an extension to his work")]),e._v(" "),n("p",[e._v("Apart from a few tiny bits here and there, (Rama's) almost all of this is my own creation.")]),e._v(" "),n("p",[e._v("Also a big thanks to "),n("a",{attrs:{href:"https://forums.unrealengine.com/member.php?10846-DroseGaming",target:"_blank",rel:"noopener noreferrer"}},[e._v("DroseGaming"),n("OutboundLink")],1),e._v(" for helping me with some bug issues!")]),e._v(" "),n("p",[n("strong",[e._v("Why Did I make this system?")])]),e._v(" "),n("p",[e._v("I wanted it to be easier to make an easy to use object based system that could be easily managed in memory, handle their own animations, etc dynamically, without cluttering up your HUD class.")]),e._v(" "),n("h2",{attrs:{id:"pre-requisites"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pre-requisites"}},[e._v("#")]),e._v(" Pre-requisites")]),e._v(" "),n("p",[e._v("As in Rama's tutorial, you need to have a few things:")]),e._v(" "),n("h3",{attrs:{id:"font"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#font"}},[e._v("#")]),e._v(" Font")]),e._v(" "),n("p",[e._v("Creat a font in your content browser. Right click, and make a new font, and give it a large default size. I tend to just stick it to the highest.")]),e._v(" "),n("h3",{attrs:{id:"texture"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#texture"}},[e._v("#")]),e._v(" Texture")]),e._v(" "),n("p",[e._v("Literally any texture would do.")]),e._v(" "),n("h3",{attrs:{id:"button-material"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#button-material"}},[e._v("#")]),e._v(" Button Material")]),e._v(" "),n("p",[e._v("Create a new material and set it to be Transparent and Unlit. You will need a button 'Up' and button 'Down' texture. You will need two parameters called 'Highlight' and 'Click'")]),e._v(" "),n("p",[e._v("And finally plug everything together like so:")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:ButtonMaterial.png",title:"Button Material Editor"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/4/42/ButtonMaterial.png",alt:"Button Material Editor"}})])]),e._v(" "),n("h3",{attrs:{id:"animated-button-material"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animated-button-material"}},[e._v("#")]),e._v(" Animated Button Material")]),e._v(" "),n("p",[e._v("This can be done exactly the same as above, but the textures would need to be in a sprite sheet like layout.")]),e._v(" "),n("h3",{attrs:{id:"slider-background-material"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slider-background-material"}},[e._v("#")]),e._v(" Slider Background Material")]),e._v(" "),n("p",[e._v("Create a material that is Transparent and Unlit. Only really needs the one texture.")]),e._v(" "),n("h3",{attrs:{id:"slider-button-material"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slider-button-material"}},[e._v("#")]),e._v(" Slider Button Material")]),e._v(" "),n("p",[e._v('For this you can simply use any "Button Material"')]),e._v(" "),n("h2",{attrs:{id:"c-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-code"}},[e._v("#")]),e._v(" C++ Code")]),e._v(" "),n("p",[e._v('The code below assumes you have created a new class named "YourHud". Although you can rename to whatever you want. Just clean up any references. Simply replace any references to "YourGame.h" to be whatever your game has been called.')]),e._v(" "),n("h3",{attrs:{id:"hudobjects-h"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hudobjects-h"}},[e._v("#")]),e._v(" HUDObjects.h")]),e._v(" "),n("p",[e._v("153 Lines")]),e._v(" "),n("p",[e._v('#pragma once\n \n#include "GameFramework/HUD.h"\n#include "HUDObjects.generated.h"\n \nUSTRUCT()\nstruct FShapeStruct\n{\nGENERATED_USTRUCT_BODY()\n \n//Vars\nfloat x;\nfloat y;\nfloat w;\nfloat h;\n \n//default properties\nFShapeStruct()\n{\nx = 0;\ny = 0;\nw = 0;\nh = 0;\n}\n};\n \nUCLASS()\nclass UHUDObjects : public UObject\n{\nGENERATED_UCLASS_BODY()\n \nprotected:\n//State handler\nbool IsButton;\n \n//Shape and positioning of this object\nFShapeStruct BGShapeAndPos;\n \n//Shape and positioning of this object\nFShapeStruct ShapeAndPos;\n \n//Background material reference\nUPROPERTY()\nUMaterialInterface* BackGround;\n \n//Slider background material reference\nUPROPERTY()\nUMaterialInterface* SliderBackGround;\n \n//Created material instance reference\nUPROPERTY()\nUMaterialInstanceDynamic* MIObj;\n \n//Created material instance for a slider background\nUPROPERTY()\nUMaterialInstanceDynamic* BGMIObj;\n \n//Name of the highlight parameter\nFString HighLightName;\n \n//Name of the click parameter\nFString ClickName;\n \n//Whether or not this has an animation\nbool bHasAnim;\n \n//Scale of the text\nfloat ScaleAmount;\n \n//Text\nFString Text;\n \n//Reference to the font used\nUPROPERTY()\nUFont* Font;\n \n//Animation\nFVector2D AnimTiling;\n//Number of tiles in total\nint NumTiles;\n//Time between frame updates\nfloat FrameUpdateDelay;\n//Current time taken from the last frame update\nfloat currentTime;\n \n//CurrentAnimTile\nint Tile;\nfloat MatU;\nfloat MatV;\nfloat MatUWidth;\nfloat MatVHeight;\n \nfloat CropU;\nfloat CropV;\nfloat CropX;\nfloat CropY;\n \nUPROPERTY()\nUTexture2D* Texture;\n \n//Functions\npublic:\n//State of button\nbool IsInside;\nbool bGrabbed;\n \n//If the passed position is within the screen bounds of this object\nbool Hovered();\n \n//Update and Draw depending on how the object was initialised\n//SHOULD BE CALLED WITH CARE\nvoid Update(AHUD* HUDRef, FVector2D MousePos, float x, float y, float w, float h, float Scale, FLinearColor TextColour = FLinearColor::White);\n \n//Draw the horizontal slider\nfloat DrawHorizontalSlider(AHUD* HUDRef, float Amount, float MinAmount, float MaxAmount, FVector2D MousePos, float x, float y, float w, float h, float Scale);\n \n//Draw the vertical slider\nfloat DrawVerticalSlider(AHUD* HUDRef, float Amount, float MinAmount, float MaxAmount, FVector2D MousePos, float x, float y, float w, float h, float Scale);\n \n//Check for click on slider BG\nbool CheckInsideSliderBG(FVector2D MousePos);\n \n//Draw the texture that this object was initialised with.\n//SHOULD BE CALLED WITH CARE\nvoid DrawTexture(AHUD* HUDRef, float x, float y, float w, float h, FColor pColour);\n \n//Crops the U/V sizes. 0=No crop, 1=MaxCrop\n//This will only work on Texture or Animation Objects\nvoid CropObjectUV(FVector2D UVCrop);\n \n//Crops the X/Y sizes. 0=No crop, 1=MaxCrop\n//This will only work on Texture or Animation Objects\nvoid CropObjectXY(FVector2D XYCrop);\n \n//Initialise this object with only Text\nvoid Init(FString pText, UFont* pFont);\n//Initialise this object with only a texture\nvoid Init(UTexture2D* pTexture);\n//Initialise this object with a highlightable material\nvoid Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName);\n//Initialise this object with a slider button and background\nvoid Init(bool pIsButton, UMaterialInterface* SliderMaterial, FString pHighLightName, FString pClickName, UMaterialInterface* BackgroundMaterial);\n//Initialise this object with a highlightable material with text\nvoid Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName, FString pText, UFont* pFont);\n//Initialise this object with a highlightable animated material\nvoid Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName, FVector2D pAnimTiling, int pNumTiles, float pFrameUpdateDelay);\n//Initialise this object with a highlightable animated material with text\nvoid Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName, FString pText, UFont* pFont, FVector2D pAnimTiling, int pNumTiles, float pFrameUpdateDelay);\n \nprotected:\nvoid UpdateAnim();\nvoid CheckInside(FVector2D MousePos);\n};')]),e._v(" "),n("h3",{attrs:{id:"hudobjects-cpp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hudobjects-cpp"}},[e._v("#")]),e._v(" HUDObjects.cpp")]),e._v(" "),n("p",[e._v("487 Lines")]),e._v(" "),n("p",[e._v("#include \"YourGame.h\"\n#include \"HUDObjects.h\"\n \nUHUDObjects::UHUDObjects(const class FPostConstructInitializeProperties& PCIP) : Super(PCIP)\n{}\n \nvoid UHUDObjects::Init(UTexture2D* pTexture)\n{\n//Pass the texture\nTexture = pTexture;\n}\n \nvoid UHUDObjects::Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName)\n{\n//Initialise global variables with passed parameters\nIsButton = pIsButton;\n \n//This material pointer is assigned as another pointer isn't it?\n//So how would I make is it's own dynamic instance?\nBackGround = BackgroundMaterial;\n \n//Set the highlight and click names\nHighLightName = pHighLightName;\nClickName = pClickName;\n \n//If the material exists\nif (BackGround != NULL)\n{\n//Create an instance of it\nMIObj = UMaterialInstanceDynamic::Create(BackGround->GetMaterial(), this);\n}//if\n}//Init\n \nvoid UHUDObjects::Init(bool pIsButton, UMaterialInterface* SliderMaterial, FString pHighLightName, FString pClickName, UMaterialInterface* BackgroundMaterial)\n{\n//pass vars\nInit(pIsButton, SliderMaterial, pHighLightName, pClickName);\n//set slider background\nSliderBackGround = BackgroundMaterial;\n \n//if it exists\nif (SliderBackGround != NULL)\n{\n//create an instance of it\nBGMIObj = UMaterialInstanceDynamic::Create(SliderBackGround->GetMaterial(), this);\n}//if\n}//Init\n \nvoid UHUDObjects::Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName, FVector2D pAnimTiling, int pNumTiles, float pFrameUpdateDelay)\n{\n//pass vars\nInit(pIsButton, BackgroundMaterial, pHighLightName, pClickName);\n \n//set anim tilings\nAnimTiling = pAnimTiling;\n//set number of anim tiles\nNumTiles = pNumTiles;\n//set that we have an anim\nbHasAnim = true;\n//set up frame delay\nFrameUpdateDelay = pFrameUpdateDelay;\n//set current time to the max\ncurrentTime = FrameUpdateDelay;\n//set current tile to 0\nTile = 0;\n//calculate the u width of the material\nMatUWidth = 1 / AnimTiling.X;\n//calculate the v width of the material\nMatVHeight = 1 / AnimTiling.Y;\n}//Init\n \nvoid UHUDObjects::Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName, FString pText, UFont* pFont, FVector2D pAnimTiling, int pNumTiles, float pFrameUpdateDelay)\n{\n//pass vars\nInit(pIsButton, BackgroundMaterial, pHighLightName, pClickName, pAnimTiling, pNumTiles, pFrameUpdateDelay);\n \n//set text\nText = pText;\n//set font\nFont = pFont;\n}//Init\n \nvoid UHUDObjects::Init(FString pText, UFont* pFont)\n{\n//Initialise global variables with passed parameters\nIsButton = false;\nText = pText;\nFont = pFont;\n}//Init\n \nvoid UHUDObjects::Init(bool pIsButton, UMaterialInterface* BackgroundMaterial, FString pHighLightName, FString pClickName, FString pText, UFont* pFont)\n{\n//pass vars\nInit(pIsButton, BackgroundMaterial, pHighLightName, pClickName);\n//Set text\nText = pText;\n//Set font\nFont = pFont;\n}//Init\n \nvoid UHUDObjects::CheckInside(FVector2D MousePos)\n{\n//If within the X area\nif (MousePos.X > ShapeAndPos.x && MousePos.X < ShapeAndPos.x + ShapeAndPos.w)\n{\n//If within the Y area\nif (MousePos.Y > ShapeAndPos.y && MousePos.Y < ShapeAndPos.y + ShapeAndPos.h)\n{\n//Mouse is inside\nIsInside = true;\n}//if\nelse\n{\n//Mouse is not inside\nIsInside = false;\n}//else\n}//if\nelse\n{\n//Mouse is not inside\nIsInside = false;\n}//else\n \n//If the material instance exists and the highlight name exists\nif (MIObj != NULL && IsButton && HighLightName.Len() > 0)\n{\n//Set up var\nfloat TmpVar;\n//Get highlight value, to be sure it exists\nif (MIObj->GetScalarParameterValue(FName(*HighLightName), TmpVar))\n{\n//if we are inside\nif (IsInside)\n{\n//set it to 1\nMIObj->SetScalarParameterValue(FName(*HighLightName), 1);\n}//if\nelse\n{\n//otherwise set it to 0\nMIObj->SetScalarParameterValue(FName(*HighLightName), 0);\n}//else\n}//if\n}//if\n \n//If the material instance exists and the click name exists\nif (MIObj != NULL && IsButton && ClickName.Len() > 0)\n{\n//Set up var\nfloat TmpVar;\n//Get click value, to be sure it exists\nif (MIObj->GetScalarParameterValue(FName(*ClickName), TmpVar))\n{\n//if it has been grabbed\nif (bGrabbed)\n{\n//set it to 1\nMIObj->SetScalarParameterValue(FName(*ClickName), 1);\n}//if\nelse\n{\n//otherwise set it to 0\nMIObj->SetScalarParameterValue(FName(*ClickName), 0);\n}//else\n}//if\n}//if\n \n}//CheckInside\n \nbool UHUDObjects::CheckInsideSliderBG(FVector2D MousePos)\n{\n//If within the X area\nif (MousePos.X > BGShapeAndPos.x && MousePos.X < BGShapeAndPos.x + BGShapeAndPos.w)\n{\n//If within the Y area\nif (MousePos.Y >(BGShapeAndPos.y - BGShapeAndPos.h) && MousePos.Y < BGShapeAndPos.y + (BGShapeAndPos.h * 2))\n{\n//Mouse is inside\nreturn true;\n}//if\nelse\n{\n//Mouse is not inside\nreturn false;\n}//else\n}//if\nelse\n{\n//Mouse is not inside\nreturn false;\n}//else\n}\n \nbool UHUDObjects::Hovered()\n{\nreturn IsInside;\n}//Hovered\n \nvoid UHUDObjects::UpdateAnim()\n{\n//if the time is greater than 0\nif (currentTime > 0)\n{\n//decrement it\ncurrentTime -= 0.01f;\n}//if\nelse\n{\n//otherwise reset it\ncurrentTime = FrameUpdateDelay;\n \n//if the current tile is less than the max number of tiles\nif (Tile < (NumTiles - 1))\n{\n//increment it\nTile += 1;\n \n//increment the u position\nMatU += MatUWidth;\n \n//if the u position is now equal to or greater than 1\nif (MatU >= 1)\n{\n//reset it to 0\nMatU = 0;\n \n//increment the v position\nMatV += MatVHeight;\n \n//if the v position is now equal to or greater than 1\nif (MatV >= 1)\n{\n//reset it\nMatV = 0;\n}//if\n}//if\n}//if\nelse\n{\n//otherwise reset everything\nTile = 0;\nMatU = 0;\nMatV = 0;\n}//else\n}//else\n}//UpdateAnim\n \nvoid UHUDObjects::Update(AHUD* HUDRef, FVector2D MousePos, float x, float y, float w, float h, float Scale, FLinearColor TextColour)\n{\n//Set vars\nShapeAndPos.x = x;\nShapeAndPos.y = y;\nShapeAndPos.w = w;\nShapeAndPos.h = h;\nScaleAmount = Scale;\n \n//Check if the mouse is inside the object\nCheckInside(MousePos);\n \n//If the BG material reference  isn't null, and the passed HUD isn't null\nif (HUDRef != NULL)\n{\nif (MIObj != NULL)\n{\n//if this is an animation\nif (bHasAnim)\n{\n//Update the animation\nUpdateAnim();\n \nHUDRef->DrawMaterial(MIObj,\nShapeAndPos.x, ShapeAndPos.y,\t\t\t\t\t\t\t\t//X and Y\nShapeAndPos.w - (ShapeAndPos.w * CropX),\t\t\t\t\t//Width Minus cropped percentage\nShapeAndPos.h - (ShapeAndPos.h * CropY),\t\t\t\t\t//Height Minus cropped percentage\nMatU + (MatUWidth * CropX),\t\t\t\t\t\t\t\t\t//U start plus percentage of U Width\nMatV + (MatVHeight * CropY),\t\t\t\t\t\t\t\t//V start plus percentage of V Height\n(MatUWidth * (1 - CropU)) - (MatUWidth * CropX),\t\t\t//Width is percentage of cropped U,\n(MatVHeight * (1 - CropV)) - (MatVHeight * CropY),\t\t\t//Height is percentage of cropped V,\n1, false);\t\t\t\t\t\t\t\t\t\t\t\t\t//Other bits\n}//if\nelse\n{\n//Draw the material as assigned\nHUDRef->DrawMaterialSimple(MIObj, ShapeAndPos.x, ShapeAndPos.y, ShapeAndPos.w, ShapeAndPos.h, 1, false);\n}//else\n}//If\n \n//if the text isn't empty\nif (!Text.IsEmpty())\n{\n//if the font exists\nif (Font != NULL)\n{\n//Get the font text size\nfloat tWidth, tHeight;\nHUDRef->GetTextSize(Text, tWidth, tHeight, Font, ScaleAmount);\n \n//Calculate spaceing around the text inside the button\nfloat newX = (ShapeAndPos.w - tWidth) / 2;\nfloat newY = (ShapeAndPos.h - tHeight) / 2;\n \n//Draw text and adjust for center\nHUDRef->DrawText(Text, TextColour, ShapeAndPos.x + newX, ShapeAndPos.y + newY, Font, ScaleAmount, false);\n}//if\n}//if\n}//if\n \n}//Update\n \nfloat UHUDObjects::DrawHorizontalSlider(AHUD* HUDRef, float Amount, float MinAmount, float MaxAmount, FVector2D MousePos, float x, float y, float w, float h, float Scale)\n{\n//Set vars\nBGShapeAndPos.x = x;\nBGShapeAndPos.y = y;\nBGShapeAndPos.w = w;\nBGShapeAndPos.h = h;\nScaleAmount = Scale;\n \n//Work out how much to extend the slider to make it fit correctly\nfloat BGWidener = BGShapeAndPos.w * 0.08f;\n//If the BG material reference  isn't null, and the passed HUD isn't null\nif (HUDRef != NULL)\n{\nif (BGMIObj != NULL)\n{\n//Draw the material as assigned\nHUDRef->DrawMaterialSimple(BGMIObj, BGShapeAndPos.x - BGWidener, BGShapeAndPos.y, BGShapeAndPos.w + (BGWidener * 2), BGShapeAndPos.h, 1, false);\n}//if\n}//if\n \n//Get a percentage between 0-1\nfloat PercentageAlong = Amount / (MaxAmount - MinAmount);\n \n//Work out the size/position of the slider, based off of the total size\nShapeAndPos.w = BGShapeAndPos.w*0.05f;\nShapeAndPos.x = (BGShapeAndPos.x + (BGShapeAndPos.w * PercentageAlong)) - (ShapeAndPos.w/2);\nShapeAndPos.h = BGShapeAndPos.h * 2.5f;\nShapeAndPos.y = BGShapeAndPos.y - ((ShapeAndPos.h - BGShapeAndPos.h)/2);\n \n//Check if the mouse is inside the object\nCheckInside(MousePos);\n \n//if the object has been grabbed\nif (bGrabbed)\n{\n//then we are inside\nIsInside = true;\n \n//calculate slider ranges\nfloat Left = (BGShapeAndPos.x + (BGShapeAndPos.w * 0)) - (ShapeAndPos.w / 2);\nfloat Right = (BGShapeAndPos.x + (BGShapeAndPos.w * 1)) - (ShapeAndPos.w / 2);\n \n//Update the object to match the mouse pos\nShapeAndPos.x = (MousePos.X) - (ShapeAndPos.w / 2);\n//Clamp within ranges\nShapeAndPos.x = FMath::Clamp<float>(ShapeAndPos.x, Left, Right);\n \n//work out the new percentage to return\nPercentageAlong = ((ShapeAndPos.x - BGShapeAndPos.x) + (ShapeAndPos.w / 2)) / BGShapeAndPos.w;\n \n//Calculate the amount to return\nAmount = MaxAmount * PercentageAlong;\n//Clamp again just to be sure\nAmount = FMath::Clamp<float>(Amount, MinAmount, MaxAmount);\n}//if\n \n//If the BG material reference  isn't null, and the passed HUD isn't null\nif (HUDRef != NULL)\n{\nif (MIObj != NULL)\n{\n//Draw the material as assigned\nHUDRef->DrawMaterialSimple(MIObj, ShapeAndPos.x, ShapeAndPos.y, ShapeAndPos.w, ShapeAndPos.h, 1, false);\n}//if\n}//if\nreturn Amount;\n}//DrawHorizontalSlider\n \nfloat UHUDObjects::DrawVerticalSlider(AHUD* HUDRef, float Amount, float MinAmount, float MaxAmount, FVector2D MousePos, float x, float y, float w, float h, float Scale)\n{\n//Set vars\nBGShapeAndPos.x = x;\nBGShapeAndPos.y = y;\nBGShapeAndPos.w = w;\nBGShapeAndPos.h = h;\nScaleAmount = Scale;\n \n//Work out how much to extend the slider to make it fit correctly\nfloat BGHeightAdd = BGShapeAndPos.h * 0.08f;\n//If the BG material reference  isn't null, and the passed HUD isn't null\nif (HUDRef != NULL)\n{\nif (BGMIObj != NULL)\n{\n//Draw the material as assigned\nHUDRef->DrawMaterialSimple(BGMIObj, BGShapeAndPos.x, BGShapeAndPos.y - BGHeightAdd, BGShapeAndPos.w, BGShapeAndPos.h + (BGHeightAdd * 2), 1, false);\n}//if\n}//if\n \n//Get a percentage between 0-1\nfloat PercentageAlong = Amount / (MaxAmount - MinAmount);\n \n//Inverting\nPercentageAlong = 1 - PercentageAlong;\n \n//Work out the size/position of the slider, based off of the total size\nShapeAndPos.h = BGShapeAndPos.h*0.05f;\nShapeAndPos.y = (BGShapeAndPos.y + (BGShapeAndPos.h * PercentageAlong)) - (ShapeAndPos.h / 2);\nShapeAndPos.w = BGShapeAndPos.w * 2.5f;\nShapeAndPos.x = BGShapeAndPos.x - ((ShapeAndPos.w - BGShapeAndPos.w) / 2);\n \n//Check if the mouse is inside the object\nCheckInside(MousePos);\n \n//if the object has been grabbed\nif (bGrabbed)\n{\n//then we are inside the button\nIsInside = true;\n \n//Work out the ranges the slider can meet\nfloat Top = (BGShapeAndPos.y + (BGShapeAndPos.h * 0)) - (ShapeAndPos.h / 2);\nfloat Bottom = (BGShapeAndPos.y + (BGShapeAndPos.h * 1)) - (ShapeAndPos.h / 2);\n \n//Update the object to match the mouse pos\nShapeAndPos.y = (MousePos.Y) - (ShapeAndPos.h / 2);\n//Clamp within ranges\nShapeAndPos.y = FMath::Clamp<float>(ShapeAndPos.y, Top, Bottom);\n \n//Work out the percentage to return\nPercentageAlong = ((ShapeAndPos.y - BGShapeAndPos.y) + (ShapeAndPos.h / 2)) / BGShapeAndPos.h;\n \n//Inverting\nPercentageAlong = 1 - PercentageAlong;\n \n//Calculate the amount\nAmount = MaxAmount * PercentageAlong;\n//Clamp it just to be sure\nAmount = FMath::Clamp<float>(Amount, MinAmount, MaxAmount);\n}//if\n \n//If the BG material reference  isn't null, and the passed HUD isn't null\nif (HUDRef != NULL)\n{\nif (MIObj != NULL)\n{\n//Draw the material as assigned\nHUDRef->DrawMaterialSimple(MIObj, ShapeAndPos.x, ShapeAndPos.y, ShapeAndPos.w, ShapeAndPos.h, 1, false);\n}//if\n}//if\nreturn Amount;\n}//DrawVerticalSlider\n \nvoid UHUDObjects::DrawTexture(AHUD* HUDRef, float x, float y, float w, float h, FColor pColour)\n{\n//if the hud exists\nif (HUDRef != NULL)\n{\n//if the texture exists\nif (Texture != NULL)\n{\n//Draw the texture\nHUDRef->DrawTexture(Texture, x, y,\nw - (w * CropX),\nh - (h * CropY),\n0 + CropX,\n0 + CropY,\n(1 - CropU) + CropX,\n(1 - CropV) + CropY,\npColour);\n}//if\n}//if\n}\n \nvoid UHUDObjects::CropObjectUV(FVector2D UVCrop)\n{\n//Pass in vars within clamped ranges\nCropU = FMath::Clamp<float>(UVCrop.X, 0, 1);\nCropV = FMath::Clamp<float>(UVCrop.Y, 0, 1);\n}//CropObjectUV\n \nvoid UHUDObjects::CropObjectXY(FVector2D XYCrop)\n{\n//Pass in vars within clamped ranges\nCropX = FMath::Clamp<float>(XYCrop.X, 0, 1);\nCropY = FMath::Clamp<float>(XYCrop.Y, 0, 1);\n}//CropObjectXY")]),e._v(" "),n("h3",{attrs:{id:"gui-h"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gui-h"}},[e._v("#")]),e._v(" GUI.h")]),e._v(" "),n("p",[e._v("251 Lines")]),e._v(" "),n("p",[e._v('#pragma once\n \n#include "GameFramework/HUD.h"\n#include "HUDObjects.h"\n#include "GUI.generated.h"\n \nUSTRUCT()\nstruct FButtonMaterial\n{\nGENERATED_USTRUCT_BODY()\n \n//The material to be used for this HUD object\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Buttons)\nUMaterialInterface* Material;\n \n//Name of the material var for toggling Highlighting\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Buttons)\nFString HighLightVarName;\n \n//Name of the material var for toggling Selection\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nFString ClickVarName;\n \nFButtonMaterial()\n{\n//Defaults\nHighLightVarName = "HighLight";\nClickVarName = "Click";\n}\n};\n \nUSTRUCT()\nstruct FAnimationStruct\n{\nGENERATED_USTRUCT_BODY()\n \n//The material to be used for this HUD object\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nUMaterialInterface* Material;\n \n//Name of the material var for toggling Highlighting\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nFString HighLightVarName;\n \n//Name of the material var for toggling Selection\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nFString ClickVarName;\n \n//Animation Rows and Columns\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nFVector2D AnimColRows;\n \n//Total Number of tiles in the animation\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nfloat TotalAnimTiles;\n \n//Time between each frame\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nfloat FrameDelaySeconds;\n \nFAnimationStruct()\n{\n//Defaults\nTotalAnimTiles = 0;\nFrameDelaySeconds = 0.5f;\nHighLightVarName = "";\nClickVarName = "";\n}\n};\n \nUCLASS()\nclass AGUI : public AHUD\n{\nGENERATED_UCLASS_BODY()\n \n// Infiltrace\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Text)\nTArray<UFont*> Fonts;\n \n//Font scale\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Text)\nfloat DefaultFontScale;\n \n//Button Materials\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Buttons)\nTArray<FButtonMaterial> ButtonMaterials;\n \n//Image Textures\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Textures)\nTArray<UTexture2D*> ImageTextures;\n \nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Materials)\nTArray<UMaterialInterface*> Materials;\n \n//Animated Materials\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Animations)\nTArray<FAnimationStruct> AnimationMaterials;\n \n// Draw Hud?\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Options)\nbool NoHUD;\n \npublic:\n//Reference to the Player Controller\nUPROPERTY()\nAPlayerController* ThePC;\n \nprotected:\n \n//Screen Sizes\nUPROPERTY()\nfloat SizeX;\nUPROPERTY()\nfloat SizeY;\n \n/*\n* GUI Object that creates a label with simple, centered text\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param pText - The text to be displayed\n* @param FontIndex - The font to be used from this HUD\'s FONT array\n* @param TextColour - The colour of the font to be displayed\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param pScale - Standard AHUD scaling\t\t\n*/\nvoid Label(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, FString pText, int FontIndex, FLinearColor TextColour, float x, float y, float w, float h, float pScale = 1);\n \n/*\n* GUI Object that creates a texture at a specified location, with a given size and colour\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param TextureIndex - The texture to be used from this HUD\'s TEXTURE array\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param pColour - The colour adjustment that should be applied to the texture\n*/\nvoid Texture(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int TextureIndex, float x, float y, float w, float h, FColor pColour = FColor::White);\n \n/*\n* GUI Object that creates a basic material, with a given size and position\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param MatIndex - The material to be used from this HUD\'s MATERIAL array\n* @param pText - The text to be displayed\n* @param FontIndex - The font to be used from this HUD\'s FONT array\n* @param TextColour - The colour of the font to be displayed\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param pScale - Standard AHUD scaling\n*/\nvoid Material(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int MatIndex, FString pText, int FontIndex, FLinearColor TextColour, float x, float y, float w, float h, float pScale = 1);\n \n/*\n* GUI Object that creates an Animated Sprite Sheet Material, with a given size and position\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param AnimIndex - The animated material to be used from this HUD\'s ANIMATEDMATERIAL array\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param pScale - Standard AHUD scaling\n*/\nvoid AnimatedMaterial(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int AnimIndex, float x, float y, float w, float h, float pScale = 1);\n \n/*\n* GUI Object that acts as a button, with 3 states: Normal, Highlighted and Clicked. Returns a bool if clicked\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param ButtonIndex - The button material to be used from this HUD\'s BUTTONMATERIAL array\n* @param pText - The text to be displayed\n* @param FontIndex - The font to be used from this HUD\'s FONT array\n* @param TextColour - The colour of the font to be displayed\n* @param pMousePos - The position of the mouse in screen space\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param pScale - Standard AHUD scaling\n*/\nbool Button(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int ButtonIndex, FString pText, int FontIndex, FLinearColor TextColour, FVector2D pMousePos, float x, float y, float w, float h, float pScale = 1);\n \n/*\n* GUI Object that acts as a button, with 3 animated sprite sheet states: Normal, Highlighted and Clicked. Returns a bool if clicked\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param AnimButtonIndex - The button material to be used from this HUD\'s ANIMATEDMATERIAL array\n* @param pText - The text to be displayed\n* @param FontIndex - The font to be used from this HUD\'s FONT array\n* @param TextColour - The colour of the font to be displayed\n* @param pMousePos - The position of the mouse in screen space\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param pScale - Standard AHUD scaling\n*/\nbool AnimatedButton(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int AnimButtonIndex, FString pText, int FontIndex, FLinearColor TextColour, FVector2D pMousePos, float x, float y, float w, float h, float pScale = 1);\n \n/*\n* GUI Object that returns the updated value of the slider\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param SliderButtonIndex - The button material to be used from this HUD\'s BUTTONMATERIAL array\n* @param SliderBackgroundMaterialIndex - The button material to be used from this HUD\'s MATERIAL array\n* @param pMousePos - The position of the mouse in screen space\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param Amount - The amount to be passed in on this update pass\n* @param MinAmount - The minimum amount to be used in this slider\n* @param MaxAmount - The maximum amount to be used in this slider\n*/\nfloat HorizontalSlider(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int SliderButtonIndex, int SliderBackgroundMaterialIndex, FVector2D pMousePos, float x, float y, float w, float h, float Amount = 0, float MinAmount = 0, float MaxAmount = 1);\n \n \n/*\n* GUI Object that returns the updated value of the slider\n* @param Object (out) - The object to be instantiated and/or updated\n* @param pHUDRef - The hud pointer to be passed : this\n* @param SliderButtonIndex - The button material to be used from this HUD\'s BUTTONMATERIAL array\n* @param SliderBackgroundMaterialIndex - The button material to be used from this HUD\'s MATERIAL array\n* @param pMousePos - The position of the mouse in screen space\n* @param x - The start horizontal position of the object in pixels\n* @param y - The start vertical position of the object in pixels\n* @param w - The width of the object in pixels\n* @param h - The height of the object in pixels\n* @param Amount - The amount to be passed in on this update pass\n* @param MinAmount - The minimum amount to be used in this slider\n* @param MaxAmount - The maximum amount to be used in this slider\n*/\nfloat VerticalSlider(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int SliderButtonIndex, int SliderBackgroundMaterialIndex, FVector2D pMousePos, float x, float y, float w, float h, float Amount = 0, float MinAmount = 0, float MaxAmount = 1);\n \n//Scaling\nfloat CenterHorizontal(float Width);\nfloat CenterVertical(float Height);\nfloat ScaleWidth(float Width);\nfloat ScaleHeight(float Height);\n \n/** after all game elements are created */\nvirtual void PostInitializeComponents() OVERRIDE;\nvirtual void DrawHUD() OVERRIDE;\n};')]),e._v(" "),n("h3",{attrs:{id:"gui-cpp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gui-cpp"}},[e._v("#")]),e._v(" GUI.cpp")]),e._v(" "),n("p",[e._v("346 Lines")]),e._v(" "),n("p",[e._v('#include "YourGame.h"\n#include "GUI.h"\n \n//Constructor\nAGUI::AGUI(const class FPostConstructInitializeProperties& PCIP) : Super(PCIP)\n{\n//Draw HUD?\nNoHUD = false;\n \n//Scale\nDefaultFontScale = 0.7;\n}//Constructor\n \n//SCALING\nfloat AGUI::ScaleWidth(float Width)\n{\nreturn (Width / 1920)*SizeX;\n}///Scale Width\n \nfloat AGUI::CenterHorizontal(float Width)\n{\nreturn (SizeX / 2) - (ScaleWidth(Width) / 2);\n}//CenterHorizontal\n \nfloat AGUI::ScaleHeight(float Height)\n{\nreturn (Height / 1920)*SizeY;\n}//ScaleHeight\n \nfloat AGUI::CenterVertical(float Height)\n{\nreturn (SizeY / 2) - (ScaleHeight(Height) / 2);\n}//CenterVertical\n \n//CORE\nvoid AGUI::PostInitializeComponents()\n{\nSuper::PostInitializeComponents();\n \n//Grab the PC\nThePC = GetOwningPlayerController();\n}//PostInitializeComponents\n \nvoid AGUI::DrawHUD()\n{\n//If the PC is NULL\nif (!ThePC)\n{\n//Try to get the PC\nThePC = GetOwningPlayerController();\n \n//If there still isn\'t a PC, then return\nif (!ThePC) return;\n}//if\n \n//Check that the PC\'s input exists, otherwise, return\nif (!ThePC->PlayerInput) return;\n \n//Draw HUD?\nif (NoHUD) return;\n \n//Super\nSuper::DrawHUD();\n \n//No Canvas?\nif (!Canvas) return;\n \n//Assign the canvas sizes to the global vars for use outside of DrawHUD\nSizeX = Canvas->SizeX;\nSizeY = Canvas->SizeY;\n}//DrawHUD\n \n//GUI WIDGETS\nvoid AGUI::Label(UHUDObjects* & Object, AHUD* pHUDRef, FString pText, int FontIndex, FLinearColor TextColour, float x, float y, float w, float h, float pScale)\n{\n//Instantiate new object and assign reference to the pointer\nif (Object == NULL)\n{\n//If the pointer has an object\nif (Fonts.IsValidIndex(FontIndex) && Fonts[FontIndex] != nullptr)\n{\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(pText, Fonts[FontIndex]);\n}//if\n}//if\n}//if\nelse\n{\n//Update the object\nObject->Update(pHUDRef, FVector2D(0, 0), x, y, w, h, pScale, TextColour);\n}//else\n}//Label\n \nvoid AGUI::Texture(/* Out */ UHUDObjects* & Object, AHUD* pHUDRef, int TextureIndex, float x, float y, float w, float h, FColor pColour)\n{\nif (Object == NULL)\n{\n//If the pointer has an object\nif (ImageTextures.IsValidIndex(TextureIndex) && ImageTextures[TextureIndex] != nullptr)\n{\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(ImageTextures[TextureIndex]);\n}//if\n}//if\n}//if\nelse\n{\n//Update the object\nObject->DrawTexture(pHUDRef, x, y, w, h, FColor::White);\n}//else\n}//Texture\n \nvoid AGUI::Material(UHUDObjects* & Object, AHUD* pHUDRef, int MatIndex, FString pText, int FontIndex, FLinearColor TextColour, float x, float y, float w, float h, float pScale)\n{\nif (Object == NULL)\n{\n//If the pointer has an object\nif (ButtonMaterials.IsValidIndex(MatIndex) && ButtonMaterials[MatIndex].Material != nullptr && Fonts.IsValidIndex(FontIndex) && Fonts[FontIndex] != nullptr)\n{\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(false, Materials[MatIndex], "", "", pText, Fonts[FontIndex]);\n}//if\n}//if\n}//if\nelse\n{\n//Update object\nObject->Update(pHUDRef, FVector2D(0, 0), x, y, w, h, pScale, TextColour);\n}//else\n}//Material\n \nvoid AGUI::AnimatedMaterial(UHUDObjects* & Object, AHUD* pHUDRef, int AnimIndex, float x, float y, float w, float h, float pScale)\n{\n//Instantiate new object and assign reference to the pointer\nif (Object == NULL)\n{\n//If the pointer has an object\nif (AnimationMaterials.IsValidIndex(AnimIndex) && AnimationMaterials[AnimIndex].Material != nullptr)\n{\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(false, AnimationMaterials[AnimIndex].Material, AnimationMaterials[AnimIndex].HighLightVarName, AnimationMaterials[AnimIndex].ClickVarName, AnimationMaterials[AnimIndex].AnimColRows, AnimationMaterials[AnimIndex].TotalAnimTiles, AnimationMaterials[AnimIndex].FrameDelaySeconds);\n}\n}//if\n}//if\nelse\n{\n//Update the object\nObject->Update(pHUDRef, FVector2D(0,0), x, y, w, h, pScale);\n}//else\n}//Animated Material\n \nbool AGUI::Button(UHUDObjects* & Object, AHUD* pHUDRef, int ButtonIndex, FString pText, int FontIndex, FLinearColor TextColour, FVector2D pMousePos, float x, float y, float w, float h, float pScale)\n{\n//If the object doesn\'t exit\nif (Object == NULL)\n{\n//If the pointer has an object\nif (ButtonMaterials.IsValidIndex(ButtonIndex) && ButtonMaterials[ButtonIndex].Material != nullptr && Fonts.IsValidIndex(FontIndex) && Fonts[FontIndex] != nullptr)\n{\n//create a new version of the object\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(true, ButtonMaterials[ButtonIndex].Material, ButtonMaterials[ButtonIndex].HighLightVarName, ButtonMaterials[ButtonIndex].ClickVarName, pText, Fonts[FontIndex]);\n}//if\n}//if\n \nreturn false;\n}//if\nelse\n{\n//Update the object\nObject->Update(pHUDRef, pMousePos, x, y, w, h, pScale, TextColour);\n \n//If the left mouse button is down\nif (ThePC->IsInputKeyDown(EKeys::LeftMouseButton))\n{\n//if the object is hovered and the button was just pressed\nif (Object->Hovered() && ThePC->WasInputKeyJustPressed(EKeys::LeftMouseButton))\n{\n//we have grabbed the object\nObject->bGrabbed = true;\n}//if\n}//if\nelse\n{\n//if the object has been grabbed\nif (Object->bGrabbed)\n{\n//set it to false\nObject->bGrabbed = false;\nreturn Object->Hovered();\n}//if\nreturn false;\n}//else\nreturn false;\n}//else\n}//button\n \nbool AGUI::AnimatedButton(UHUDObjects* & Object, AHUD* pHUDRef, int AnimButtonIndex, FString pText, int FontIndex, FLinearColor TextColour, FVector2D pMousePos, float x, float y, float w, float h, float pScale)\n{\n//Instantiate new object and assign reference to the pointer\nif (Object == NULL)\n{\n//If the pointer has an object\nif (AnimationMaterials.IsValidIndex(AnimButtonIndex) && AnimationMaterials[AnimButtonIndex].Material != nullptr && Fonts.IsValidIndex(FontIndex) && Fonts[FontIndex] != nullptr)\n{\n//create a new object\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(true, AnimationMaterials[AnimButtonIndex].Material, AnimationMaterials[AnimButtonIndex].HighLightVarName, AnimationMaterials[AnimButtonIndex].ClickVarName, pText, Fonts[FontIndex], AnimationMaterials[AnimButtonIndex].AnimColRows, AnimationMaterials[AnimButtonIndex].TotalAnimTiles, AnimationMaterials[AnimButtonIndex].FrameDelaySeconds);\n}//if\n}//if\n \nreturn false;\n}//if\nelse\n{\n//update object\nObject->Update(pHUDRef, pMousePos, x, y, w, h, pScale, TextColour);\n \n//if the left mouse button is down\nif (ThePC->IsInputKeyDown(EKeys::LeftMouseButton))\n{\n//if the mouse is over the object and the button was pressed during this frame\nif (Object->Hovered() && ThePC->WasInputKeyJustPressed(EKeys::LeftMouseButton))\n{\n//we have grabbed the object\nObject->bGrabbed = true;\n}//if\n}//if\nelse\n{\n//if the object has been grabbed\nif (Object->bGrabbed)\n{\n//set it to false\nObject->bGrabbed = false;\nreturn Object->Hovered();\n}//if\nreturn false;\n}//else\nreturn false;\n}//else\n}//AnimatedButton\n \nfloat AGUI::HorizontalSlider(UHUDObjects* & Object, AHUD* pHUDRef, int SliderButtonIndex, int SliderBackgroundMaterialIndex, FVector2D pMousePos, float x, float y, float w, float h, float Amount, float MinAmount, float MaxAmount)\n{\nif (Object == NULL)\n{\n//If the pointer has an object\nif (ButtonMaterials.IsValidIndex(SliderButtonIndex) && ButtonMaterials[SliderButtonIndex].Material != nullptr && Materials.IsValidIndex(SliderBackgroundMaterialIndex) && Materials[SliderBackgroundMaterialIndex] != nullptr)\n{\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(true, ButtonMaterials[SliderButtonIndex].Material, ButtonMaterials[SliderButtonIndex].HighLightVarName, ButtonMaterials[SliderButtonIndex].ClickVarName, Materials[SliderBackgroundMaterialIndex]);\n}//if\n}//if\n \nreturn Amount;\n}//if\nelse\n{\nif (ThePC->IsInputKeyDown(EKeys::LeftMouseButton))\n{\nif ((Object->Hovered() || Object->CheckInsideSliderBG(pMousePos)) && ThePC->WasInputKeyJustPressed(EKeys::LeftMouseButton))\n{\nObject->bGrabbed = true;\n}//if\n}//if\nelse\n{\nif (Object->bGrabbed)\n{\nObject->bGrabbed = false;\n}//if\n}//else\n \n//Clamp the range just to be sure\nAmount = FMath::Clamp<float>(Amount, MinAmount, MaxAmount);\n \n//Draw slider button\nreturn Object->DrawHorizontalSlider(pHUDRef, Amount, MinAmount, MaxAmount, pMousePos, x, y, w, h, 1);\n}//else\nreturn Amount;\n}//HorizontalSlider\n \nfloat AGUI::VerticalSlider(UHUDObjects* & Object, AHUD* pHUDRef, int SliderButtonIndex, int SliderBackgroundMaterialIndex, FVector2D pMousePos, float x, float y, float w, float h, float Amount, float MinAmount, float MaxAmount)\n{\nif (Object == NULL)\n{\n//If the pointer has an object\nif (ButtonMaterials.IsValidIndex(SliderButtonIndex) && ButtonMaterials[SliderButtonIndex].Material != nullptr && Materials.IsValidIndex(SliderBackgroundMaterialIndex) && Materials[SliderBackgroundMaterialIndex] != nullptr)\n{\nObject = NewObject<UHUDObjects>(this);\nif (Object != NULL)\n{\n//Set up the HUD Object\nObject->Init(true, ButtonMaterials[SliderButtonIndex].Material, ButtonMaterials[SliderButtonIndex].HighLightVarName, ButtonMaterials[SliderButtonIndex].ClickVarName, Materials[SliderBackgroundMaterialIndex]);\n}//if\n}//if\n \nreturn Amount;\n}//if\nelse\n{\nif (ThePC->IsInputKeyDown(EKeys::LeftMouseButton))\n{\nif ((Object->Hovered() || Object->CheckInsideSliderBG(pMousePos)) && ThePC->WasInputKeyJustPressed(EKeys::LeftMouseButton))\n{\nObject->bGrabbed = true;\n}//if\n}//if\nelse\n{\nif (Object->bGrabbed)\n{\nObject->bGrabbed = false;\n}//if\n}//else\n \n//Clamp the range just to be sure\nAmount = FMath::Clamp<float>(Amount, MinAmount, MaxAmount);\n \n//Draw slider button\nreturn Object->DrawVerticalSlider(pHUDRef, Amount, MinAmount, MaxAmount, pMousePos, x, y, w, h, 1);\n}//else\nreturn Amount;\n}//VerticalSlider')]),e._v(" "),n("h3",{attrs:{id:"yourhud-h"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yourhud-h"}},[e._v("#")]),e._v(" YourHUD.h")]),e._v(" "),n("p",[e._v("42 Lines")]),e._v(" "),n("p",[e._v('#pragma once\n \n#include "GUI.h"\n#include "YourHUD.generated.h"\n \nUCLASS()\nclass AYourHUD : public AGUI\n{\nGENERATED_UCLASS_BODY()\n \npublic:\n \n//Objects we will be using to demonstrate each type of object\nUPROPERTY()\nUHUDObjects* TestLabel;\nUPROPERTY()\nUHUDObjects* TestTexture;\nUPROPERTY()\nUHUDObjects* TestMaterial;\nUPROPERTY()\nUHUDObjects* TestAnimMaterial;\nUPROPERTY()\nUHUDObjects* TestButton;\nUPROPERTY()\nUHUDObjects* TestAnimButton;\nUPROPERTY()\nUHUDObjects* TestHorizontalSlider;\nUPROPERTY()\nUHUDObjects* TestVerticalSlider;\n \n//Variables to hold for the sliders\nfloat horizontalSlideValue;\nfloat verticalSlideValue;\n \n//Variable to hold mouse position\nUPROPERTY()\nFVector2D MousePos;\n \nprotected:\n//Draw HUD\nvirtual void DrawHUD() OVERRIDE;\n};')]),e._v(" "),n("h3",{attrs:{id:"yourhud-cpp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yourhud-cpp"}},[e._v("#")]),e._v(" YourHUD.cpp")]),e._v(" "),n("p",[e._v("72 Lines")]),e._v(" "),n("p",[e._v('#include "YourGame.h"\n#include "YourHUD.h"\n \n//Constructor\nAYourHUD::AYourHUD(const class FPostConstructInitializeProperties& PCIP) : Super(PCIP)\n{\n//Default the mouse positions\nMousePos.X = 0;\nMousePos.Y = 0;\n \n//Default the slider values\nhorizontalSlideValue = 0;\nverticalSlideValue = 0;\n}//Constructor\n \nvoid AYourHUD::DrawHUD()\n{\n//If the PC is NULL\nif (!ThePC)\n{\n//Try to get the PC\nThePC = GetOwningPlayerController();\n \n//If there still isn\'t a PC, then return\nif (!ThePC) return;\n}//if\n \n//Check that the PC\'s input exists, otherwise, return\nif (!ThePC->PlayerInput) return;\n \n//Draw HUD?\nif (NoHUD) return;\n \n//Super\nSuper::DrawHUD();\n \n//No Canvas?\nif (!Canvas) return;\n \n//Grab the mouse position\nThePC->GetMousePosition(MousePos.X, MousePos.Y);\n \n//This works by passing the object, this hud, the text, the index of the font array you want to use, the mouse position, then rectangle positioning, using scaling functions, and then the font size, scaled to the screen.\nLabel(TestLabel, this, "This is a label!", 0, FLinearColor::White, CenterHorizontal(300), ScaleHeight(120), ScaleWidth(300), ScaleHeight(120), ScaleWidth(0.75f));\n \n//This works by passing the object, this hud, the index of the texture array you want to use, then rectangle positioning, and finally a tint colour\nTexture(TestTexture, this, 0, CenterHorizontal(300), ScaleHeight(240), ScaleWidth(300), ScaleHeight(120), FColor::White);\n \n//This works by passing the object, this hud, the index of the material array you want to use, the text, the index of the font array you want to use, rectangle positioning, and font/material scaling\nMaterial(TestMaterial, this, 0, "This is a material!", 0, FLinearColor::White, CenterHorizontal(300), ScaleHeight(360), ScaleWidth(300), ScaleHeight(120), ScaleWidth(0.75f));\n \n//This works by passing the object, this hud, the index of the animated material array you want to use, rectangle positions, and font/material scaling\nAnimatedMaterial(TestAnimMaterial, this, 0, CenterHorizontal(300), ScaleHeight(480), ScaleWidth(300), ScaleHeight(120), ScaleWidth(0.75f));\n \n//This works by passing the object, this hud, then index of the button material array you want to use, the text, the index of the font, the font colour, the mouse position, rectangle positioning and font/material scaling\nif(Button(TestButton, this, 0, "This is a button!", 0, FLinearColor::White, MousePos, CenterHorizontal(300), ScaleHeight(600), ScaleWidth(300), ScaleHeight(120), ScaleWidth(0.75f)))\n{\n//Stuff goes here for when button is clicked\n}//if\n \n//This works by passing the object, this hud, then index of the animated button material array you want to use, the text, the index of the font, the font colour, the mouse position, rectangle positioning and font/material scaling\nif(AnimatedButton(TestAnimButton, this, 0, "This is an animated button!", 0, FLinearColor::White, MousePos, CenterHorizontal(300), ScaleHeight(720), ScaleWidth(300), ScaleHeight(120), ScaleWidth(0.75f)))\n{\n//Stuff goes here for when button is clicked\n}//if\n \n//This works by passing the object, this hud, the index of the button for the slider, the index for the material for the background, rectangle positioning, the current value, the min value and the max value.\nhorizontalSlideValue = HorizontalSlider(TestHorizontalSlider, this, 0, 0, MousePos, CenterHorizontal(300), ScaleHeight(840), ScaleWidth(300), ScaleHeight(7.5f), horizontalSlideValue, 0, 1);\n \n//This works by passing the object, this hud, the index of the button for the slider, the index for the material for the background, rectangle positioning, the current value, the min value and the max value.\nverticalSlideValue = HorizontalSlider(TestVerticalSlider, this, 0, 0, MousePos, CenterHorizontal(400), CenterVertical(300), ScaleWidth(7.5f), ScaleHeight(300), verticalSlideValue, 0, 1);\t\n}//DrawHUD')]),e._v(" "),n("h2",{attrs:{id:"blueprint-editor-end"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#blueprint-editor-end"}},[e._v("#")]),e._v(" BluePrint/Editor End")]),e._v(" "),n("p",[e._v('Once you have compild your new project, make a new Class BluePrint of "YourHUD" and set the new BP to be your HUD System. Open the BluePrint and go into the defaults.')]),e._v(" "),n("h3",{attrs:{id:"text-section"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#text-section"}},[e._v("#")]),e._v(" Text Section")]),e._v(" "),n("p",[e._v("Drop down the Text section, add an element to the Fonts array, and add in the font you created earlier. Any time the script asks for a 'Font Index', it's referring to the element number of this array. (On the left)")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:TextHUD.png",title:"Fonts"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/5/51/TextHUD.png",alt:"Fonts"}})])]),e._v(" "),n("h3",{attrs:{id:"buttons-section"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#buttons-section"}},[e._v("#")]),e._v(" Buttons Section")]),e._v(" "),n("p",[e._v("Drop down the Button section, add an element to the Button Materials array, and add in the button material you created earlier. Set the Highlight and Click names to be the respective parameters in that material. Any time the script asks for a 'Button Index' or 'Slider Button Index', it's referring to the element number of this array. (On the left)")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:ButtonHUD.png",title:"Buttons"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/d/df/ButtonHUD.png",alt:"Buttons"}})])]),e._v(" "),n("h3",{attrs:{id:"textures-section"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#textures-section"}},[e._v("#")]),e._v(" Textures Section")]),e._v(" "),n("p",[e._v("Drop down the Textures section, add an element to the Image Textures array, and add in the texture you want. Any time the script asks for a 'Texture Index', it's referring to the element number of this array. (On the left)")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:TextureHUD.png",title:"Textures"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/a/a7/TextureHUD.png",alt:"Textures"}})])]),e._v(" "),n("h3",{attrs:{id:"materials-section"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#materials-section"}},[e._v("#")]),e._v(" Materials Section")]),e._v(" "),n("p",[e._v("Drop down the Materials section, add an element to the Materials array, and add in the simple material you made earlier. Any time the script asks for a 'Material Index' or 'Slider Background Material Index', it's referring to the element number of this array. (On the left)")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:MaterialHUD.png",title:"Materials"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/a/a0/MaterialHUD.png",alt:"Materials"}})])]),e._v(" "),n("h3",{attrs:{id:"animations-section"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animations-section"}},[e._v("#")]),e._v(" Animations Section")]),e._v(" "),n("p",[e._v("Drop down the Animations section, add an element to the Animation Materials array, and add in the simple or button material you created earlier. NOTE: This expects the textures of the material to be in a sprite sheet layout. If its a Button, then set the Highlight and Click names to be the respective parameters in that material. Any time the script asks for a 'Anim Button Index' or 'Anim Index', it's referring to the element number of this array. (On the left)")]),e._v(" "),n("p",[e._v("The 'Anim Col Rows' is how many sprites across the texture is, then how many down. Total anim tiles is how many tiles there are altogether, in case it doesn't go all the way to the end. The Frame Delay Seconds is how much time you want there to be between frame updates.")]),e._v(" "),n("p",[n("a",{attrs:{href:"/File:AnimationHUD.png",title:"Animations"}},[n("img",{attrs:{src:"https://d26ilriwvtzlb.cloudfront.net/a/af/AnimationHUD.png",alt:"Animations"}})])]),e._v(" "),n("h2",{attrs:{id:"conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),n("p",[e._v("You can take this code and make whatever kind of HUD system you want. I never demonstrated it, but there are functions in the GUI class that can crop animated materials, so you can have an animated health bar thats cropped from the left, making it look like it's decreasing without cutting off at the right. 'CropXY(FVector2D)' and 'CropUV(FVector2D)'")]),e._v(" "),n("p",[e._v("You can also set up your own mouse system that doesn't use 'ThePC->GetMousePosition()' and implement a cool feature like gamepad control, etc.")]),e._v(" "),n("p",[e._v("-Peace")]),e._v(" "),n("p",[e._v('Retrieved from "'),n("a",{attrs:{href:"https://wiki.unrealengine.com/index.php?title=HUD:_Unity_3D_OnGUI_Remake&oldid=5469",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://wiki.unrealengine.com/index.php?title=HUD:_Unity_3D_OnGUI_Remake&oldid=5469"),n("OutboundLink")],1),e._v('"')]),e._v(" "),n("p",[n("a",{attrs:{href:"/Special:Categories",title:"Special:Categories"}},[e._v("Category")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/Category:Code",title:"Category:Code"}},[e._v("Code")])])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://tracking.unrealengine.com/track.png",alt:""}})])])}),[],!1,null,null,null);t.default=i.exports}}]);