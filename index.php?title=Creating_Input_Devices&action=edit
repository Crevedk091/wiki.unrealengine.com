<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>View source for Creating Input Devices - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,nofollow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Creating_Input_Devices","wgTitle":"Creating Input Devices","wgCurRevisionId":6624,"wgRevisionId":0,"wgArticleId":2079,"wgIsArticle":false,"wgIsRedirect":false,"wgAction":"edit","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":true,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Creating_Input_Devices","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:27249162ef7002415c3792ce5dfd2a9a */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Creating_Input_Devices skin-vector action-edit vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">View source for Creating Input Devices</span></h1>
			<div id="bodyContent">
								<div id="contentSub">‚Üê <a href="/Creating_Input_Devices" title="Creating Input Devices">Creating Input Devices</a></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text"><p>You do not have permission to edit this page, for the following reason:
</p>
<div class="permissions-errors">
<p>The action you have requested is limited to users in the group: <a href="/index.php?title=Epic_Wiki:Users&amp;action=edit&amp;redlink=1" class="new" title="Epic Wiki:Users (page does not exist)">Users</a>.
</p>
</div>
<hr />
<p>You can view and copy the source of this page:
</p><textarea readonly="" accesskey="," id="wpTextbox1" cols="80" rows="25" style="" lang="en" dir="ltr" name="wpTextbox1">==Overview==

This page will detail how to create custom Input Device plugins in order to add support for additional controller/input types. It will also show example code for adding additional Key/Gamepad Input Names. The code will show how to fire events from the existing Input Names via a MessageHandler and how to fire events from any Key/Gamepad Input directly.

WARNING: The code is currently unstable! There is a bug with ForceFeedback that is preventing a build. I will have this fixed by 25th July unless someone fixes it before then.

(Warning: firing direct messages bypasses 'controller#, and therefore does not support local multilayer)

==Example Code==

The code will show how to create a plugin for a psudo Input Device which will simulate controller#1 pressing the bottom face button every .1 seconds. It will also create a new custom Gamepad Input called "Psudo Player Weight" and fire events for this input with a value of 75.0 (kg).

In your own code you will most likely link your plugin with a static/dynamic library which communicates with you Input Device. When the engine calls FPsudoInputsInputDevice::SendControllerEvents() you can then pass on any events/polled controller states using the MessageHandler in a generic way.

===Plugin Code===

===uPlugin Ddefinition===
'''/Plugins/PsudoInputs/PsudoInputs.uplugin'''
&lt;syntaxhighlight lang="csharp">
{
    "FileVersion" : 0,
	
	"FriendlyName" : "Psudo Inputs Plugin"
	"Version" : 0,
	"VersionName" : "0.2",
	"CreatedBy" : "mspe044@gmail.com",
	"EngineVersion" : 1579795,
	"Description" : "I wish I was a real input! :'(",
	"Category" : "MyInputs",
	
	"Modules" :
	[
		{
			"Name" : "PsudoInputs",
			"Type" : "Runtime",
			"LoadingPhase" : "PreDefault"
		}
	]
}
&lt;/syntaxhighlight>

===Module Build File===
This is where you link to any library supporting your Input Device. There is a sample method 'LoadYourThirdPartyLibraries()' to help you do this however the call to it is currently commented out.

This method will will link to a static library in '''.../Plugins/PsudoInputs/Source/PsudoInputs/ThirdParty/LibraryDirName/...''' with include files in the sub directory '''.../include/''' and library code in subdirectoires seprated by compile arcitecture I.E. '''.../Win64/VS2013/MyLibrary.lib'''

'''/Plugins/PsudoInputs/Source/PsudoInputs/PsudoInputs.Build.cs'''
&lt;syntaxhighlight lang="csharp">
namespace UnrealBuildTool.Rules
{
    using System.IO;

    public class PsudoInputs : ModuleRules
    {
        public PsudoInputs(TargetInfo Target)
        {
            // I chose not to use PCH, this is proberbly slower and worse
            PCHUsage = PCHUsageMode.NoSharedPCHs;

            // ... add public include paths required here ...
            PublicIncludePaths.AddRange( new string[] {
                "PsudoInputs/Public",
            });

            // ... add other private include paths required here ...
            PrivateIncludePaths.AddRange( new string[] {
                "PsudoInputs/Private",
            });

            // ... add other public dependencies that you statically link with here ...
            PublicDependencyModuleNames.AddRange( new string[] { 
                "Core",
                "CoreUObject",      // Provides Actors and Structs
                "Engine",           // Used by Actor
                "Slate",            // Used by InputDevice to fire bespoke FKey events
                "InputCore",        // Provides LOCTEXT and other Input features
                "InputDevice",      // Provides IInputInterface
            });

            // ... add private dependencies that you statically link with here ...
            PrivateDependencyModuleNames.AddRange( new string[] {
            });

            // ... add any modules that your module loads dynamically here ...
            DynamicallyLoadedModuleNames.AddRange( new string[] { 
            });

            // !!!!!!!!!! UNCOMMENT THIS IF YOU WANT TO CALL A LIBRARY !!!!!!!!!!
            //LoadYourThirdPartyLibraries(Target);
        }

        public bool LoadYourThirdPartyLibraries(TargetInfo Target)
        {
            bool isLibrarySupported = false;

            // This will give oyu a relitive path to the module ../PsudoInputs/
            string ModulePath = Path.GetDirectoryName(RulesCompiler.GetModuleFilename(this.GetType().Name));
            // This will give you a relative path to ../PsudoInputs/ThirdParty/"LibraryDirName"/
            string MyLibraryPath = Path.Combine(ModulePath, "ThirdParty", "LibraryDirName");

            // Use this to keep Win32/Win64/e.t.c. library files in seprate subdirectories
            string ArchitecturePath = "";

            // When you are building for Win64
            if (Target.Platform == UnrealTargetPlatform.Win64 &amp;&amp;
                WindowsPlatform.Compiler == WindowsCompiler.VisualStudio2013)
            {
                // We will look for the library in ../PsudoInputs/ThirdParty/MyLibrary/Win64/VS20##/
                ArchitecturePath = Path.Combine("Win64", "VS" + WindowsPlatform.GetVisualStudioCompilerVersionName());

                isLibrarySupported = true;
            }
            // When you are building for Win32
            else if (Target.Platform == UnrealTargetPlatform.Win32 &amp;&amp;
                WindowsPlatform.Compiler == WindowsCompiler.VisualStudio2013)
            {
                // We will look for the library in ../PsudoInputs/ThirdParty/MyLibrary/Win32/VS20##/
                ArchitecturePath = Path.Combine("Win32", "VS" + WindowsPlatform.GetVisualStudioCompilerVersionName());

                isLibrarySupported = true;
            }
            // Add mac/linux/mobile support in much the same way

            // If the current build architecture was supported by the above if statements
            if (isLibrarySupported)
            {
                // Add the architecture spacific path to the library files
                PublicAdditionalLibraries.Add(Path.Combine(MyLibraryPath, "lib", ArchitecturePath, "MyLibrary.lib"));
                // Add a more generic path to the include header files
                PublicIncludePaths.Add(Path.Combine(MyLibraryPath, "include"));
            }

            // Defination lets us know whether we successfully found our library!
            Definitions.Add(string.Format("WITH_MY_LIBRARY_PATH_USE={0}", isLibrarySupported ? 1 : 0));

            return isLibrarySupported;
        }
    }
}
&lt;/syntaxhighlight>

===IPlugin Header File===
'''/Plugins/PsudoInputs/Source/PsudoInputs/Public/PsudoInputsPlugin.h'''
&lt;syntaxhighlight lang="csharp">#pragma once

#include "ModuleManager.h"
#include "IInputDeviceModule.h"

#include "InputCoreTypes.h"

/**
 * The public interface to this module.  In most cases, this interface is only public to sibling modules 
 * within this plugin.
 */
class IPsudoInputsPlugin : public IInputDeviceModule
{
public:
	/**
	 * Singleton-like access to this module's interface.  This is just for convenience!
	 * Beware of calling this during the shutdown phase, though.  Your module might have been unloaded already.
	 *
	 * @return Returns singleton instance, loading the module on demand if needed
	 */
	static inline IPsudoInputsPlugin&amp; Get()
	{
		return FModuleManager::LoadModuleChecked&lt; IPsudoInputsPlugin >("PsudoInputs");
	}

	/**
	 * Checks to see if this module is loaded and ready.  It is only valid to call Get() if IsAvailable() returns true.
	 *
	 * @return True if the module is loaded and ready to use
	 */
	static inline bool IsAvailable()
	{
		return FModuleManager::Get().IsModuleLoaded( "PsudoInputs" );
	}

	// This is where I declare my fancy new output type 
	//  - It's pretending to be a set of scales like a poor mans Wii Balance Board)
	static const FKey Psudo_WeighingScales;
};
&lt;/syntaxhighlight>

===PCH File===
'''/Plugins/PsudoInputs/Source/PsudoInputs/Private/PsudoInputsPrivatePCH'''
&lt;syntaxhighlight lang="csharp">
// You should place include statements to your module's private header files here.  You only need to
// add includes for headers that are used in most of your module's source files though.

#include "Core.h"
#include "CoreUObject.h"

#include "IPsudoInputsPlugin.h"
&lt;/syntaxhighlight>

===Plugin Header File===
'''/Plugins/PsudoInputs/Source/PsudoInputs/Private/PsudoInputsPlugin.h'''
&lt;syntaxhighlight lang="csharp">
#pragma once
#include "PsudoInputsPrivatePCH.h"

class FPsudoInputsPlugin : public IPsudoInputsPlugin
{
public:
	/** IPsudoInputsInterface implementation */
	virtual TSharedPtr&lt; class IInputDevice > CreateInputDevice(const TSharedRef&lt; FGenericApplicationMessageHandler >&amp; InMessageHandler);

	// This is not required as IInputDeviceModule handels startup!
	//virtual void StartupModule() OVERRIDE; 
	virtual void ShutdownModule() OVERRIDE;

	TSharedPtr&lt; class FPsudoInputsInputDevice > PsudoInputDevice;
};
&lt;/syntaxhighlight>

===Plugin Cpp File===
'''/Plugins/PsudoInputs/Source/PsudoInputs/Private/PsudoInputsPlugin.c'''
&lt;syntaxhighlight lang="csharp">
#include "PsudoInputsPrivatePCH.h"

#include "Internationalization.h" // LOCTEXT
#include "InputCoreTypes.h"

#include "PsudoInputsPlugin.h"

#include "Engine.h" // Are these both necessary?
#include "EngineUserInterfaceClasses.h" // Are these both necessary?

#include "IPsudoInputsPlugin.h"

#include "PsudoInputs.generated.inl"

IMPLEMENT_MODULE(FPsudoInputsPlugin, PsudoInputs)
DEFINE_LOG_CATEGORY_STATIC(PsudoInputsPlugin, Log, All);

#define LOCTEXT_NAMESPACE "InputKeys"

const FKey IPsudoInputsPlugin::Psudo_WeighingScales("Psudo_WeighingScales");

// This function is called by *Application.cpp after startup to instantiate the modules InputDevice
TSharedPtr&lt; class IInputDevice > FPsudoInputsPlugin::CreateInputDevice(const TSharedRef&lt; FGenericApplicationMessageHandler >&amp; InMessageHandler)
{
	UE_LOG(PsudoInputsPlugin, Log, TEXT("Create Input Device"));

	// EKey: use these sparingly... only when you need a button/axis/motion that doesn't fit any of the input names that already exist
	//  - I'm defineing my poor mans Wii Balance Board, it will be called "Psudo Player Weight" in the editor
	EKeys::AddKey(FKeyDetails(IPsudoInputsPlugin::Psudo_WeighingScales, LOCTEXT("Psudo_WeighingScales", "Psudo Player Weight"), FKeyDetails::Axis));
	const_cast&lt;UInputSettings*>(GetDefault&lt;UInputSettings>())->AddAxisMapping(FInputAxisKeyMapping("PsudoWeighingScales", IPsudoInputsPlugin::Psudo_WeighingScales, 1.0F));

	FPsudoInputsPlugin::PsudoInputDevice = MakeShareable(new FPsudoInputsInputDevice(InMessageHandler));

	// We return the IInputDevice so that the Application has a handel on it.
	//  - The application will ask for controller updates via 'SendControllerEvents()'
	//  - The application will update the MessageHandler if it changes via 'SetMessageHandler(...)'
	return FPsudoInputsPlugin::PsudoInputDevice;
}

#undef LOCTEXT_NAMESPACE

// This function may be called during shutdown to clean up the module.
void FPsudoInputsPlugin::ShutdownModule()
{
	FPsudoInputsPlugin::PsudoInputDevice->~FPsudoInputsInputDevice();

	UE_LOG(PsudoInputsPlugin, Log, TEXT("Shutdown Module"));
}
&lt;/syntaxhighlight>

===Input Device Header File===
'''/Plugins/PsudoInputs/Source/PsudoInputs/Private/PsudoInputsInputDevice.h'''
&lt;syntaxhighlight lang="csharp">
#pragma once
//#include "PsudoInputsPluginPrivatePCH.h"

#include "IInputDevice.h"

#define MAX_NUM_PSUDO_INPUT_CONTROLLERS	4 // We dont realy have any input controllers, this is a sham! :P
#define NUM_PSUDO_INPUT_BUTTONS			4 // I've only used the one button but w/evs

/**
* Type definition for shared pointers to instances of FMessageEndpoint.
*/
// ToDo: Is this necessary?
typedef TSharedPtr&lt;class FPsudoInputsInputDevice> FPsudoInputsInputDevicePtr;

/**
* Type definition for shared references to instances of FMessageEndpoint.
*/
// ToDo: Is this necessary?
typedef TSharedRef&lt;class FPsudoInputsInputDevice> FPsudoInputsInputDeviceRef;

/**
* Interface class for my psudo device
*/
class FPsudoInputsInputDevice : public IInputDevice
{
public:
	FPsudoInputsInputDevice(const TSharedRef&lt; FGenericApplicationMessageHandler >&amp; MessageHandler);

	// Tick the interface (e.g. check for new controllers)
	virtual void Tick(float DeltaTime) OVERRIDE;

	// Poll for controller state and send events if needed
	virtual void SendControllerEvents() OVERRIDE;

	// Set which MessageHandler will get the events from SendControllerEvents.
	virtual void SetMessageHandler(const TSharedRef&lt; FGenericApplicationMessageHandler >&amp; InMessageHandler) OVERRIDE;

	// Exec handler to allow console commands to be passed through for debugging
	virtual bool Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice&amp; Ar) OVERRIDE;

	// IForceFeedbackSystem pass through functions
	virtual void SetChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value) OVERRIDE;
	virtual void SetChannelValues(int32 ControllerId, const FForceFeedbackValues &amp;values) OVERRIDE;

	virtual ~FPsudoInputsInputDevice();
private:
	// ToDo: Is this necessary?
	bool Active;

	/** Delay before sending a repeat message after a button was first pressed */
	float InitialButtonRepeatDelay; // How long a button is held for before you send a 2nd event

	/** Delay before sending a repeat message after a button has been pressed for a while */
	float ButtonRepeatDelay; // How long a button is held for before you send a 3rd/4th/e.t.c event

	EControllerButtons::Type PsudoInputButtonMapping[NUM_PSUDO_INPUT_BUTTONS];
	double NextRepeatTime[NUM_PSUDO_INPUT_BUTTONS];

	TSharedRef&lt; FGenericApplicationMessageHandler > MessageHandler;
};
&lt;/syntaxhighlight>

===Input Device Cpp File===
'''/Plugins/PsudoInputs/Source/PsudoInputs/Private/PsudoInputsInputDevice.cpp'''
&lt;syntaxhighlight lang="csharp">
#include "PsudoInputsPrivatePCH.h"

#include "GenericPlatformMath.h"

#include "PsudoInputsInputDevice.h"

#include "Slate.h"

#include "WindowsApplication.h"
#include "WindowsWindow.h"
#include "WindowsCursor.h"
#include "GenericApplicationMessageHandler.h"
#include "IInputDeviceModule.h"
#include "IInputDevice.h"

DEFINE_LOG_CATEGORY_STATIC(LogPsudoInputDevice, Log, All);

byte pollState[MAX_NUM_PSUDO_INPUT_CONTROLLERS];

FPsudoInputsInputDevice::FPsudoInputsInputDevice(const TSharedRef&lt; FGenericApplicationMessageHandler >&amp; InMessageHandler) : Active(true), MessageHandler(InMessageHandler)
{
	UE_LOG(LogPsudoInputDevice, Log, TEXT("Starting PsudoInputsInputDevice"));

	InitialButtonRepeatDelay = 0.2f;
	ButtonRepeatDelay = 0.1f;

	PsudoInputButtonMapping[0] = EControllerButtons::FaceButtonTop;			// PSUDO_BUTTON_ONE
	NextRepeatTime[0] = -1.0;												// Set to !pressed
	PsudoInputButtonMapping[1] = EControllerButtons::FaceButtonBottom;		// PSUDO_BUTTON_TWO
	NextRepeatTime[1] = -1.0;												// Set to !pressed
	PsudoInputButtonMapping[2] = EControllerButtons::FaceButtonLeft;		// PSUDO_BUTTON_THREE
	NextRepeatTime[2] = -1.0;												// Set to !pressed
	PsudoInputButtonMapping[3] = EControllerButtons::FaceButtonRight;		// PSUDO_BUTTON_FOUR
	NextRepeatTime[3] = -1.0;												// Set to !pressed
}

// This method runs once every game tick, use it if you need a regular polling event
void FPsudoInputsInputDevice::Tick(float DeltaTime){
}

// This method runs every time the game wants to check for controller updates!
void FPsudoInputsInputDevice::SendControllerEvents()
{
	// Commented this out as it will spam the log!
	//UE_LOG(LogPsudoInputDevice, Log, TEXT("Sending Controller Events"));

	// Here is where we check the state of our input device proberbly by calling a method in your third party library...
	//  - I dont have a real device (xbox controller, wiimote, e.t.c.) in this tutorial :'( so im gona fake it!!!
	const double CurrentTime = FPlatformTime::Seconds();

	// I could make library to read from a fancy set of matrix serebellum jacks and iterate over each of those 'controllers'.. but ill save that for the next tutorial
	int controllerIndex = 0; // Apparantly I was lazy so there is only one controller!

	// This is how you fire regular boring controller events... the ones like the green xbox 'A' key (EControllerButtons::FaceButtonBottom)

	int jumpButtonIndex = 0;
	
	// This will make the third person tutorial man jump for player one!

	// IF BUTTON IS CURRENTLY PRESSED DOWN BY USER
	//  - If button pressed has not fired since the user pressed the button
	if (NextRepeatTime[jumpButtonIndex] == -1.0) {
		MessageHandler->OnControllerButtonPressed(PsudoInputButtonMapping[jumpButtonIndex], controllerIndex, false);

		NextRepeatTime[jumpButtonIndex] = CurrentTime + InitialButtonRepeatDelay;
	}
	//  - Else If (button pressed has fired > 0 times) &amp;&amp; (time since last event > repeat event time)
	else if (NextRepeatTime[jumpButtonIndex] &lt;= CurrentTime) {
		MessageHandler->OnControllerButtonPressed(PsudoInputButtonMapping[jumpButtonIndex], controllerIndex, true);

		NextRepeatTime[jumpButtonIndex] = CurrentTime + ButtonRepeatDelay;
	}
	// ELSE (BUTTON IS CURRENTLY NOT PRESSED BY USER)
	if (NextRepeatTime[jumpButtonIndex] != -1.0) {
		// You would normally test whether the controll is pressed or released, on release you call: (see XInputInterface.cpp for a nice example)
		//MessageHandler->OnControllerButtonReleased(PsudoInputButtonMapping[jumpButtonIndex], controllerIndex, false);
		//NextRepeatTime[jumpButtonIndex] = -1.0;
	}


	InitialButtonRepeatDelay = 0.2f;
	ButtonRepeatDelay = 0.1f;

	// This is how you fire your fancypantz new controller events... the ones you added because you couldn't find an existing EControllerButton that matched your needs!
	FSlateApplication::Get().OnControllerAnalog(IPsudoInputsPlugin::Psudo_WeighingScales, controllerIndex, 75); // This will spam 75(kg) to my fancy new output type!

}

// This method is called every time someone changes the message handler (other hacky plugins might change it to customise it.. we haven't cos we're cool like that)
void FPsudoInputsInputDevice::SetMessageHandler(const TSharedRef&lt; FGenericApplicationMessageHandler >&amp; InMessageHandler)
{
	UE_LOG(LogPsudoInputDevice, Log, TEXT("Setting Message Handler"));
	MessageHandler = InMessageHandler;
}

// Exec handler to allow console commands to be passed through for debugging
bool FPsudoInputsInputDevice::Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice&amp; Ar){
	UE_LOG(LogPsudoInputDevice, Log, TEXT("Execute Console Command: %s"), Cmd);

	// Put your fancy custom console command code here... I could have used this to let you fire psudo controller events but im lazy..

	return true;
}

// IForceFeedbackSystem pass through functions
//  - I *believe* this is a handel for the game to communicate back to your third party library (i.e. game tells joystick to increase force feedback/vibrate/turn on/off a light)
void FPsudoInputsInputDevice::SetChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value){
	UE_LOG(LogPsudoInputDevice, Log, TEXT("Set Force Feedback %f"), Value);
}
void FPsudoInputsInputDevice::SetChannelValues(int32 ControllerId, const FForceFeedbackValues &amp;values){
	UE_LOG(LogPsudoInputDevice, Log, TEXT("Set Force Feedback Values"));
}

// This is where you nicely clean up your plugin when its told to shut down!
//  - USE THIS PLEASE!!! no one likes a memory leak >_&lt;
FPsudoInputsInputDevice::~FPsudoInputsInputDevice() {
	UE_LOG(LogPsudoInputDevice, Log, TEXT("Shutdown Complete"));
}
&lt;/syntaxhighlight>
</textarea><div class="templatesUsed"></div><p id="mw-returnto">Return to <a href="/Creating_Input_Devices" title="Creating Input Devices">Creating Input Devices</a>.</p>
</div>								<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/Creating_Input_Devices">https://wiki.unrealengine.com/Creating_Input_Devices</a>"				</div>
												<div id='catlinks' class='catlinks catlinks-allhidden'></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=Creating+Input+Devices&amp;returntoquery=action%3Dedit&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Creating+Input+Devices&amp;returntoquery=action%3Dedit" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/Creating_Input_Devices"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/index.php?title=Talk:Creating_Input_Devices&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view"><span><a href="/Creating_Input_Devices" >Read</a></span></li>
					<li id="ca-viewsource" class="selected"><span><a href="/index.php?title=Creating_Input_Devices&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Creating_Input_Devices&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="/index.php" id="searchform">
				<div id="simpleSearch">
						<input name="search" placeholder="Search" title="Search Epic Wiki [f]" accesskey="f" id="searchInput" />						<button type="submit" name="button" title="Search the pages for this text" id="searchButton"><img src="/skins/vector/images/search-ltr.png?303" alt="Search" width="12" height="13" /></button>								<input type='hidden' name="title" value="Special:Search"/>
		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(/images/WikiLogo_uev2.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Videos"><a href="/Videos">Videos</a></li>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Code"><a href="/Category:Code">Code</a></li>
			<li id="n-Games"><a href="/Category:Games">Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Creating_Input_Devices" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Creating_Input_Devices" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-info"><a href="/index.php?title=Creating_Input_Devices&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.edit.collapsibleFooter","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served in 0.063 secs. -->
	</body>
</html>
