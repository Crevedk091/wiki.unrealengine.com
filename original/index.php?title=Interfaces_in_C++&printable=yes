<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>Interfaces in C++ - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,follow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;printable=1&amp;skin=epic&amp;*" />
<link rel="stylesheet" href="/extensions/EpicVideoSystem/CSS/VideoSystem.css" /><meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;printable=1&amp;skin=epic&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Interfaces_in_C++","wgTitle":"Interfaces in C++","wgCurRevisionId":24125,"wgRevisionId":24125,"wgArticleId":595,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Templates","Tutorials","Code","Community Created Content"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Interfaces_in_C++","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"epic","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:2197af7670c41256853f340e275ede1b */
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=skins.epic.extras.js%7Cskins.epic.fancybox.js%7Cskins.epic.js%7Cskins.epic.qtip.js%7Cskins.epic.slimscroll.js&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["ext.voteNY","mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/epic/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
var experimentID = false;
var cxApi = null;
var variation = 0;
var fancyTitle = "";
var CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML;
$(document).ready(function(){
	if(experimentID != false)
	{
		$(head).append('<script src="//www.google-analytics.com/cx/api.js?experiment=' + experimentID + '" />' + '</scr' + 'ipt>');
		HandleExperiment();
	}
	else
	{
		CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);	
	}
});
function HandleExperiment()
{
	CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
	if(cxApi != null)
	{
		variation = cxApi.chooseVariation();
		cxApi.setChosenVariation(variation, experimentID);
		if(variation != cxApi.ORIGINAL_VARIATION && variation != cxApi.NO_CHOSEN_VARIATION && variation != cxApi.NOT_PARTICIPATING)
		{
			//var URL = document.location.href + (document.location.search != '' ? '&var=' : '?var=') + variation;
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
			//document.location.href = URL; 
			CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML + ' (variation ' + variation + ')';
			var test = "";
		}
		else
		{
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
		}
		ToggleExperimentContent(variation);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);
	}
	else
	{
		setTimeout("HandleExperiment()", 500);
	}
}

function ToggleExperimentContent(variation)
{
	$('.AB').hide();
	$('#variation_' + variation).show();
}
</script></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Interfaces_in_C skin-epic action-view vector-animateLayout">
		<!--<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>-->
		<!-- Google Tag Manager -->
		<noscript>
			<iframe src="//www.googletagmanager.com/ns.html?id=GTM-KWRD6D"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
		<script>
		(function (w, d, s, l, i) {
		w[l] = w[l] || []; w[l].push({
		'gtm.start':
		new Date().getTime(), event: 'gtm.js'
		}); var f = d.getElementsByTagName(s)[0],
		j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
		'//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
		})(window, document, 'script', 'dataLayer', 'GTM-KWRD6D');</script>
		<!-- End Google Tag Manager -->
		<div id="webThree">
		<div id="head"></div>
		<div id="pagedefault">		
                    <div id="pagenav">
                        <div>
                            <!-- Start of Other language links -->
                            <!-- End of Other language links -->
                            <div class="homelink_container">
                                <a href="https://wiki.unrealengine.com" title="UE4 Wiki Home" class="homelink">HOME</a>
                            </div>
                        </div>
                        <div style="clear:both;">
                        </div>
                    </div>	
		<div id="mw-navigation" style="max-width:972px;margin:1em auto 0 auto;">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="jumplink" onclick="$('#sidebar').toggle();">
					Navigation
				</div>
				<div id="sidebar">
					<!-- Start of jump page links -->
					<div class="largetitle">
						Quick Links
					</div>
					<div class="arrowlist">
						<!-- End of jump page links -->
						<!-- Start of related page links -->
						<!-- End of related page links -->								
						<div id="mw-panel">
							<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Community' aria-labelledby='p-Community-label'>
	<h3 id='p-Community-label'>Community</h3>
	<div class="body">
		<ul>
			<li id="n-UE4-Games"><a href="/Category:Games">UE4 Games</a></li>
			<li id="n-Dev-Blogs"><a href="/Developer_Blogs">Dev Blogs</a></li>
			<li id="n-Dev-Livestreams"><a href="/Developer_Livestreams">Dev Livestreams</a></li>
			<li id="n-Code-Sharing-Hub"><a href="/GitHub_Sharing_Hub">Code Sharing Hub</a></li>
			<li id="n-UE-User-Groups"><a href="/User_Group_Map">UE User Groups</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Learning_Resources' aria-labelledby='p-Learning_Resources-label'>
	<h3 id='p-Learning_Resources-label'>Learning Resources</h3>
	<div class="body">
		<ul>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Example-Projects"><a href="/Category:Example_Projects">Example Projects</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Software_and_Tools' aria-labelledby='p-Software_and_Tools-label'>
	<h3 id='p-Software_and_Tools-label'>Software and Tools</h3>
	<div class="body">
		<ul>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Art:-3D"><a href="/3D_Art_Resources">Art: 3D</a></li>
			<li id="n-Art:-2D"><a href="/2D_Art_Resources">Art: 2D</a></li>
			<li id="n-Audio"><a href="/Audio_Resources">Audio</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Modding' aria-labelledby='p-Modding-label'>
	<h3 id='p-Modding-label'>Modding</h3>
	<div class="body">
		<ul>
			<li id="n-Modding-Resources"><a href="/Category:Modding_Resources">Modding Resources</a></li>
			<li id="n-Moddable-Games"><a href="/Category:Moddable_Games">Moddable Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Epic_Official' aria-labelledby='p-Epic_Official-label'>
	<h3 id='p-Epic_Official-label'>Epic Official</h3>
	<div class="body">
		<ul>
			<li id="n-Website"><a href="https://www.unrealengine.com" rel="nofollow">Website</a></li>
			<li id="n-Learning-Resources"><a href="https://docs.unrealengine.com/latest/INT/" rel="nofollow">Learning Resources</a></li>
			<li id="n-Forums"><a href="https://forums.unrealengine.com/" rel="nofollow">Forums</a></li>
			<li id="n-Blog"><a href="https://www.unrealengine.com/blog" rel="nofollow">Blog</a></li>
			<li id="n-YouTube"><a href="https://www.youtube.com/UnrealEngine" rel="nofollow">YouTube</a></li>
			<li id="n-Twitch"><a href="http://www.twitch.tv/unrealengine" rel="nofollow">Twitch</a></li>
			<li id="n-Twitter"><a href="https://twitter.com/UnrealEngine" rel="nofollow">Twitter</a></li>
			<li id="n-Facebook"><a href="https://www.facebook.com/UnrealEngine" rel="nofollow">Facebook</a></li>
			<li id="n-Instagram"><a href="https://instagram.com/unrealengine/" rel="nofollow">Instagram</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Interfaces_in_C%2B%2B" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Interfaces_in_C%2B%2B" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="/index.php?title=Interfaces_in_C%2B%2B&amp;oldid=24125" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="/index.php?title=Interfaces_in_C%2B%2B&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
						</div>
					</div>
				</div>				
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/Interfaces_in_C%2B%2B"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="/Talk:Interfaces_in_C%2B%2B"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/Interfaces_in_C%2B%2B" >View</a></span></li>
					<li id="ca-viewsource"><span><a href="/index.php?title=Interfaces_in_C%2B%2B&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Interfaces_in_C%2B%2B&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=Interfaces+in+C%2B%2B&amp;returntoquery=printable%3Dyes&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Interfaces+in+C%2B%2B&amp;returntoquery=printable%3Dyes" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				</div>
			</div>
		</div>
		<div id="maincol">
		<div class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- Start of crumbs links -->
			<div class="crumbs">
			<p>
							</p>
			</div>
			<!-- End of crumbs links -->
			<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Interfaces in C++</span></h1>
			<div id="bodyContent">
				<div id="contentSub"></div>
																<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="aux">
<div>
<b>Rate this Article:</b> <div id="rating_"><div class="rating-score"><div class="voteboxrate">3.00</div></div><div class="rating-section"><img class="vote-rating-star" data-vote-the-vote="1" data-vote-id="" data-vote-action="3" data-vote-rating="3.00" data-vote-voted="0" id="rating__1" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="2" data-vote-id="" data-vote-action="3" data-vote-rating="3.00" data-vote-voted="0" id="rating__2" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="3" data-vote-id="" data-vote-action="3" data-vote-rating="3.00" data-vote-voted="0" id="rating__3" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="4" data-vote-id="" data-vote-action="3" data-vote-rating="3.00" data-vote-voted="0" id="rating__4" src="/extensions/VoteNY/images/star_off.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="5" data-vote-id="" data-vote-action="3" data-vote-rating="3.00" data-vote-voted="0" id="rating__5" src="/extensions/VoteNY/images/star_off.gif" alt="" /> <span class="rating-total">(12 votes)</span></div>
				<div class="rating-clear">
			</div></div>
</div>
<div>
<p>Approved for Versions:4.11+
</p>
</div>
</div>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Creating_The_Interface"><span class="tocnumber">2</span> <span class="toctext">Creating The Interface</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#ReactsToTimeOfDay.h"><span class="tocnumber">2.1</span> <span class="toctext">ReactsToTimeOfDay.h</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#ReactsToTimeOfDay.cpp"><span class="tocnumber">2.2</span> <span class="toctext">ReactsToTimeOfDay.cpp</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Using_An_Interface_With_C.2B.2B_Classes"><span class="tocnumber">3</span> <span class="toctext">Using An Interface With C++ Classes</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Flower.h"><span class="tocnumber">3.1</span> <span class="toctext">Flower.h</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Flower.cpp"><span class="tocnumber">3.2</span> <span class="toctext">Flower.cpp</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Frog.h"><span class="tocnumber">3.3</span> <span class="toctext">Frog.h</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Frog.cpp"><span class="tocnumber">3.4</span> <span class="toctext">Frog.cpp</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Determining_If_a_Given_Actor_Has_The_Interface"><span class="tocnumber">3.5</span> <span class="toctext">Determining If a Given Actor Has The Interface</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#The_Magic_Interfaces"><span class="tocnumber">3.6</span> <span class="toctext">The Magic Interfaces</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#Overriding_Behaviour_In_Blueprints"><span class="tocnumber">4</span> <span class="toctext">Overriding Behaviour In Blueprints</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#Summary"><span class="tocnumber">5</span> <span class="toctext">Summary</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p><i>Original Author</i> <a href="/User:Rama" title="User:Rama">Rama</a> (<a href="/User_talk:Rama" title="User talk:Rama">talk</a>)
</p><p><i>Updated &amp; Expanded for 4.11</i> <a href="/User:HuntaKiller" title="User:HuntaKiller">HuntaKiller</a>
Thank you for all that you contribute to the community Rama!
</p><p><a href="/User:Rama" title="User:Rama">Rama</a>&#160;: You're welcome and thank you for this lovely addition!
</p><p>Dear Community,
</p><p>Here's a tutorial on using <b>UE4 C++ Interfaces in 4.11+</b> 
</p><p>Interfaces allow different objects to share common functions, but allow objects to handle that function differently if it needs to. Any classes that use an interface must implement the functions that are associated with that interface.
</p><p>This gives you a lot of power over your game actors, allowing you to trigger events both in C++ and in blueprints that your game actors can handle differently.
</p><p>For example, the interface implemented in this tutorial enables you to have an interface like TimeBasedBehaviour, which has a function ReactToHighNoon, and have a bunch of actors respond to this event differently, each with their own behaviour.
</p><p>Flower actors that implement this interface could override the ReactToHighNoon method to open blossoms completely
Frog actors implementing it could override ReactToHighNoon to hide under rocks, for example
</p><p>You can then have an event, SunReachedHighNoon that is triggered anywhere (such as the level blueprint, in an actor, or a static blueprint library) which can take any actor, check if it implements the interface, and if it does it can call any of the functions of that interface and the actor will act according to how that specific actor has the behaviours defined.
</p><p>This means you can trigger events <i>anywhere</i> and as long as you have a pointer to your actor, you can ask it to do specific things without needing to know its types because you can <b>easily determine whether any given actor has an interface or not by casting an actor to that interface</b>. If the cast succeeds then the actor <i>does</i> implement the given interface, and you can call functions using that interface.
</p><p>We will implement two interface functions: one which forces you to implement default C++ behaviour on any class which uses the interface, a <b>BlueprintNativeEvent</b> called ReactToHighNoon(), and one <b>BlueprintImplementableEvent</b> which does <i>not</i> force you to define default C++ behaviour, called ReactToMidnight().
</p>
<h2><span class="mw-headline" id="Creating_The_Interface">Creating The Interface</span></h2>
<p>The following is an example implementation of a ReactsToTimeOfDay interface. 
</p><p>When following this tutorial and creating your interface, you'd replace ReactToHighNoon() with your function you want to force default behaviour, and ReactToMidnight() with your function that has no default behaviour.
</p><p>(If you wish the function to be treated as an event, then it must return void. If you wish the function to be able to be overridden in the BP editor, then it must have a non-void return type. Replace the return type of the function with a string or void if you want to perform a simplistic test. The reasoning is discussed further below in the Critical To Note section)
</p>
<h3><span class="mw-headline" id="ReactsToTimeOfDay.h">ReactsToTimeOfDay.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.</span>
&#160;
<span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;ReactsToTimeOfDay.generated.h&quot;</span>
&#160;
<span class="coMULTI">/* must have BlueprintType as a specifier to have this interface exposed to blueprints
   with this line you can easily add this interface to any blueprint class */</span>
UINTERFACE<span class="br0">&#40;</span>BlueprintType<span class="br0">&#41;</span>
<span class="kw2">class</span> MYPROJECT_API UReactsToTimeOfDay <span class="sy4">:</span> <span class="kw2">public</span> UInterface
<span class="br0">&#123;</span>
	GENERATED_UINTERFACE_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">class</span> MYPROJECT_API IReactsToTimeOfDay
<span class="br0">&#123;</span>
	GENERATED_IINTERFACE_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="co1">//classes using this interface must implement ReactToHighNoon</span>
	UFUNCTION<span class="br0">&#40;</span>BlueprintNativeEvent, BlueprintCallable, Category <span class="sy1">=</span> <span class="st0">&quot;MyCategory&quot;</span><span class="br0">&#41;</span>
		<span class="kw4">bool</span> ReactToHighNoon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//classes using this interface may implement ReactToMidnight</span>
	UFUNCTION<span class="br0">&#40;</span>BlueprintImplementableEvent, BlueprintCallable, Category <span class="sy1">=</span> <span class="st0">&quot;MyCategory&quot;</span><span class="br0">&#41;</span>
		<span class="kw4">bool</span> ReactToMidnight<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="ReactsToTimeOfDay.cpp">ReactsToTimeOfDay.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.</span>
&#160;
<span class="co2">#include &quot;MyProject.h&quot;</span>
<span class="co2">#include &quot;ReactsToTimeOfDay.h&quot;</span>
&#160;
UReactsToTimeOfDay<span class="sy4">::</span><span class="me2">UReactsToTimeOfDay</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw2">class</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer<span class="br0">&#41;</span>
	<span class="sy4">:</span> Super<span class="br0">&#40;</span>ObjectInitializer<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<h2><span class="mw-headline" id="Using_An_Interface_With_C.2B.2B_Classes">Using An Interface With C++ Classes</span></h2>
<p>You have to use <b>multiple inheritance</b>, and inherit from the IReactsToTimeOfDay class we created.
</p><p>The first inherited class will be the base class of your actor, anything you want, a ASkeletalMeshActor is used here as an example.
</p>
<h3><span class="mw-headline" id="Flower.h">Flower.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//..other includes may appear here depending on your class</span>
<span class="co2">#include &quot;ReactsToTimeOfDay.h&quot;</span>
<span class="co2">#include &quot;ASkeletalMeshActor.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> AFlower <span class="sy4">:</span> <span class="kw2">public</span> ASkeletalMeshActor,  <span class="kw2">public</span> IReactsToTimeOfDay
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
	<span class="coMULTI">/*
	... other AFlower properties and functions declared ...
	*/</span>
&#160;
	UFUNCTION<span class="br0">&#40;</span>BlueprintCallable, BlueprintNativeEvent, Category <span class="sy1">=</span> <span class="st0">&quot;MyCategory&quot;</span><span class="br0">&#41;</span>
		<span class="kw4">bool</span> ReactToHighNoon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw2">virtual</span> <span class="kw4">bool</span> ReactToHighNoon_Implementation<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p><i>virtual bool ReactToHighNoon_Implementation() override;</i>
This line tells your class that it has a function of this name and signature to inherit from the interface, which is how calls to the interface functions are able to interact with this class.
</p><p><i>UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "MyCategory")</i>
<i>bool ReactToHighNoon();</i>
This tells your class that you can both call and override this function in blueprints.
You need this part as well if you want to be able to override C++ functionality within BP, as BlueprintNativeEvents are intended to be used.
</p><p>Notice that ReactToMidnight(), the BlueprintImplementableEvent, is not defined here. A BlueprintImplementableEvent is <i>declared</i> (its existance) in our interface, but <i>defined</i> (its behaviour) in blueprints only.
</p>
<h3><span class="mw-headline" id="Flower.cpp">Flower.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//other flower.cpp code</span>
&#160;
<span class="kw4">bool</span> AFlower<span class="sy4">::</span><span class="me2">ReactToHighNoon_Implementation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Default behaviour for how flower would react at noon</span>
	<span class="co1">//OpenPetals();</span>
	<span class="co1">//AcceptBugs();</span>
	<span class="co1">//...</span>
&#160;
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span></pre></div></div>
<p>Any number of classes and subclasses can implement this interface using this format
</p>
<h3><span class="mw-headline" id="Frog.h">Frog.h</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//..other includes may appear here depending on your class</span>
<span class="co2">#include &quot;ReactsToTimeOfDay.h&quot;</span>
<span class="co2">#include &quot;AFrog.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> AFrog <span class="sy4">:</span> <span class="kw2">public</span> ACharacter,  <span class="kw2">public</span> IReactsToTimeOfDay
<span class="br0">&#123;</span>
	GENERATED_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
	<span class="coMULTI">/*
	... other AFrog properties and functions declared ...
	*/</span>
&#160;
	UFUNCTION<span class="br0">&#40;</span>BlueprintCallable, BlueprintNativeEvent, Category <span class="sy1">=</span> <span class="st0">&quot;MyCategory&quot;</span><span class="br0">&#41;</span>
		<span class="kw4">bool</span> ReactToHighNoon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw2">virtual</span> <span class="kw4">bool</span> ReactToHighNoon_Implementation<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<h3><span class="mw-headline" id="Frog.cpp">Frog.cpp</span></h3>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//other Frog code</span>
&#160;
<span class="kw4">bool</span> AFrog<span class="sy4">::</span><span class="me2">ReactToHighNoon_Implementation</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Default behaviour for how a frog would react at noon</span>
	<span class="co1">//GoSwim();</span>
	<span class="co1">//...</span>
&#160;
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Determining_If_a_Given_Actor_Has_The_Interface">Determining If a Given Actor Has The Interface</span></h3>
<p>To determine if an actor implements an interface in either C++ or blueprint, simply cast your class to the interface, if it returns NULL then the object is not using it. If it is successful, you can use that pointer cast to the interface to call your function, which will execute from the proper class.
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//Example: somewhere else in code we are trying to see if our object reacts to time of day</span>
&#160;
<span class="co1">//Some pointer is defined to any class inheriting from UObject</span>
UObject<span class="sy2">*</span> pointerToAnyUObject<span class="sy4">;</span>
&#160;
<span class="co1">//....</span>
&#160;
&#160;
	IReactsToTimeOfDay<span class="sy2">*</span> TheInterface <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>IReactsToTimeOfDay<span class="sy1">&gt;</span><span class="br0">&#40;</span>pointerToAnyUObject<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>TheInterface<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Don't call your functions directly, use the 'Execute_' prefix</span>
		<span class="co1">//the Execute_ReactToHighNoon and Execute_ReactToMidnight are generated on compile</span>
		<span class="co1">//you may need to compile before these functions will appear</span>
		TheInterface<span class="sy2">-</span><span class="sy1">&gt;</span>Execute_ReactToHighNoon <span class="br0">&#40;</span>pointerToAnyUObject<span class="br0">&#41;</span><span class="sy4">;</span>
		TheInterface<span class="sy2">-</span><span class="sy1">&gt;</span>Execute_ReactToMidnight <span class="br0">&#40;</span>pointerToAnyUObject<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
&#160;
<span class="co1">//end of code segment</span></pre></div></div>
<p><br />
<b>Critical To Note</b>
</p>
<ul>
<li> Whenever calling your interface functions in C++, never call the direct functions, always use the one with the Execute_ prefix
</li>
<li> Your function <i>MUST</i> have a return value. If your function returns void, UE4 treats it as an event, and you cannot override it (it will not appear in BP as a function you can override). Just have it return a garbage value (like I do above) if you don't need a return value.
</li>
</ul>
<p><br />
</p>
<h3><span class="mw-headline" id="The_Magic_Interfaces">The Magic Interfaces</span></h3>
<p><i>TheInterface-&gt;Execute_ReactToHighNoon()</i>
</p><p>From the above code you can see that the function is being called off of the interface, you never even need to know what type of object you're dealing with, just whether it supports the interface you need.
</p><p>It produces different results depending on the actual class it is, calling the overridden function.
This is called polymorphism.
</p><p><br />
</p>
<h2><span class="mw-headline" id="Overriding_Behaviour_In_Blueprints">Overriding Behaviour In Blueprints</span></h2>
<p>Once this is all implemented, the classes that you have set up with the interface in C++ will have its interface functions appear with the blueprint's variables and other functions.
</p><p><a href="/File:InterfaceBP1.png" class="image"><img alt="InterfaceBP1.png" src="https://d26ilriwvtzlb.cloudfront.net/7/7b/InterfaceBP1.png" width="623" height="480" /></a>
</p><p><a href="/File:InterfaceBP2.png" class="image"><img alt="InterfaceBP2.png" src="https://d26ilriwvtzlb.cloudfront.net/6/6a/InterfaceBP2.png" width="620" height="278" /></a>
</p><p><br />
Again, your function <b>must</b> have a return value for it to appear in this list, otherwise it is considered an event and cannot be overridden (AFAIK).
</p>
<h2><span class="mw-headline" id="Summary">Summary</span></h2>
<p>You can trigger global events that only certain actors will respond to <br />
</p><p>Each actor can respond to an event in their own unique way.
</p><p>While it's a little bit more complicated of a setup it helps keeping the code <i>very</i> simple and is much more performance friendly than casting to multiple different types of classes!
</p><p><a href="/User:Rama" title="User:Rama">Rama</a> (<a href="/User_talk:Rama" title="User talk:Rama">talk</a>)<br />
<a href="/User:HuntaKiller" title="User:HuntaKiller">HuntaKiller</a>
</p>
<!-- 
NewPP limit report
CPU time usage: 0.075 seconds
Real time usage: 0.141 seconds
Preprocessor visited node count: 128/1000000
Preprocessor generated node count: 250/1000000
Post‐expand include size: 168/2097152 bytes
Template argument size: 12/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->
</div>												<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/index.php?title=Interfaces_in_C%2B%2B&amp;oldid=24125">https://wiki.unrealengine.com/index.php?title=Interfaces_in_C%2B%2B&amp;oldid=24125</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="/Category:Code" title="Category:Code">Code</a></li><li><a href="/Category:Community_Created_Content" title="Category:Community Created Content">Community Created Content</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden category: <ul><li><a href="/Category:Templates" title="Category:Templates">Templates</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		</div>
		</div>
		
		<div id="footer">
			<div id="brand">

			</div>
			<div id="legal">
				<div id="copyright">
					&copy; 2004-2015, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic's trademarks or registered trademarks in the US and elsewhere.
				</div>
				<div id="terms">
					<a target="_blank" href="http://epicgames.com/tou">TERMS OF USE</a> | <a target="_blank" href="http://epicgames.com/privacynotice">PRIVACY POLICY</a>
				</div>
			</div>
		</div>
	</div>
		<!--<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>-->
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="/extensions/EpicSearchSystem/Javascript/Search.js?303"></script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<!-- Served in 0.185 secs. -->		<img src="https://tracking.unrealengine.com/track.png" width="1" height="1">
		<!--<script type="text/javascript">
			setTimeout(function () {
				var a = document.createElement("script");
				var b = document.getElementsByTagName("script")[0];
				a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
				a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
			}, 1);
		</script>-->
	</body>
</html>

		