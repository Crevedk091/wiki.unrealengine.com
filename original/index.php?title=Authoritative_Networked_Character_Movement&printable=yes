<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>Authoritative Networked Character Movement - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,follow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;printable=1&amp;skin=epic&amp;*" />
<link rel="stylesheet" href="/extensions/EpicVideoSystem/CSS/VideoSystem.css" /><meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;printable=1&amp;skin=epic&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Authoritative_Networked_Character_Movement","wgTitle":"Authoritative Networked Character Movement","wgCurRevisionId":21651,"wgRevisionId":21651,"wgArticleId":4261,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Templates","Tutorials","Code","Community Created Content"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Authoritative_Networked_Character_Movement","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"epic","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:2197af7670c41256853f340e275ede1b */
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=skins.epic.extras.js%7Cskins.epic.fancybox.js%7Cskins.epic.js%7Cskins.epic.qtip.js%7Cskins.epic.slimscroll.js&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["ext.voteNY","mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/epic/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
var experimentID = false;
var cxApi = null;
var variation = 0;
var fancyTitle = "";
var CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML;
$(document).ready(function(){
	if(experimentID != false)
	{
		$(head).append('<script src="//www.google-analytics.com/cx/api.js?experiment=' + experimentID + '" />' + '</scr' + 'ipt>');
		HandleExperiment();
	}
	else
	{
		CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);	
	}
});
function HandleExperiment()
{
	CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
	if(cxApi != null)
	{
		variation = cxApi.chooseVariation();
		cxApi.setChosenVariation(variation, experimentID);
		if(variation != cxApi.ORIGINAL_VARIATION && variation != cxApi.NO_CHOSEN_VARIATION && variation != cxApi.NOT_PARTICIPATING)
		{
			//var URL = document.location.href + (document.location.search != '' ? '&var=' : '?var=') + variation;
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
			//document.location.href = URL; 
			CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML + ' (variation ' + variation + ')';
			var test = "";
		}
		else
		{
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
		}
		ToggleExperimentContent(variation);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);
	}
	else
	{
		setTimeout("HandleExperiment()", 500);
	}
}

function ToggleExperimentContent(variation)
{
	$('.AB').hide();
	$('#variation_' + variation).show();
}
</script></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Authoritative_Networked_Character_Movement skin-epic action-view vector-animateLayout">
		<!--<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>-->
		<!-- Google Tag Manager -->
		<noscript>
			<iframe src="//www.googletagmanager.com/ns.html?id=GTM-KWRD6D"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
		<script>
		(function (w, d, s, l, i) {
		w[l] = w[l] || []; w[l].push({
		'gtm.start':
		new Date().getTime(), event: 'gtm.js'
		}); var f = d.getElementsByTagName(s)[0],
		j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
		'//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
		})(window, document, 'script', 'dataLayer', 'GTM-KWRD6D');</script>
		<!-- End Google Tag Manager -->
		<div id="webThree">
		<div id="head"></div>
		<div id="pagedefault">		
                    <div id="pagenav">
                        <div>
                            <!-- Start of Other language links -->
                            <!-- End of Other language links -->
                            <div class="homelink_container">
                                <a href="https://wiki.unrealengine.com" title="UE4 Wiki Home" class="homelink">HOME</a>
                            </div>
                        </div>
                        <div style="clear:both;">
                        </div>
                    </div>	
		<div id="mw-navigation" style="max-width:972px;margin:1em auto 0 auto;">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="jumplink" onclick="$('#sidebar').toggle();">
					Navigation
				</div>
				<div id="sidebar">
					<!-- Start of jump page links -->
					<div class="largetitle">
						Quick Links
					</div>
					<div class="arrowlist">
						<!-- End of jump page links -->
						<!-- Start of related page links -->
						<!-- End of related page links -->								
						<div id="mw-panel">
							<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Community' aria-labelledby='p-Community-label'>
	<h3 id='p-Community-label'>Community</h3>
	<div class="body">
		<ul>
			<li id="n-UE4-Games"><a href="/Category:Games">UE4 Games</a></li>
			<li id="n-Dev-Blogs"><a href="/Developer_Blogs">Dev Blogs</a></li>
			<li id="n-Dev-Livestreams"><a href="/Developer_Livestreams">Dev Livestreams</a></li>
			<li id="n-Code-Sharing-Hub"><a href="/GitHub_Sharing_Hub">Code Sharing Hub</a></li>
			<li id="n-UE-User-Groups"><a href="/User_Group_Map">UE User Groups</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Learning_Resources' aria-labelledby='p-Learning_Resources-label'>
	<h3 id='p-Learning_Resources-label'>Learning Resources</h3>
	<div class="body">
		<ul>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Example-Projects"><a href="/Category:Example_Projects">Example Projects</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Software_and_Tools' aria-labelledby='p-Software_and_Tools-label'>
	<h3 id='p-Software_and_Tools-label'>Software and Tools</h3>
	<div class="body">
		<ul>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Art:-3D"><a href="/3D_Art_Resources">Art: 3D</a></li>
			<li id="n-Art:-2D"><a href="/2D_Art_Resources">Art: 2D</a></li>
			<li id="n-Audio"><a href="/Audio_Resources">Audio</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Modding' aria-labelledby='p-Modding-label'>
	<h3 id='p-Modding-label'>Modding</h3>
	<div class="body">
		<ul>
			<li id="n-Modding-Resources"><a href="/Category:Modding_Resources">Modding Resources</a></li>
			<li id="n-Moddable-Games"><a href="/Category:Moddable_Games">Moddable Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Epic_Official' aria-labelledby='p-Epic_Official-label'>
	<h3 id='p-Epic_Official-label'>Epic Official</h3>
	<div class="body">
		<ul>
			<li id="n-Website"><a href="https://www.unrealengine.com" rel="nofollow">Website</a></li>
			<li id="n-Learning-Resources"><a href="https://docs.unrealengine.com/latest/INT/" rel="nofollow">Learning Resources</a></li>
			<li id="n-Forums"><a href="https://forums.unrealengine.com/" rel="nofollow">Forums</a></li>
			<li id="n-Blog"><a href="https://www.unrealengine.com/blog" rel="nofollow">Blog</a></li>
			<li id="n-YouTube"><a href="https://www.youtube.com/UnrealEngine" rel="nofollow">YouTube</a></li>
			<li id="n-Twitch"><a href="http://www.twitch.tv/unrealengine" rel="nofollow">Twitch</a></li>
			<li id="n-Twitter"><a href="https://twitter.com/UnrealEngine" rel="nofollow">Twitter</a></li>
			<li id="n-Facebook"><a href="https://www.facebook.com/UnrealEngine" rel="nofollow">Facebook</a></li>
			<li id="n-Instagram"><a href="https://instagram.com/unrealengine/" rel="nofollow">Instagram</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Authoritative_Networked_Character_Movement" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Authoritative_Networked_Character_Movement" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="/index.php?title=Authoritative_Networked_Character_Movement&amp;oldid=21651" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="/index.php?title=Authoritative_Networked_Character_Movement&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
						</div>
					</div>
				</div>				
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/Authoritative_Networked_Character_Movement"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/index.php?title=Talk:Authoritative_Networked_Character_Movement&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/Authoritative_Networked_Character_Movement" >View</a></span></li>
					<li id="ca-viewsource"><span><a href="/index.php?title=Authoritative_Networked_Character_Movement&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Authoritative_Networked_Character_Movement&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=Authoritative+Networked+Character+Movement&amp;returntoquery=printable%3Dyes&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Authoritative+Networked+Character+Movement&amp;returntoquery=printable%3Dyes" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				</div>
			</div>
		</div>
		<div id="maincol">
		<div class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- Start of crumbs links -->
			<div class="crumbs">
			<p>
							</p>
			</div>
			<!-- End of crumbs links -->
			<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Authoritative Networked Character Movement</span></h1>
			<div id="bodyContent">
				<div id="contentSub"></div>
																<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="aux">
<div>
<b>Rate this Article:</b> <div id="rating_"><div class="rating-score"><div class="voteboxrate">5.00</div></div><div class="rating-section"><img class="vote-rating-star" data-vote-the-vote="1" data-vote-id="" data-vote-action="3" data-vote-rating="5.00" data-vote-voted="0" id="rating__1" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="2" data-vote-id="" data-vote-action="3" data-vote-rating="5.00" data-vote-voted="0" id="rating__2" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="3" data-vote-id="" data-vote-action="3" data-vote-rating="5.00" data-vote-voted="0" id="rating__3" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="4" data-vote-id="" data-vote-action="3" data-vote-rating="5.00" data-vote-voted="0" id="rating__4" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="5" data-vote-id="" data-vote-action="3" data-vote-rating="5.00" data-vote-voted="0" id="rating__5" src="/extensions/VoteNY/images/star_on.gif" alt="" /> <span class="rating-total">(4 votes)</span></div>
				<div class="rating-clear">
			</div></div>
</div>
<div>
<p>Approved for Versions:(please verify)
</p>
</div>
</div>
<p>Original Author: <a href="/User:DarthCoder" title="User:DarthCoder">DarthCoder</a> (<a href="/index.php?title=User_talk:DarthCoder&amp;action=edit&amp;redlink=1" class="new" title="User talk:DarthCoder (page does not exist)">talk</a>)
</p><p>Implementing proper authoritative character movement is a very complex, yet under documented task. This tutorial serves as an introduction to implementing networked movement features in Unreal 4 by extending the <a rel="nofollow" class="external text" href="https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/GameFramework/UCharacterMovementComponent/index.html">UCharacterMovementComponent</a>. This will be an intermediate to advanced tutorial, and will require using C++ since saved moves do not appear to be supported in Blueprint. Most of my knowledge of the character movement system comes from the Unreal Tournament 4 source code, so some similarities will be apparent.
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Initial_Setup"><span class="tocnumber">1</span> <span class="toctext">Initial Setup</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Implementing_Movement_Abilities"><span class="tocnumber">2</span> <span class="toctext">Implementing Movement Abilities</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Sprint"><span class="tocnumber">2.1</span> <span class="toctext">Sprint</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#Unlimited_Sprint"><span class="tocnumber">2.1.1</span> <span class="toctext">Unlimited Sprint</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="#Only_Sprint_Forward"><span class="tocnumber">2.1.2</span> <span class="toctext">Only Sprint Forward</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-6"><a href="#Boost_Dodge"><span class="tocnumber">2.2</span> <span class="toctext">Boost Dodge</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Double_Jump"><span class="tocnumber">2.3</span> <span class="toctext">Double Jump</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="#Cooldown_Timers"><span class="tocnumber">3</span> <span class="toctext">Cooldown Timers</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#Conclusion"><span class="tocnumber">4</span> <span class="toctext">Conclusion</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Other_Resources"><span class="tocnumber">5</span> <span class="toctext">Other Resources</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="Initial_Setup">Initial Setup</span></h2>
<p>To implement custom networked character movement, you must extend the <a rel="nofollow" class="external text" href="https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/GameFramework/UCharacterMovementComponent/index.html">UCharacterMovementComponent</a> and saved move classes. For starters let's get a class setup with all the boilerplate code out of the way. (thanks to antsonthetree for providing the code to fix this for the latest Unreal 4 version)
<a href="/File:Create-character-movement-class.jpg" class="image"><img alt="Create-character-movement-class.jpg" src="https://d26ilriwvtzlb.cloudfront.net/b/b5/Create-character-movement-class.jpg" width="950" height="574" /></a>
</p><p><i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co2">#pragma once</span>
&#160;
<span class="co2">#include &quot;GameFramework/CharacterMovementComponent.h&quot;</span>
<span class="co2">#include &quot;MyCharacterMovement.generated.h&quot;</span>
&#160;
UCLASS<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw2">class</span> UMyCharacterMovement <span class="sy4">:</span> <span class="kw2">public</span> UCharacterMovementComponent
<span class="br0">&#123;</span>
	GENERATED_UCLASS_BODY<span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
	<span class="co1">//============================================================================================</span>
	<span class="co1">//Replication</span>
	<span class="co1">//============================================================================================</span>
&#160;
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	<span class="kw2">friend</span> <span class="kw2">class</span> FSavedMove_ExtendedMyMovement<span class="sy4">;</span>
&#160;
	<span class="kw2">virtual</span> <span class="kw4">void</span> UpdateFromCompressedFlags<span class="br0">&#40;</span><span class="kw4">uint8</span> Flags<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="kw2">virtual</span> <span class="kw2">class</span> FNetworkPredictionData_Client<span class="sy2">*</span> GetPredictionData_Client<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">class</span> FSavedMove_MyMovement <span class="sy4">:</span> <span class="kw2">public</span> FSavedMove_Character
<span class="br0">&#123;</span>
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	<span class="kw4">typedef</span> FSavedMove_Character Super<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Resets all saved variables.</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Clear<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Store input commands in the compressed flags.</span>
	<span class="kw2">virtual</span> <span class="kw4">uint8</span> GetCompressedFlags<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief This is used to check whether or not two moves can be combined into one.</span>
	<span class="co1">///Basically you just check to make sure that the saved variables are the same.</span>
	<span class="kw2">virtual</span> <span class="kw4">bool</span> CanCombineWith<span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Sets up the move before sending it to the server. </span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetMoveFor<span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character <span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span> override<span class="sy4">;</span>
	<span class="co1">///@brief Sets variables on character movement component before making a predictive correction.</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> PrepMoveFor<span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">class</span> FNetworkPredictionData_Client_MyMovement <span class="sy4">:</span> <span class="kw2">public</span> FNetworkPredictionData_Client_Character
<span class="br0">&#123;</span>
<span class="kw2">public</span><span class="sy4">:</span>
        FNetworkPredictionData_Client_MyMovement<span class="br0">&#40;</span><span class="kw4">const</span> UCharacterMovementComponent<span class="sy3">&amp;</span> ClientMovement<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">typedef</span> FNetworkPredictionData_Client_Character Super<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Allocates a new copy of our custom saved move</span>
	<span class="kw2">virtual</span> FSavedMovePtr AllocateNewMove<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co2">#include &quot;MyCharacterMovement.h&quot;</span>
&#160;
UMyCharacterMovement<span class="sy4">::</span><span class="me2">UMyCharacterMovement</span><span class="br0">&#40;</span><span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer<span class="br0">&#41;</span>
	<span class="sy4">:</span>Super<span class="br0">&#40;</span>ObjectInitializer<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="co1">//============================================================================================</span>
<span class="co1">//Replication</span>
<span class="co1">//============================================================================================</span>
&#160;
<span class="co1">//Set input flags on character from saved inputs</span>
<span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">UpdateFromCompressedFlags</span><span class="br0">&#40;</span><span class="kw4">uint8</span> Flags<span class="br0">&#41;</span><span class="co1">//Client only</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">UpdateFromCompressedFlags</span><span class="br0">&#40;</span>Flags<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw2">class</span> FNetworkPredictionData_Client<span class="sy2">*</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">GetPredictionData_Client</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	check<span class="br0">&#40;</span>PawnOwner <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span><span class="sy4">;</span>
	check<span class="br0">&#40;</span>PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>Role <span class="sy1">&lt;</span> ROLE_Authority<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>ClientPredictionData<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		UMyCharacterMovement<span class="sy2">*</span> MutableThis <span class="sy1">=</span> <span class="kw2">const_cast</span><span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy2">*</span><span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="kw3">this</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		MutableThis<span class="sy2">-</span><span class="sy1">&gt;</span>ClientPredictionData <span class="sy1">=</span> <span class="kw3">new</span> FNetworkPredictionData_Client_MyMovement<span class="br0">&#40;</span><span class="sy2">*</span><span class="kw3">this</span><span class="br0">&#41;</span><span class="sy4">;</span>
		MutableThis<span class="sy2">-</span><span class="sy1">&gt;</span>ClientPredictionData<span class="sy2">-</span><span class="sy1">&gt;</span>MaxSmoothNetUpdateDist <span class="sy1">=</span> <span class="nu0">92</span>.<span class="me1">f</span><span class="sy4">;</span>
		MutableThis<span class="sy2">-</span><span class="sy1">&gt;</span>ClientPredictionData<span class="sy2">-</span><span class="sy1">&gt;</span>NoSmoothNetUpdateDist <span class="sy1">=</span> <span class="nu0">140</span>.<span class="me1">f</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> ClientPredictionData<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
&#160;
<span class="br0">&#125;</span>
&#160;
<span class="kw4">uint8</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">GetCompressedFlags</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">uint8</span> Result <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">GetCompressedFlags</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
&#160;
	<span class="kw1">return</span> Result<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">bool</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
&#160;
	<span class="kw1">return</span> Super<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span>NewMove, Character, MaxDelta<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character <span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>Character, InDeltaTime, NewAccel, ClientData<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
&#160;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span>Character<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
&#160;
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
FNetworkPredictionData_Client_MyMovement<span class="sy4">::</span><span class="me2">FNetworkPredictionData_Client_MyMovement</span><span class="br0">&#40;</span><span class="kw4">const</span> UCharacterMovementComponent<span class="sy3">&amp;</span> ClientMovement<span class="br0">&#41;</span>
<span class="sy4">:</span> Super<span class="br0">&#40;</span>ClientMovement<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&#160;
<span class="br0">&#125;</span>
&#160;
FSavedMovePtr FNetworkPredictionData_Client_MyMovement<span class="sy4">::</span><span class="me2">AllocateNewMove</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> FSavedMovePtr<span class="br0">&#40;</span><span class="kw3">new</span> FSavedMove_MyMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>In order to actually use the custom component we'll have to set the default subobject class in the character class constructor.
</p><p><i>MyCharacter.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1">AMyCharacter<span class="sy4">::</span><span class="me2">AMyCharacter</span><span class="br0">&#40;</span><span class="kw4">const</span> FObjectInitializer<span class="sy3">&amp;</span> ObjectInitializer<span class="br0">&#41;</span>
	<span class="sy4">:</span>Super<span class="br0">&#40;</span>ObjectInitializer.<span class="me1">SetDefaultSubobjectClass</span><span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>ACharacter<span class="sy4">::</span><span class="me2">CharacterMovementComponentName</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//Do normal stuff in constructor...</span>
<span class="br0">&#125;</span></pre></div></div>
<h2><span class="mw-headline" id="Implementing_Movement_Abilities">Implementing Movement Abilities</span></h2>
<h3><span class="mw-headline" id="Sprint">Sprint</span></h3>
<p>Sprint is an example of an ability that can be implemented quite easily using just the compressed flags. To start with, we'll implement a basic unlimited sprint ability. We'll gradually improve it as we go along.
</p>
<h4><span class="mw-headline" id="Unlimited_Sprint">Unlimited Sprint</span></h4>
<p>The first thing to do is add the input events to the character class.
</p><p><i>MyCharacter.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AMyCharacter<span class="sy4">::</span><span class="me2">SetupPlayerInputComponent</span><span class="br0">&#40;</span><span class="kw2">class</span> UInputComponent<span class="sy2">*</span> InputComponent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	check<span class="br0">&#40;</span>InputComponent<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAction<span class="br0">&#40;</span><span class="st0">&quot;Sprint&quot;</span>, IE_Pressed, <span class="kw3">this</span>, <span class="sy3">&amp;</span>AMyCharacter<span class="sy4">::</span><span class="me2">StartSprinting</span><span class="br0">&#41;</span><span class="sy4">;</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAction<span class="br0">&#40;</span><span class="st0">&quot;Sprint&quot;</span>, IE_Released, <span class="kw3">this</span>, <span class="sy3">&amp;</span>AMyCharacter<span class="sy4">::</span><span class="me2">StopSprinting</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Other input bindings...</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> AMyCharacter<span class="sy4">::</span><span class="me2">StartSprinting</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	UMyCharacterMovement<span class="sy2">*</span> MoveComp <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>MoveComp<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MoveComp<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprinting<span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> AMyCharacter<span class="sy4">::</span><span class="me2">StopSprinting</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	UMyCharacterMovement<span class="sy2">*</span> MoveComp <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>MoveComp<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MoveComp<span class="sy2">-</span><span class="sy1">&gt;</span>SetSprinting<span class="br0">&#40;</span><span class="kw2">false</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The character movement component will need to have the SetSprinting method, and also a few properties. Add the following properties and methods to <i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1">UPROPERTY<span class="br0">&#40;</span>EditAnywhere, Category <span class="sy1">=</span> <span class="st0">&quot;Sprint&quot;</span><span class="br0">&#41;</span>
<span class="kw4">float</span> SprintSpeedMultiplier<span class="sy4">;</span>
UPROPERTY<span class="br0">&#40;</span>EditAnywhere, Category <span class="sy1">=</span> <span class="st0">&quot;Sprint&quot;</span><span class="br0">&#41;</span>
<span class="kw4">float</span> SprintAccelerationMultiplier<span class="sy4">;</span>
&#160;
<span class="co1">///@brief Activate or deactivate sprint.</span>
<span class="kw4">void</span> SetSprinting<span class="br0">&#40;</span><span class="kw4">bool</span> bSprinting<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="co1">///@brief Flag for activating sprint.</span>
<span class="kw4">uint8</span> bWantsToSprint <span class="sy4">:</span> <span class="nu0">1</span><span class="sy4">;</span>
&#160;
<span class="co1">///@brief Override maximum speed during sprint.</span>
<span class="kw2">virtual</span> <span class="kw4">float</span> GetMaxSpeed<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span>
<span class="co1">///@brief Override maximum acceleration for sprint.</span>
<span class="kw2">virtual</span> <span class="kw4">float</span> GetMaxAcceleration<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span></pre></div></div>
<p>SetSprinting will be called to activate the sprint ability, and should need no explanation. GetMaxSpeed and GetMaxAcceleration use the sprint flag to determine whether or not to apply the speed and acceleration multipliers. This is all you need for a single player game, but try to run this in a networked game you'll quickly discover it doesn't work. The client can't sprint because the server doesn't know it's trying to, so it keeps getting corrected back to the normal walking speed.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">SetSprinting</span><span class="br0">&#40;</span><span class="kw4">bool</span> bSprinting<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	bWantsToSprint <span class="sy1">=</span> bSprinting<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">float</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">GetMaxSpeed</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">float</span> MaxSpeed <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">GetMaxSpeed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>bWantsToSprint<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MaxSpeed <span class="sy2">*</span><span class="sy1">=</span> SprintSpeedMultiplier<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> MaxSpeed<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">float</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">GetMaxAcceleration</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">float</span> MaxAccel <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">GetMaxAcceleration</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>bWantsToSprint<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MaxAccel <span class="sy2">*</span><span class="sy1">=</span> SprintAccelerationMultiplier<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> MaxAccel<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>To make this replicate to the server and work with the prediction system we'll finally need to use the saved move class we inherited from earlier. We need to add a flag corresponding to the character movement component's sprint flag. This flag is used to re-trigger the ability later if a network correction forces us to resimulate the move. 
</p><p><i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw2">class</span> FSavedMove_MyMovement <span class="sy4">:</span> <span class="kw2">public</span> FSavedMove_Character
<span class="br0">&#123;</span>
<span class="kw2">public</span><span class="sy4">:</span>
&#160;
	<span class="kw4">typedef</span> FSavedMove_Character Super<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Resets all saved variables.</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> Clear<span class="br0">&#40;</span><span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Store input commands in the compressed flags.</span>
	<span class="kw2">virtual</span> <span class="kw4">uint8</span> GetCompressedFlags<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief This is used to check whether or not two moves can be combined into one.</span>
	<span class="co1">///Basically you just check to make sure that the saved variables are the same.</span>
	<span class="kw2">virtual</span> <span class="kw4">bool</span> CanCombineWith<span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span> override<span class="sy4">;</span>
&#160;
	<span class="co1">///@brief Sets up the move before sending it to the server. </span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> SetMoveFor<span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character <span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span> override<span class="sy4">;</span>
	<span class="co1">///@brief Sets variables on character movement component before making a predictive correction.</span>
	<span class="kw2">virtual</span> <span class="kw4">void</span> PrepMoveFor<span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
	<span class="kw4">uint8</span> bSavedWantsToSprint <span class="sy4">:</span> <span class="nu0">1</span><span class="sy4">;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p>The character movement component will create these saved moves and fill them with data needed to replay moves on the server. The implementation of the saved move is pretty much just responsible for copying the variables needed to make the movement calculations back and forth between the saved move and the character movement component. Also, the SprintSpeedMultiplier and SprintAccelerationMultiplier should be given sensible default values in the constructor (2.0f should work fine).
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">UpdateFromCompressedFlags</span><span class="br0">&#40;</span><span class="kw4">uint8</span> Flags<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">UpdateFromCompressedFlags</span><span class="br0">&#40;</span>Flags<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//The Flags parameter contains the compressed input flags that are stored in the saved move.</span>
	<span class="co1">//UpdateFromCompressed flags simply copies the flags from the saved move into the movement component.</span>
	<span class="co1">//It basically just resets the movement component to the state when the move was made so it can simulate from there.</span>
	bWantsToSprint <span class="sy1">=</span> <span class="br0">&#40;</span>Flags<span class="sy3">&amp;</span>FSavedMove_Character<span class="sy4">::</span><span class="me2">FLAG_Custom_0</span><span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character<span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>Character, InDeltaTime, NewAccel, ClientData<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UExtendedCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UExtendedCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//This is literally just the exact opposite of UpdateFromCompressed flags. We're taking the input</span>
		<span class="co1">//from the player and storing it in the saved move.</span>
		bSavedWantsToSprint <span class="sy1">=</span> CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>bWantsToSprint<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Clear variables back to their default values.</span>
	bSavedWantsToSprint <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co1">//This is where we compress the flags saved in SetMoveFor. We're basically just ORing a bunch of them together.</span>
<span class="kw4">uint8</span> FSavedMove_ExtendedMovement<span class="sy4">::</span><span class="me2">GetCompressedFlags</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">uint8</span> Result <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">GetCompressedFlags</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>bSavedWantsToSprint<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		Result <span class="sy3">|</span><span class="sy1">=</span> FLAG_Custom_0<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> Result<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">bool</span> FSavedMove_ExtendedMovement<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="co1">//This pretty much just tells the engine if it can optimize by combining saved moves. There doesn't appear to be</span>
	<span class="co1">//any problem with leaving it out, but it seems that it's good practice to implement this anyways.</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>bSavedWantsToSprint <span class="sy3">!</span><span class="sy1">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>FSavedMove_ExtendedMovement<span class="sy2">*</span><span class="br0">&#41;</span><span class="sy3">&amp;</span>NewMove<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bSavedWantsToSprint<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> Super<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span>NewMove, Character, MaxDelta<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>At this point you should have a basic sprint ability that can be triggered from either the client, or server. However, the sprint ability right now isn't very customizable. The player can sprint sideways and backwards just as easily as forwards, and can also sprint forever with no breaks between.
</p>
<h4><span class="mw-headline" id="Only_Sprint_Forward">Only Sprint Forward</span></h4>
<p>Disclaimer: This is only my current implementation. If I come up with a better way then I'll update this tutorial.
</p><p>There are a couple ways to prevent the player from sprinting sideways and backwards. One way would be to store the forward key state in the compressed flags just like we did with bWantsToSprint. This is fairly easy to do, but it uses up a flag that could be used for other abilities. It's actually possible to prevent the player from sprinting in other directions without sending any additional data.
</p><p>Since inputs are handled by the saved move, as long as our calculations only rely on things that are replicated (velocity and rotation in this example), then we can make calculations based on them. Start by adding a method to check that we're moving forward.
</p><p><i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">///@return Whether or not the character is currently moving in a forward direction.</span>
<span class="kw4">bool</span> IsMovingForward<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy4">;</span></pre></div></div>
<p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">IsMovingForward</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>PawnOwner<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	FVector Forward <span class="sy1">=</span> PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>GetActorForwardVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	FVector MoveDirection <span class="sy1">=</span> Velocity.<span class="me1">GetSafeNormal</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Ignore vertical movement</span>
	Forward.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
	MoveDirection.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
&#160;
	<span class="kw4">float</span> VelocityDot <span class="sy1">=</span> FVector<span class="sy4">::</span><span class="me2">DotProduct</span><span class="br0">&#40;</span>Forward, MoveDirection<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">return</span> VelocityDot <span class="sy1">&gt;</span> <span class="nu17">0.7f</span><span class="sy4">;</span><span class="co1">//Check to make sure difference between headings is not too great.</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Then we simply check to make sure we're moving forward before applying the sprint speed boost in GetMaxSpeed and GetMaxAcceleration
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">float</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">GetMaxSpeed</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">float</span> MaxSpeed <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">GetMaxSpeed</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>bWantsToSprint <span class="sy3">&amp;&amp;</span> IsMovingForward<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MaxSpeed <span class="sy2">*</span><span class="sy1">=</span> SprintSpeedMultiplier<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> MaxSpeed<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">float</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">GetMaxAcceleration</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">float</span> MaxAccel <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">GetMaxAcceleration</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>bWantsToSprint <span class="sy3">&amp;&amp;</span> IsMovingForward<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MaxAccel <span class="sy2">*</span><span class="sy1">=</span> SprintAccelerationMultiplier<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> MaxAccel<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3><span class="mw-headline" id="Boost_Dodge">Boost Dodge</span></h3>
<p>A popular feature lately in FPS games is to have boost dodges/thruster packs basically your character quickly boosts horizontally to avoid damage, close the distance for a melee, make a long jump, or whatever else the player wants to try and use it for. Two prime examples of recent games with this ability being Halo 5 and Call of Duty: Advanced Warfare. The boost dodge ability is one example of an ability that can benefit from sending extra data alongside the typical activation flags. In Unreal Tournament 4 the ability is implemented using four flags: one for each boost direction, but in this implementation we'll be sending along the character's movement vector to the server, since we can reuse it for other abilities as well.
</p><p>To start with we'll deal with how to send additional input data to use in prediction. First add a variable to store it in the character movement component, then add the corresponding saved direction vector to the FSavedMove_MyMovement class. We'll also need to override the OnMovementUpdated method. The ability activation flag is handled just like bWantsToSprint. Don't forget to give DodgeStrength and GroundDodgeStrengthMultiplier some sane default values in the constructor.
</p><p><i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//Inside UMyCharacterMovement class...</span>
UPROPERTY<span class="br0">&#40;</span>EditAnywhere, Category <span class="sy1">=</span> <span class="st0">&quot;Dodge&quot;</span><span class="br0">&#41;</span>
<span class="kw4">float</span> DodgeStrength<span class="sy4">;</span>
UPROPERTY<span class="br0">&#40;</span>EditAnywhere, Category <span class="sy1">=</span> <span class="st0">&quot;Dodge&quot;</span><span class="br0">&#41;</span>
<span class="kw4">float</span> GroundDodgeStrengthMultiplier<span class="sy4">;</span>
&#160;
UFUNCTION<span class="br0">&#40;</span>Reliable, Server, WithValidation<span class="br0">&#41;</span>
<span class="kw4">void</span> ServerSetMoveDirection<span class="br0">&#40;</span><span class="kw4">const</span> FVector<span class="sy3">&amp;</span> MoveDir<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="co1">///@brief Triggers the dodge action.</span>
<span class="kw4">void</span> DoDodge<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
<span class="co1">///@brief Event triggered at the end of a movement update</span>
<span class="kw2">virtual</span> <span class="kw4">void</span> OnMovementUpdated<span class="br0">&#40;</span><span class="kw4">float</span> DeltaSeconds, <span class="kw4">const</span> FVector <span class="sy3">&amp;</span> OldLocation, <span class="kw4">const</span> FVector <span class="sy3">&amp;</span> OldVelocity<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
FVector MoveDirection<span class="sy4">;</span>
<span class="kw4">uint8</span> bWantsToDodge <span class="sy4">:</span> <span class="nu0">1</span><span class="sy4">;</span>
&#160;
<span class="co1">//Inside FSavedMove_MyMovement class...</span>
FVector SavedMoveDirection<span class="sy4">;</span>
<span class="kw4">uint8</span> bSavedWantsToDodge <span class="sy4">:</span> <span class="nu0">1</span><span class="sy4">;</span>
&#160;
<span class="co1">///@brief This is used to copy state from the saved move to the character movement component.</span>
<span class="co1">///This is ONLY used for predictive corrections, the actual data must be sent through RPC.</span>
<span class="kw2">virtual</span> <span class="kw4">void</span> PrepMoveFor<span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span> override<span class="sy4">;</span></pre></div></div>
<p>For sending extra client inputs to the server, we'll need to use RPC functions in place of the compressed flags. A convenient place to send the inputs is in the beginning of the OnMovementUpdated method.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">ServerSetMoveDirection_Validate</span><span class="br0">&#40;</span><span class="kw4">const</span> FVector<span class="sy3">&amp;</span> MoveDir<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">ServerSetMoveDirection_Implementation</span><span class="br0">&#40;</span><span class="kw4">const</span> FVector<span class="sy3">&amp;</span> MoveDir<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	MoveDirection <span class="sy1">=</span> DodgeDir<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">OnMovementUpdated</span><span class="br0">&#40;</span><span class="kw4">float</span> DeltaSeconds, <span class="kw4">const</span> FVector<span class="sy3">&amp;</span> OldLocation, <span class="kw4">const</span> FVector<span class="sy3">&amp;</span> OldVelocity<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">OnMovementUpdated</span><span class="br0">&#40;</span>DeltaSeconds, OldLocation, OldVelocity<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>CharacterOwner<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Store movement vector</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>IsLocallyControlled<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MoveDirection <span class="sy1">=</span> PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>GetLastMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="co1">//Send movement vector to server</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>Role <span class="sy1">&lt;</span> ROLE_Authority<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		ServerSetMoveDirection<span class="br0">&#40;</span>MoveDirection<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The input will also need to be added to the saved moves. The implementation is very similar to adding an input flag to the saved moves, but does not involve compressed flag methods. The only difference is that PrepMoveFor needs to be implemented to allow for client corrections to be made.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character<span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>Character, InDeltaTime, NewAccel, ClientData<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//This is literally just the exact opposite of UpdateFromCompressed flags. We're taking the input</span>
		<span class="co1">//from the player and storing it in the saved move.</span>
		bSavedWantsToSprint <span class="sy1">=</span> CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>bWantsToSprint<span class="sy4">;</span>
&#160;
		<span class="co1">//Again, just taking the player movement component's state and storing it for later it in the saved move.</span>
		SavedMoveDirection <span class="sy1">=</span> CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>MoveDirection<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Clear variables back to their default values.</span>
	bSavedWantsToSprint <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	SavedMoveDirection <span class="sy1">=</span> FVector<span class="sy4">::</span><span class="me2">ZeroVector</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">bool</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="co1">//This pretty much just tells the engine if it can optimize by combining saved moves. There doesn't appear to be</span>
	<span class="co1">//any problem with leaving it out, but it seems that it's good practice to implement this anyways.</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>bSavedWantsToSprint <span class="sy3">!</span><span class="sy1">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>FSavedMove_ExtendedMovement<span class="sy2">*</span><span class="br0">&#41;</span><span class="sy3">&amp;</span>NewMove<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bSavedWantsToSprint<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>SavedMoveDirection <span class="sy3">!</span><span class="sy1">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>FSavedMove_ExtendedMovement<span class="sy2">*</span><span class="br0">&#41;</span><span class="sy3">&amp;</span>NewMove<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SavedMoveDirection<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> Super<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span>NewMove, Character, MaxDelta<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span>Character<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//This is just the exact opposite of SetMoveFor. It copies the state from the saved move to the movement</span>
		<span class="co1">//component before a correction is made to a client.</span>
		CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>MoveDirection <span class="sy1">=</span> SavedMoveDirection<span class="sy4">;</span>
&#160;
		<span class="co1">//Don't update flags here. They're automatically setup before corrections using the compressed flag methods.</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Now we have all the data needed in order to implement the actual ability in OnMovementUpdated. We'll also need to implement the method to trigger the ability and hook it up to the character's input component. For the sake of brevity, and my own sanity, it's assumed that you can figure out how to hook up the DoDodge method to the input component by now if you've already made it this far, so that bit of code has been omitted.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">OnMovementUpdated</span><span class="br0">&#40;</span><span class="kw4">float</span> DeltaSeconds, <span class="kw4">const</span> FVector<span class="sy3">&amp;</span> OldLocation, <span class="kw4">const</span> FVector<span class="sy3">&amp;</span> OldVelocity<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">OnMovementUpdated</span><span class="br0">&#40;</span>DeltaSeconds, OldLocation, OldVelocity<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>CharacterOwner<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Store movement vector</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>IsLocallyControlled<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		MoveDirection <span class="sy1">=</span> PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>GetLastMovementInputVector<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="co1">//Send movement vector to server</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>PawnOwner<span class="sy2">-</span><span class="sy1">&gt;</span>Role <span class="sy1">&lt;</span> ROLE_Authority<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		ServerSetMoveDirection<span class="br0">&#40;</span>MoveDirection<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Update dodge movement</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>bWantsToDodge<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>		
		MoveDirection.<span class="me1">Normalize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		FVector DodgeVel <span class="sy1">=</span> MoveDirection<span class="sy2">*</span>DodgeStrength<span class="sy4">;</span>
		DodgeVel.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
&#160;
		<span class="kw1">if</span> <span class="br0">&#40;</span>IsMovingOnGround<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			DodgeVel <span class="sy2">*</span><span class="sy1">=</span> GroundDodgeStrengthMultiplier<span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
		Launch<span class="br0">&#40;</span>DodgeVel<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		bWantsToDodge <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">DoDodge</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	bWantsToDodge <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Now you should be able to test the character movement and boost around using whatever key you've assigned boost to. To keep things simple, this is just a basic boost implementation. You could get more advanced and average the velocities in OnMovementUpdated so that you boost faster when going forward, or use all sorts of other math to make things more interesting.
</p>
<h3><span class="mw-headline" id="Double_Jump">Double Jump</span></h3>
<p>A simple double jump is actually quite easy to implement. The first thing is to override the CanJumpInternal_Implementation method in the character class so that we can actually trigger the extra jump.
</p><p><i>MyCharacter.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> AMyCharacter<span class="sy4">::</span><span class="me2">CanJumpInternal_Implementation</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="kw4">bool</span> bCanJump <span class="sy1">=</span> Super<span class="sy4">::</span><span class="me2">CanJumpInternal_Implementation</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> MyMovementComp <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>bCanJump <span class="sy3">&amp;&amp;</span> MyMovementComp<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		bCanJump <span class="sy1">=</span> MyMovementComp<span class="sy2">-</span><span class="sy1">&gt;</span>CanJump<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> bCanJump<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>It's much more convenient to check for double jumping capability inside the character movement component, so we'll just call into a CanJump method we'll add to it. Additionally, we'll want to override a couple methods, and add a couple properties. We'll also need to add a member to the saved move for corrections to work.
</p><p><i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//Inside UMyCharacterMovement...</span>
&#160;
<span class="co1">///@brief Override DoJump to trigger the extra jumps.</span>
<span class="kw2">virtual</span> <span class="kw4">bool</span> DoJump<span class="br0">&#40;</span><span class="kw4">bool</span> bReplayingMoves<span class="br0">&#41;</span> override<span class="sy4">;</span>
<span class="co1">///@return Whether or not the character can currently jump.</span>
<span class="kw4">bool</span> CanJump<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="co1">///@brief This is called whenever the character lands on the ground, and will be used to reset the jump counter.</span>
<span class="kw2">virtual</span> <span class="kw4">void</span> ProcessLanded<span class="br0">&#40;</span><span class="kw4">const</span> FHitResult<span class="sy3">&amp;</span> Hit, <span class="kw4">float</span> remainingTime, <span class="kw4">int32</span> Iterations<span class="br0">&#41;</span> override<span class="sy4">;</span>
&#160;
UPROPERTY<span class="br0">&#40;</span>Category <span class="sy1">=</span> <span class="st0">&quot;Multijump&quot;</span>, EditAnywhere, BlueprintReadWrite, meta <span class="sy1">=</span> <span class="br0">&#40;</span>DisplayName <span class="sy1">=</span> <span class="st0">&quot;Max Multijump Count&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw4">int32</span> MaxJumpCount<span class="sy4">;</span>
UPROPERTY<span class="br0">&#40;</span>Category <span class="sy1">=</span> <span class="st0">&quot;Multijump&quot;</span>, BlueprintReadWrite, meta <span class="sy1">=</span> <span class="br0">&#40;</span>DisplayName <span class="sy1">=</span> <span class="st0">&quot;Current jump count&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw4">int32</span> JumpCount<span class="sy4">;</span>
&#160;
<span class="co1">//Inside FSavedMove_MyMovement...</span>
<span class="kw4">int32</span> SavedJumpCount<span class="sy4">;</span></pre></div></div>
<p>Okay, I lied. It's not necessarily a double jump, because you can set the MaxJumpCount property higher than 2 to let your character jump as many times as you want. It turns out it's easier to implement this way though, so you basically get extra functionality for free.
</p><p>First of all just get all the saved move stuff out of the way. Not much special here, just the same as before. The only difference being we don't have to bother sending the JumpCount through an RPC, because it just gets incremented on both the client and server whenever a jump is triggered.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Omitted variables from previous abilities...</span>
&#160;
	SavedJumpCount <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">bool</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="co1">//Omitted variables from previous abilities...</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>SavedJumpCount <span class="sy3">!</span><span class="sy1">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>FSavedMove_MyMovement<span class="sy2">*</span><span class="br0">&#41;</span><span class="sy3">&amp;</span>NewMove<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SavedJumpCount<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> Super<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span>NewMove, Character, MaxDelta<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character <span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>Character, InDeltaTime, NewAccel, ClientData<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Omitted variables from previous abilities...</span>
&#160;
		SavedJumpCount <span class="sy1">=</span> CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>JumpCount<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span>Character<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Omitted variables from previous abilities...</span>
&#160;
		CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>JumpCount <span class="sy1">=</span> SavedJumpCount<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Now comes the actual extra jump implementation. To let the player even trigger the jump, the CanJump method we call into from the character class needs to be implemented. It's pretty self explanatory.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> UExtendedCharacterMovement<span class="sy4">::</span><span class="me2">CanJump</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="br0">&#40;</span>IsMovingOnGround<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">||</span> JumpCount <span class="sy1">&lt;</span> MaxJumpCount<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> CanEverJump<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Now all that remains is to increment the jump count whenever an extra jump is triggered, and reset it on landing. The character movement component has a DoJump method for incrementing the counter, and a convenient ProcessLanded method we can override to reset the counter. 
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">DoJump</span><span class="br0">&#40;</span><span class="kw4">bool</span> bReplayingMoves<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>Super<span class="sy4">::</span><span class="me2">DoJump</span><span class="br0">&#40;</span>bReplayingMoves<span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		JumpCount<span class="sy2">++</span><span class="sy4">;</span>
&#160;
		<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">ProcessLanded</span><span class="br0">&#40;</span><span class="kw4">const</span> FHitResult<span class="sy3">&amp;</span> Hit, <span class="kw4">float</span> remainingTime, <span class="kw4">int32</span> Iterations<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	JumpCount <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
&#160;
	Super<span class="sy4">::</span><span class="me2">ProcessLanded</span><span class="br0">&#40;</span>Hit, remainingTime, Iterations<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The double jump will work now if all you want to do is add an extra jump. The only problem is you can't really change directions while jumping. The good news is, we sent the movement vector earlier so that we could boost in different directions, so we can just reuse that here to make whatever velocity calculations we want to.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">DoJump</span><span class="br0">&#40;</span><span class="kw4">bool</span> bReplayingMoves<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>Super<span class="sy4">::</span><span class="me2">DoJump</span><span class="br0">&#40;</span>bReplayingMoves<span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		JumpCount<span class="sy2">++</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Adjust midair velocity using the input direction</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>JumpCount <span class="sy1">&gt;</span> <span class="nu0">1</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			<span class="co1">//Calculate lateral speed to use in adjusting trajectory in midair</span>
			FVector LateralVelocity <span class="sy1">=</span> Velocity<span class="sy4">;</span>
			LateralVelocity.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span><span class="co1">//Don't care about vertical velocity</span>
			<span class="kw4">float</span> LateralSpeed <span class="sy1">=</span> LateralVelocity.<span class="me1">Size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
			<span class="co1">//Average the actual velocity with the target velocity</span>
			FVector NewVelocity <span class="sy1">=</span> MoveDirection<span class="sy2">*</span>LateralSpeed<span class="sy4">;</span>
			NewVelocity.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
			NewVelocity <span class="sy2">+</span><span class="sy1">=</span> LateralVelocity<span class="sy4">;</span>
			NewVelocity <span class="sy2">*</span><span class="sy1">=</span> <span class="nu17">0.5f</span><span class="sy4">;</span>
&#160;
			Velocity <span class="sy1">=</span> NewVelocity<span class="sy4">;</span>
			Velocity.<span class="me1">Z</span> <span class="sy1">=</span> JumpZVelocity<span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
		<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Now jumping while holding in a different direction will cause the character to change directions mid jump.
</p>
<h2><span class="mw-headline" id="Cooldown_Timers">Cooldown Timers</span></h2>
<p>The last example for character movement is cooldown timers on abilities. The boost dodge ability will be used to demonstrate how to implement a simple cooldown timer. The same concept applies to sprint energy and other timer/energy type effects as well.
</p><p>Timers are just calculated on both the client and the server independently, because they don't really need to match up perfectly since the server is authoritative. The only reason they need to be calculated on the client too is so that players don't try to spam the boost button and see their character getting corrected back to its original position. If you have a timer that really needs to be synchronized, then you could probably set it to be replicated, but in the interest of not wasting bandwidth the boost timer won't be replicated.
</p><p><i>MyCharacterMovement.h</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="co1">//Inside UMyCharacterMovement class...</span>
&#160;
UPROPERTY<span class="br0">&#40;</span>EditAnywhere, Category <span class="sy1">=</span> <span class="st0">&quot;Dodge&quot;</span><span class="br0">&#41;</span>
<span class="kw4">float</span> DodgeCooldown<span class="sy4">;</span>
&#160;
<span class="kw4">float</span> DodgeCooldownTimer<span class="sy4">;</span>
&#160;
<span class="co1">//Inside FSavedMove_MyMovement class...</span>
<span class="kw4">float</span> SavedDodgeCooldownTimer<span class="sy4">;</span></pre></div></div>
<p>DodgeCooldown should be initialized to something like 2.0f or whatever you want the cooldown time to be. DodgeCooldownTimer is what will actually be doing the timing, so set it to 0.0f in the constructor. We'll use OnMovementUpdated to update our timers.
</p><p><i>MyCharacterMovement.cpp</i>
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> UMyCharacterMovement<span class="sy4">::</span><span class="me2">OnMovementUpdated</span><span class="br0">&#40;</span><span class="kw4">float</span> DeltaSeconds, <span class="kw4">const</span> FVector<span class="sy3">&amp;</span> OldLocation, <span class="kw4">const</span> FVector<span class="sy3">&amp;</span> OldVelocity<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//...</span>
&#160;
	<span class="co1">//Update dodge movement</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>bWantsToDodge <span class="sy3">&amp;&amp;</span> DodgeCooldownTimer <span class="sy1">&lt;=</span> <span class="nu17">0.0f</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>		
		MoveDirection.<span class="me1">Normalize</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		FVector DodgeVel <span class="sy1">=</span> MoveDirection<span class="sy2">*</span>DodgeStrength<span class="sy4">;</span>
		DodgeVel.<span class="me1">Z</span> <span class="sy1">=</span> <span class="nu17">0.0f</span><span class="sy4">;</span>
&#160;
		<span class="kw1">if</span> <span class="br0">&#40;</span>IsMovingOnGround<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			DodgeVel <span class="sy2">*</span><span class="sy1">=</span> GroundDodgeStrengthMultiplier<span class="sy4">;</span>
		<span class="br0">&#125;</span>
&#160;
		Launch<span class="br0">&#40;</span>DodgeVel<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		bWantsToDodge <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
&#160;
		<span class="co1">//Reset cooldown timer</span>
		DodgeCooldownTimer <span class="sy1">=</span> DodgeCooldown<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//Update cooldown timers</span>
	<span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>DodgeCooldownTimer <span class="sy1">&gt;</span> <span class="nu17">0.0f</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			DodgeCooldownTimer <span class="sy2">-</span><span class="sy1">=</span> DeltaSeconds<span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="co1">//...</span>
<span class="br0">&#125;</span></pre></div></div>
<p>We pretty much just update and check against the timers all in the OnMovementUpdated method. After a while this can get kind of messy, so in a larger project with lots of movement abilities it can be beneficial to refactor things a bit and maybe split stuff up into more methods, but for the sake of this example this will work fine.
</p><p>Finally, just do the usual with the saved moves.
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">Clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="co1">//Omitted other variables...</span>
&#160;
	SavedDodgeCooldownTimer<span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">bool</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span><span class="kw4">const</span> FSavedMovePtr<span class="sy3">&amp;</span> NewMove, ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> MaxDelta<span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
	<span class="co1">//Omitted other variables...</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>SavedDodgeCooldownTimer<span class="sy3">!</span><span class="sy1">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>FSavedMove_MyMovement<span class="sy2">*</span><span class="br0">&#41;</span><span class="sy3">&amp;</span>NewMove<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>SavedDodgeCooldownTimer<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> Super<span class="sy4">::</span><span class="me2">CanCombineWith</span><span class="br0">&#40;</span>NewMove, Character, MaxDelta<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>ACharacter<span class="sy2">*</span> Character, <span class="kw4">float</span> InDeltaTime, FVector <span class="kw4">const</span><span class="sy3">&amp;</span> NewAccel, <span class="kw2">class</span> FNetworkPredictionData_Client_Character <span class="sy3">&amp;</span> ClientData<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">SetMoveFor</span><span class="br0">&#40;</span>Character, InDeltaTime, NewAccel, ClientData<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Omitted other variables...</span>
&#160;
		SavedDodgeCooldownTimer <span class="sy1">=</span> CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>DodgeCooldownTimer<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> FSavedMove_MyMovement<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span><span class="kw2">class</span> ACharacter<span class="sy2">*</span> Character<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	Super<span class="sy4">::</span><span class="me2">PrepMoveFor</span><span class="br0">&#40;</span>Character<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	UMyCharacterMovement<span class="sy2">*</span> CharMov <span class="sy1">=</span> Cast<span class="sy1">&lt;</span>UMyCharacterMovement<span class="sy1">&gt;</span><span class="br0">&#40;</span>Character<span class="sy2">-</span><span class="sy1">&gt;</span>GetCharacterMovement<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>CharMov<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="co1">//Omitted other variables...</span>
&#160;
		CharMov<span class="sy2">-</span><span class="sy1">&gt;</span>DodgeCooldownTimer <span class="sy1">=</span> SavedDodgeCooldownTimer<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<h2><span class="mw-headline" id="Conclusion">Conclusion</span></h2>
<p>Most movement abilities should be easy to implement in quite a similar fashion. A jetpack would just need to use the compressed flags to set some sort of bWantsToJetpack on the movement component, then just use OnMovementUpdated to adjust the velocity.
</p><p>If you find any errors, or have any questions or suggestions about this tutorial then just drop them in the <a rel="nofollow" class="external text" href="https://forums.unrealengine.com/showthread.php?79646-Wiki-Authoritative-Networked-Character-Movement-Tutorial&amp;p=351317#post351317">forum thread</a> and I'll try to update accordingly.
</p>
<h2><span class="mw-headline" id="Other_Resources">Other Resources</span></h2>
<p>This section just includes links to various useful resources relating to the character movement component. I'll be updating this whenever I find more.
</p><p><a href="/Custom_Character_Movement_Component" title="Custom Character Movement Component">Custom Character Movement Component</a>
</p><p><a rel="nofollow" class="external text" href="https://docs.unrealengine.com/latest/INT/Gameplay/Networking/CharacterMovementComponent/index.html">Character Movement Component docs</a>
</p><p><a rel="nofollow" class="external text" href="http://error454.com/2015/03/20/ue4/movement/replication/">Error545's Character Movement Replication in UE4 blog post</a>
</p><p><a rel="nofollow" class="external text" href="https://forums.unrealengine.com/showthread.php?5047-How-to-add-a-movement-type-inherited-from-Walking-Like-Covering">Custom Movement Modes</a>
</p><p><a rel="nofollow" class="external text" href="https://github.com/EpicGames/UnrealTournament/blob/clean-master/UnrealTournament/Source/UnrealTournament/Public/UTCharacterMovement.h">UTCharacterMovement.h</a>
</p><p><a rel="nofollow" class="external text" href="https://github.com/EpicGames/UnrealTournament/blob/clean-master/UnrealTournament/Source/UnrealTournament/Private/UTCharacterMovement.cpp">UTCharacterMovement.cpp</a>
</p><p><a rel="nofollow" class="external text" href="https://github.com/EpicGames/UnrealTournament/blob/clean-master/UnrealTournament/Source/UnrealTournament/Public/UTCharacter.h">UTCharacter.h</a>
</p><p><a rel="nofollow" class="external text" href="https://github.com/EpicGames/UnrealTournament/blob/clean-master/UnrealTournament/Source/UnrealTournament/Private/UTCharacter.cpp">UTCharacter.cpp</a>
</p><p><a rel="nofollow" class="external text" href="https://github.com/EpicGames/UnrealTournament/blob/clean-master/UnrealTournament/Source/UnrealTournament/Private/UTCharMovementReplication.cpp">UTCharMovementReplication.cpp</a>
</p><p><br />
<a href="/User:DarthCoder" title="User:DarthCoder">DarthCoder</a> (<a href="/index.php?title=User_talk:DarthCoder&amp;action=edit&amp;redlink=1" class="new" title="User talk:DarthCoder (page does not exist)">talk</a>)
</p>
<!-- 
NewPP limit report
CPU time usage: 0.177 seconds
Real time usage: 0.225 seconds
Preprocessor visited node count: 267/1000000
Preprocessor generated node count: 574/1000000
Post‐expand include size: 178/2097152 bytes
Template argument size: 22/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->
</div>												<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/index.php?title=Authoritative_Networked_Character_Movement&amp;oldid=21651">https://wiki.unrealengine.com/index.php?title=Authoritative_Networked_Character_Movement&amp;oldid=21651</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="/Category:Code" title="Category:Code">Code</a></li><li><a href="/Category:Community_Created_Content" title="Category:Community Created Content">Community Created Content</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden category: <ul><li><a href="/Category:Templates" title="Category:Templates">Templates</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		</div>
		</div>
		
		<div id="footer">
			<div id="brand">

			</div>
			<div id="legal">
				<div id="copyright">
					&copy; 2004-2015, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic's trademarks or registered trademarks in the US and elsewhere.
				</div>
				<div id="terms">
					<a target="_blank" href="http://epicgames.com/tou">TERMS OF USE</a> | <a target="_blank" href="http://epicgames.com/privacynotice">PRIVACY POLICY</a>
				</div>
			</div>
		</div>
	</div>
		<!--<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>-->
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="/extensions/EpicSearchSystem/Javascript/Search.js?303"></script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;printable=1&amp;skin=epic&amp;*"></script>
<!-- Served in 0.272 secs. -->		<img src="https://tracking.unrealengine.com/track.png" width="1" height="1">
		<!--<script type="text/javascript">
			setTimeout(function () {
				var a = document.createElement("script");
				var b = document.getElementsByTagName("script")[0];
				a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
				a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
			}, 1);
		</script>-->
	</body>
</html>

		