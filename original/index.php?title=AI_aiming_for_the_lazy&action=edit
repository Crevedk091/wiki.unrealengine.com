<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>View source for AI aiming for the lazy - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,nofollow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=epic&amp;*" />
<link rel="stylesheet" href="/extensions/EpicVideoSystem/CSS/VideoSystem.css" />
<link rel="stylesheet" href="/skins/epic/resources/screen.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/epic.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/prettify.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/jquery.qtip.css?303" media="screen" /><meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=epic&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"AI_aiming_for_the_lazy","wgTitle":"AI aiming for the lazy","wgCurRevisionId":16988,"wgRevisionId":0,"wgArticleId":4993,"wgIsArticle":false,"wgIsRedirect":false,"wgAction":"edit","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":true,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"AI_aiming_for_the_lazy","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"epic","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:2197af7670c41256853f340e275ede1b */
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=skins.epic.extras.js%7Cskins.epic.fancybox.js%7Cskins.epic.js%7Cskins.epic.qtip.js%7Cskins.epic.slimscroll.js&amp;only=scripts&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/epic/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
var experimentID = false;
var cxApi = null;
var variation = 0;
var fancyTitle = "";
var CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML;
$(document).ready(function(){
	if(experimentID != false)
	{
		$(head).append('<script src="//www.google-analytics.com/cx/api.js?experiment=' + experimentID + '" />' + '</scr' + 'ipt>');
		HandleExperiment();
	}
	else
	{
		CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);	
	}
});
function HandleExperiment()
{
	CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
	if(cxApi != null)
	{
		variation = cxApi.chooseVariation();
		cxApi.setChosenVariation(variation, experimentID);
		if(variation != cxApi.ORIGINAL_VARIATION && variation != cxApi.NO_CHOSEN_VARIATION && variation != cxApi.NOT_PARTICIPATING)
		{
			//var URL = document.location.href + (document.location.search != '' ? '&var=' : '?var=') + variation;
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
			//document.location.href = URL; 
			CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML + ' (variation ' + variation + ')';
			var test = "";
		}
		else
		{
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
		}
		ToggleExperimentContent(variation);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);
	}
	else
	{
		setTimeout("HandleExperiment()", 500);
	}
}

function ToggleExperimentContent(variation)
{
	$('.AB').hide();
	$('#variation_' + variation).show();
}
</script></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-AI_aiming_for_the_lazy skin-epic action-edit vector-animateLayout">
		<!--<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>-->
		<!-- Google Tag Manager -->
		<noscript>
			<iframe src="//www.googletagmanager.com/ns.html?id=GTM-KWRD6D"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
		<script>
		(function (w, d, s, l, i) {
		w[l] = w[l] || []; w[l].push({
		'gtm.start':
		new Date().getTime(), event: 'gtm.js'
		}); var f = d.getElementsByTagName(s)[0],
		j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
		'//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
		})(window, document, 'script', 'dataLayer', 'GTM-KWRD6D');</script>
		<!-- End Google Tag Manager -->
		<div id="webThree">
		<div id="head"></div>
		<div id="pagedefault">		
                    <div id="pagenav">
                        <div>
                            <!-- Start of Other language links -->
                            <!-- End of Other language links -->
                            <div class="homelink_container">
                                <a href="https://wiki.unrealengine.com" title="UE4 Wiki Home" class="homelink">HOME</a>
                            </div>
                        </div>
                        <div style="clear:both;">
                        </div>
                    </div>	
		<div id="mw-navigation" style="max-width:972px;margin:1em auto 0 auto;">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="jumplink" onclick="$('#sidebar').toggle();">
					Navigation
				</div>
				<div id="sidebar">
					<!-- Start of jump page links -->
					<div class="largetitle">
						Quick Links
					</div>
					<div class="arrowlist">
						<!-- End of jump page links -->
						<!-- Start of related page links -->
						<!-- End of related page links -->								
						<div id="mw-panel">
							<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Community' aria-labelledby='p-Community-label'>
	<h3 id='p-Community-label'>Community</h3>
	<div class="body">
		<ul>
			<li id="n-UE4-Games"><a href="/Category:Games">UE4 Games</a></li>
			<li id="n-Dev-Blogs"><a href="/Developer_Blogs">Dev Blogs</a></li>
			<li id="n-Dev-Livestreams"><a href="/Developer_Livestreams">Dev Livestreams</a></li>
			<li id="n-Code-Sharing-Hub"><a href="/GitHub_Sharing_Hub">Code Sharing Hub</a></li>
			<li id="n-UE-User-Groups"><a href="/User_Group_Map">UE User Groups</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Learning_Resources' aria-labelledby='p-Learning_Resources-label'>
	<h3 id='p-Learning_Resources-label'>Learning Resources</h3>
	<div class="body">
		<ul>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Example-Projects"><a href="/Category:Example_Projects">Example Projects</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Software_and_Tools' aria-labelledby='p-Software_and_Tools-label'>
	<h3 id='p-Software_and_Tools-label'>Software and Tools</h3>
	<div class="body">
		<ul>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Art:-3D"><a href="/3D_Art_Resources">Art: 3D</a></li>
			<li id="n-Art:-2D"><a href="/2D_Art_Resources">Art: 2D</a></li>
			<li id="n-Audio"><a href="/Audio_Resources">Audio</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Modding' aria-labelledby='p-Modding-label'>
	<h3 id='p-Modding-label'>Modding</h3>
	<div class="body">
		<ul>
			<li id="n-Modding-Resources"><a href="/Category:Modding_Resources">Modding Resources</a></li>
			<li id="n-Moddable-Games"><a href="/Category:Moddable_Games">Moddable Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Epic_Official' aria-labelledby='p-Epic_Official-label'>
	<h3 id='p-Epic_Official-label'>Epic Official</h3>
	<div class="body">
		<ul>
			<li id="n-Website"><a href="https://www.unrealengine.com" rel="nofollow">Website</a></li>
			<li id="n-Learning-Resources"><a href="https://docs.unrealengine.com/latest/INT/" rel="nofollow">Learning Resources</a></li>
			<li id="n-Forums"><a href="https://forums.unrealengine.com/" rel="nofollow">Forums</a></li>
			<li id="n-Blog"><a href="https://www.unrealengine.com/blog" rel="nofollow">Blog</a></li>
			<li id="n-YouTube"><a href="https://www.youtube.com/UnrealEngine" rel="nofollow">YouTube</a></li>
			<li id="n-Twitch"><a href="http://www.twitch.tv/unrealengine" rel="nofollow">Twitch</a></li>
			<li id="n-Twitter"><a href="https://twitter.com/UnrealEngine" rel="nofollow">Twitter</a></li>
			<li id="n-Facebook"><a href="https://www.facebook.com/UnrealEngine" rel="nofollow">Facebook</a></li>
			<li id="n-Instagram"><a href="https://instagram.com/unrealengine/" rel="nofollow">Instagram</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/AI_aiming_for_the_lazy" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/AI_aiming_for_the_lazy" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-info"><a href="/index.php?title=AI_aiming_for_the_lazy&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
						</div>
					</div>
				</div>				
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/AI_aiming_for_the_lazy"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/index.php?title=Talk:AI_aiming_for_the_lazy&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view"><span><a href="/AI_aiming_for_the_lazy" >View</a></span></li>
					<li id="ca-viewsource" class="selected"><span><a href="/index.php?title=AI_aiming_for_the_lazy&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=AI_aiming_for_the_lazy&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=AI+aiming+for+the+lazy&amp;returntoquery=action%3Dedit&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=AI+aiming+for+the+lazy&amp;returntoquery=action%3Dedit" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				</div>
			</div>
		</div>
		<div id="maincol">
		<div class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- Start of crumbs links -->
			<div class="crumbs">
			<p>
							</p>
			</div>
			<!-- End of crumbs links -->
			<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">View source for AI aiming for the lazy</span></h1>
			<div id="bodyContent">
				<div id="contentSub">← <a href="/AI_aiming_for_the_lazy" title="AI aiming for the lazy">AI aiming for the lazy</a></div>
																<div id="mw-content-text"><p>You do not have permission to edit this page, for the following reason:
</p>
<div class="permissions-errors">
<p>The action you have requested is limited to users in the group: <a href="/index.php?title=Epic_Wiki:Users&amp;action=edit&amp;redlink=1" class="new" title="Epic Wiki:Users (page does not exist)">Users</a>.
</p>
</div>
<hr />
<p>You can view and copy the source of this page:
</p><textarea readonly="" accesskey="," id="wpTextbox1" cols="80" rows="25" style="" lang="en" dir="ltr" name="wpTextbox1">{{Rating|Type=Tutorial|Versions=4.10}}

[[Category:Tutorials]]

== Overview ==

You'll learn how to implement basic aiming for your AI characters that do not require lot of math, only basic school knowledge on vectors and movement equations.

I wrote this tutorial with maximal clarity in mind. If you want to see main content, go to [[#KINSOL library|KINSOL library]] section.

Names of all entities (assets, variables, components) created during tutorial given in '''bold'''. Entities from FPS template have their names in ''italic''.

== Requirements ==

You should be ready to get your hands dirty with some C++. Of course you'll need Visual Studio.

Though I'll indicate all necessary steps, but since you are here it would be more efficient to know about [https://docs.unrealengine.com/latest/INT/Engine/AI/BehaviorTrees/index.html Behavior Trees] and [https://docs.unrealengine.com/latest/INT/Engine/AI/BehaviorTrees/QuickStart/6/index.html AI controllers].

== Getting Started ==

Create new project (let's call it '''AIAiming''' hereupon) from Blueprint FPS template. Described here is UE 4.10, adjust values you'll stumble on in this tutorial if your template differs.

=== Setting up character ===

Make new folder '''AICharacter''' in [https://docs.unrealengine.com/latest/INT/Engine/Content/Browser/index.html Content Browser]. Create three new assets there:

* Blueprint '''Firer''' inherited from ''Character''
* Blueprint '''FirerController''' inherited from ''AIController''
* Behavior Tree '''FirerBehavior'''

[[File:assets.png|thubm|center|Created assets]]

Open '''Firer'''.
* Set ''AI Controller Class'' to '''FirerController'''
* Select ''Mesh (Inherited)'' component
** Set ''Skeletal Mesh'' to ''SK_Mannequin_Arms''
** Set ''Anim Blueprint Class'' to ''FirstPerson_AnimBP''
** Set mesh location to (-0.51, -2.6, -155.71) and Z rotation to -10° (same values as in ''FirstPersonCharacter'').
* Add Skeletal Mesh Component '''Gun''' in Components list, grub it and attach to ''Mesh (Inherited)''.
[[File:gun-component.png|thubm|center|Gun Component]]
* Set Skeletal Mesh for '''Gun''' to ''SK_FPGun''.
* Setup following Construction Script (references to components are created by simple drug'n'drop from components list):
[[File:firer-construction-script.png|thubm|center|Firer Construction Script]]
* Create vector variable '''GunOffset''' with default value (100, 33, 10) (again copy-paste from ''FirstPersonCharacter'')
[[File:firer-gun-offset.png|thubm|center|Firer GunOffset variable]]

Your character should look something like this:
[[File:firer.png|thubm|center|Firer blueprint]]

* Reproduce following Event Graph:
[[File:firer-event-graph.png|thubm|center|Firer Event Graph]]
It's almost copy-paste from ''FirstPersonCharacter''. We deleted input events, replaced mesh reference, replaced ''GetControlRotation'' with ''GetActorRotation'' and created custom event (RMB->Add Event->Add Custom Event...) '''FireProjectile'''.


Open '''FirerController'''
* Setup following minimal Event Graph:
[[File:firer-controller-event-graph.png|thubm|center|FirerController Event Graph]]

=== '''Fire''' behavior part 1 ===

Open '''FirerBehavior'''. Create new Task, rename it to '''Fire''' and open for editing. 

[[File:create-task.png|thubm|center|Create task]]

Create '''Target offset''' vector variable. It will specify offset from player character (it's pivot point if to be precise) location to point we want to hit. If for example our player mesh was full-blown humanoid mannequin, we would've liked to hit exactly in the head and '''Target offset''' would've specified vector from character's location to character mesh's head.
Since we only have hands, we make our firer aim exactly at the camera. You can measure offset using ruler (middle mouse button):

[[File:ruler.png|thubm|center|Ruler tool]]

In our case camera is perfectly aligned to pivot point except for Z coordinate, so '''Target offset''' will be:

[[File:target-offset.png|thubm|center|TargetOffset variable]]

Override ''Receive Execute'' and reproduce following graph:

[[File:fire-partial-event-graph.png|thubm|center|Partial Event Graph of Fire task]]

It incomplete, but we will return to it when C++ part is ready.

== C++ Hardcore ==

Go to ''File'' -> ''New C++ Class ...'' and select ''Blueprint Function Library'' as parent class. I named it '''FiringLibrary''' (banal to the end), but it doesn't really matter. Since it's first C++ class in our game, editor will take some time to create, build and open project for Visual Studio. For now just leave it there, we will return to it a bit later.

=== Minimal math ===

So how are we going to aim? Let's remember some school physics. Our target (possible offseted) current location is '''''P'''''&lt;sub>T&lt;/sub>, and it moves with speed '''''V'''''&lt;sub>T&lt;/sub>, so in ''t'' seconds it will be at

'''''P'''''&lt;sub>T&lt;/sub> + '''''V'''''&lt;sub>T&lt;/sub> * ''t''.

(''t'' is a variable, we'll have to compute it).
Our projectile in ''t'' seconds will be at

'''''P'''''&lt;sub>P&lt;/sub> + '''''V'''''&lt;sub>P&lt;/sub> * ''t'' + '''''g''''' * ''t''&lt;sup>2&lt;/sup> / 2

'''''P'''''&lt;sub>P&lt;/sub> is a location where projectile will be created, '''''V'''''&lt;sub>P&lt;/sub> - it's speed and '''''g''''' - gravity vector ((0, 0, -980) by default in UE4 because all lengths are in centimeters).
We want for our projectile to meet target, so their locations should be equal:

'''''P'''''&lt;sub>T&lt;/sub> + '''''V'''''&lt;sub>T&lt;/sub> * ''t'' = '''''P'''''&lt;sub>P&lt;/sub> + '''''V'''''&lt;sub>P&lt;/sub> * ''t'' + '''''g''''' * ''t''&lt;sup>2&lt;/sup> / 2

or

'''''P'''''&lt;sub>T&lt;/sub> + '''''V'''''&lt;sub>T&lt;/sub> * ''t'' - '''''P'''''&lt;sub>P&lt;/sub> - '''''V'''''&lt;sub>P&lt;/sub> * ''t'' - '''''g''''' * ''t''&lt;sup>2&lt;/sup> / 2 = '''''0'''''

It's a system of three nonlinear equations. If our firer stand in one place we have three variables: 
# time ''t'' > 0
# -180 &lt; ''yaw'' &lt; 180
#-90 &lt; ''pitch'' &lt; 90

So you can go and solve it, arriving at general quartic equation (with sines and cosines!) and feeling the fear from it's [https://en.wikipedia.org/wiki/Quartic_function#/media/File:Quartic_Formula.svg general solution]. You can try different approximations as [http://www.gamasutra.com/blogs/KainShin/20090515/83954/Predictive_Aim_Mathematics_for_AI_Targeting.php this] guy did, but I'm too lazy for such things and going to make computer solve it for me.

{{note|We don't really care for time ''t'', but it's computation is unavoidable consequence of current problem formulation. It's possible to get rid of it, but won't make problem easier.}}

=== KINSOL library ===

(I describe building process for Windows. Can't help poor souls with MacOS. Smarties with linux should be able to build everything themselves because hey, you've installed linux!)

[https://computation.llnl.gov/casc/sundials/description/description.html#descr_kinsol KINSOL] "is a solver for nonlinear algebraic systems". It is OSS released under a [http://computation.llnl.gov/casc/sundials/download/license.html BSD license] which means you only can't call their code yours. [http://computation.llnl.gov/casc/sundials/download/download.php Download] it (only KINSOL is needed. You will be asked for email but that's only a formality). 

Install [https://cmake.org/download/ CMake] (grub simpliest win32 exe installer, no need to go fancy). Make sure you checked the box "Add CMake to the system [https://en.wikipedia.org/wiki/PATH_(variable)#DOS.2C_OS.2F2.2C_and_Windows PATH]" (for current user would be enough) during installation.

Create folder '''C:\path\to\your\project\AIAiming\ThirdParty\kinsol'''. We will install library here.

From archive you've downloaded erlier unpack whole folder '''kinsol-''version'' '''somewhere (precise location doesn't matter, you can delete folder after building). Create '''kinsol-build''' near it so you have structure:

 some folder\
    kinsol-''version''
    kinsol-build
    
Everything ready, let's build this baby!    
    
* Run cmd (from Start of Win+R).
* Enter command '''cd "C:\full\path\to\some foler\kinsol-build"'''
* Enter command '''cmake-gui ..\kinsol-''version'' '''
* Click '''Configure''' button in appeared window
* Select ''Visual Studio 14 2015 Win64'' from generator list
[[File:configure.png|thubm|center|CMake configure]]
* Do not panic because of all the red
* ''BUILD_KINSOL'' and ''BUILD_STATIC_LIBS'' boxes must be checked, every else unchecked.
* Change ''CMAKE_CONFIGURATION_TYPES'' value to ''Release''
* Change ''CMAKE_INSTALL_PREFIX'' to '''C:\path\to\your\project\AIAiming\ThirdParty\kinsol'''
* Change ''SUNDIALS_PRECISION'' to ''single'' (double is useless because all computations inside UE use floats)
[[File:kinsol-build-configuration.png|thubm|center|KINSOL build configuration]]
* Hit ''Generate'' button and close the window when done
* There will appear several VS projects in '''kinsol-build''', you need to open ''sundials'' solution
* Build ''ALL_BUILD'' project.
* Build ''INSTALL'' project

If all went well built libraries should appear with C++ headers in '''C:\path\to\your\project\AIAiming\ThirdParty\kinsol'''. 

We don't need '''kinsol-build''' and '''kinsol-''version'' '''anymore, you can delete them.

=== Linking libraries to our project ===

(Huge gratitude to author of [[Linking Static Libraries Using The Build System|tutorial]] for linking)

Let's return to our game's project in Visual Studio. You can read article mentioned above to understand what's going on or simply open '''AIAiming.Build.cs''', add following code to body of '''AIAiming''' class

&lt;syntaxhighlight lang="csharp">
    private string ModulePath
    {
        get { return Path.GetDirectoryName(RulesCompiler.GetModuleFilename(this.GetType().Name)); }
    }

    private string ThirdPartyPath
    {
        get { return Path.GetFullPath(Path.Combine(ModulePath, "../../ThirdParty/")); }
    }
    
    public bool LoadKinsol(TargetInfo Target)
    {
        bool isLibrarySupported = false;

        if ((Target.Platform == UnrealTargetPlatform.Win64) || (Target.Platform == UnrealTargetPlatform.Win32))
        {
            isLibrarySupported = true;
            string LibrariesPath = Path.Combine(ThirdPartyPath, "kinsol", "lib");

            PublicAdditionalLibraries.Add(Path.Combine(LibrariesPath, "sundials_kinsol.lib"));
            PublicAdditionalLibraries.Add(Path.Combine(LibrariesPath, "sundials_nvecserial.lib"));
        }

        if (isLibrarySupported)
        {
            // Include path
            PublicIncludePaths.Add(Path.Combine(ThirdPartyPath, "kinsol", "include"));
        }

        Definitions.Add(string.Format("WITH_KINSOL_BINDING={0}", isLibrarySupported ? 1 : 0));

        return isLibrarySupported;
    }
&lt;/syntaxhighlight>

and following line to the end of '''AIAiming(TargetInfo Target)''' constructor

&lt;syntaxhighlight lang="csharp">
        LoadKinsol(Target);
&lt;/syntaxhighlight>

and following 

&lt;syntaxhighlight lang="csharp">
using System.IO;
&lt;/syntaxhighlight>

after 

&lt;syntaxhighlight lang="csharp">
using UnrealBuildTool;
&lt;/syntaxhighlight>

This code will tell the engine to link libraries during compilation. 

{{note|Libraries built this way will only work for x64 builds of your game, but if you care it's likely you already know how to fix it.}}

=== Actuall C++ hardcore ===

OK. This time for real. Open header of your blueprint library and add following function declaration to your class:

&lt;syntaxhighlight lang="cpp">

UFUNCTION(BlueprintCallable, Category = "Ballistics")
static bool ComputeFiringRotation(const AActor* ''t''arget, const FVector&amp; targetOffset, const AActor* firer, const FVector&amp; gunOffset, float projectileSpeed, FRotator&amp; firingRotation);

&lt;/syntaxhighlight>

This function will try to solve equations. It will pass computed rotation to blueprint in '''firingRotation''' reference and boolean return value will indicate if computation was successful (it may be not).

Switch to '''FiringLibrary.cpp'''. 

* Add necessary includes:
&lt;syntaxhighlight lang="cpp">

#include &lt;kinsol/kinsol.h>
#include &lt;kinsol/kinsol_dense.h>
#include &lt;nvector/nvector_serial.h>
#include &lt;sundials/sundials&lt;sub>T&lt;/sub>ypes.h>
#include &lt;sundials/sundials_math.h>

&lt;/syntaxhighlight>
* Declare struct that will keep necessary data to compute equations
&lt;syntaxhighlight lang="cpp">

struct FiringData {

    FiringData(const AActor* ''t''arget,
               const AActor* firer, const FVector&amp; gunOffset,
               float projectileSpeed)
        : targetLocation(target->GetActorLocation())
        , targetVelocity(target->GetVelocity())
        , firerLocation(firer->GetActorLocation())
        , gunOffset(gunOffset)
        , projectileSpeed(projectileSpeed)
        , g(FVector(0, 0, firer->GetWorld()->GetWorldSettings()->GetGravityZ()))
    {}

    FVector targetLocation;
    FVector targetVelocity;
    FVector firerLocation;
    FVector gunOffset;
    float projectileSpeed;
    FVector g;
};

&lt;/syntaxhighlight>
* Declare function that computes our equations (it will be called by KINSOL)
&lt;syntaxhighlight lang="cpp">
// x are current values of variables and library expect us to put equations' values in f
// userData is arbitrary data that we want to use in computations. 
// We have to specify it to library by calling KINSetUserData()
// In our case we specify userData to point at FiringData struct.
int F(N_Vector x, N_Vector f, void* userData) {
    float t = NV_Ith_S(x, 0);
    float yaw = NV_Ith_S(x, 1);
    float pitch = NV_Ith_S(x, 2);
    auto rotator = FRotator(pitch, yaw, 0);

    auto firingData = (FiringData*)userData;


    auto p1 = firingData->targetLocation + firingData->targetVelocity*t;
    
    auto projectileStartingLocation = firingData->firerLocation + rotator.RotateVector(firingData->gunOffset);
    auto projectileVelocity = rotator.RotateVector(FVector::ForwardVector * firingData->projectileSpeed);
    auto p2 = projectileStartingLocation + velocity * ''t'' + firingData->g * ''t'' * ''t'' / 2;
    
    auto eq = p1 - p2;
    
    NV_Ith_S(f, 0) = eq.X;
    NV_Ith_S(f, 1) = eq.Y;
    NV_Ith_S(f, 2) = eq.Z;

    return 0;
}

&lt;/syntaxhighlight>
'''p1''' is expected target location, '''p2''' is expected projectile position. Computation of '''projectileStartingLocation''' and '''projectileVelocity''' follows from the way we spawn projectile. They are virtually the same as ones from ''Spawn projectile'' box in '''Firer'''.

Returning 0 indicates that computations went smooth. If something breaks during execution of your variant of function return non-zero value.

Finally all preparations done and we can write out the function we are here for:
&lt;syntaxhighlight lang="cpp">

bool UFiringLibrary::ComputeFiringRotation(const AActor* ''t''arget, const FVector&amp; targetOffset, 
                 const AActor* firer, const FVector&amp; gunOffset, 
                 float projectileSpeed, FRotator&amp; firingRotation) {

    // Number of equations
    const int N = 3;

    // x is our initial guess on variables of equation.
    auto x = N_VNew_Serial(N);
    if (x == nullptr) return false;
    // I guessed projectile will hit target after one second.
    NV_Ith_S(x, 0) = 1; 
    // Guess for rotation is simply current firer rotation.
    NV_Ith_S(x, 1) = firer->GetActorRotation().Yaw;
    NV_Ith_S(x, 2) = firer->GetActorRotation().Pitch;
    
    // Scale of equations' variables. Scaling them may help with speed of solving,
    // but find solutions far from initial values.
    auto scale = N_VNew_Serial(N);
    if (scale == nullptr) return false;
    N_VConst_Serial(1, scale); // no scaling

    // Constraints on equations' variables
    auto constraints = N_VNew_Serial(N);
    if (constraints == nullptr) return false;

    // 0.0 means no constraints on variable
    // -1.0, 1.0 means &lt;= 0 or >= 0 constraints correspondingly
    // -2.0, 2.0 means &lt; 0 or > 0 constraints correspondingly
    NV_Ith_S(constraints, 0) = 2.0f; // t > 0
    NV_Ith_S(constraints, 1) = 0; // no constraints on yaw
    NV_Ith_S(constraints, 2) = 0; // no constraints on pitch

    // handler for KINSOL library
    auto kinsolMemory = KINCreate();
    if (kinsolMemory == nullptr) return false;

    // setting pointer to userData for use in our F function
    FiringData firingData(target, targetOffset, firer, gunOffset, projectileSpeed);
    int flag = KINSetUserData(kinsolMemory, &amp;firingData);
    if (flag &lt; 0) return false;

    // setting up constraints
    flag = KINSetConstraints(kinsolMemory, constraints);
    if (flag &lt; 0) return false;

    // We want our equations be this (1.0f) close to zeros. 1 cm is pretty good precision.
    flag = KINSetFuncNormTol(kinsolMemory, 1.0f);
    if (flag &lt; 0) return false;
    // Stop if difference in consecutive values of variables this (1e-5f) small.
    flag = KINSetScaledStepTol(kinsolMemory, 1e-5f);
    if (flag &lt; 0) return false;

    // specifying our equations' function
    flag = KINInit(kinsolMemory, F, x);
    if (flag &lt; 0) return false;

    // initializing the simplest available solver
    flag = KINDense(kinsolMemory, N);
    if (flag &lt; 0) return false;

    // little magic
    flag = KINSetMaxSetupCalls(kinsolMemory, 1);
    if (flag &lt; 0) return false;

    // actually solving equations
    flag = KINSol(kinsolMemory, x, KIN_LINESEARCH, scale, scale);
    if (flag &lt; 0) return false;

    // getting solution rotations
    firingRotation = FRotator(NV_Ith_S(x, 2), NV_Ith_S(x, 1), 0);

    bool success = false;
    switch (flag)
    {
    case KIN_SUCCESS:
    case KIN_INITIAL_GUESS_OK:
        // equations were successfully solved
        success = true;
        break;
    case KIN_STEP_LT_STPTOL:
        // algorithm finished correctly but no good solution were found
        break;
    default:

        break;
    }

    // releasing memory
    N_VDestroy_Serial(x);
    N_VDestroy_Serial(scale);
    N_VDestroy_Serial(constraints);
    KINFree(&amp;kinsolMemory);

    return success;
}
&lt;/syntaxhighlight>

Build project. We're done with code part.

== Tying everything together ==

=== '''Fire''' behavior part 2 ===

Complete our '''Fire''' task Event Graph:

[[File:fire-full-event-graph.png|thubm|center|Full Event Graph of Fire task]]

Functionality is pretty straightforward - if necessary rotation was successfully computed we rotate our firer to it and emitting '''FireProjectile''' event.
Projectile speed is taken from ''FirstPersonProjectile'' blueprint.

At last create following structure in '''FirerBehavior''' Behavior Tree:

[[File:firer-behavior-tree.png|thubm|center|Firer Behavior Tree]]

You can now place our '''Firer''' character somewhere on the map and try out it's aiming:

[[File:demonstration.png|thubm|center|Aiming]]

== Further improvements ==

The very first enhancement you should think about is gradual rotation. Right now our firer changes it's rotation instantly. But then you have to consider time required to rotate to given angles in equations.

After it you'll probably like to move your firer around, but then you'll have more variables than equations and it will no longer be system of equations solving problem, but an [https://en.wikipedia.org/wiki/Mathematical_optimization optimization] problem. But you're lucky because [https://en.wikipedia.org/wiki/Comparison_of_optimization_software there are] a lot more optimization libraries than nonlinear equations solvers.
</textarea><div class="templatesUsed"><div class="mw-templatesUsedExplanation"><p>Templates used on this page:
</p></div><ul>
<li><a href="/Template:Note" title="Template:Note">Template:Note</a> (<a href="/index.php?title=Template:Note&amp;action=edit" title="Template:Note">view source</a>) </li><li><a href="/Template:Rating" title="Template:Rating">Template:Rating</a> (<a href="/index.php?title=Template:Rating&amp;action=edit" title="Template:Rating">view source</a>) (protected)</li></ul></div><p id="mw-returnto">Return to <a href="/AI_aiming_for_the_lazy" title="AI aiming for the lazy">AI aiming for the lazy</a>.</p>
</div>												<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/AI_aiming_for_the_lazy">https://wiki.unrealengine.com/AI_aiming_for_the_lazy</a>"				</div>
												<div id='catlinks' class='catlinks catlinks-allhidden'></div>												<div class="visualClear"></div>
							</div>
		</div>
		</div>
		</div>
		
		<div id="footer">
			<div id="brand">

			</div>
			<div id="legal">
				<div id="copyright">
					&copy; 2004-2015, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic's trademarks or registered trademarks in the US and elsewhere.
				</div>
				<div id="terms">
					<a target="_blank" href="http://epicgames.com/tou">TERMS OF USE</a> | <a target="_blank" href="http://epicgames.com/privacynotice">PRIVACY POLICY</a>
				</div>
			</div>
		</div>
	</div>
		<!--<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>-->
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.edit.collapsibleFooter","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="/extensions/EpicSearchSystem/Javascript/Search.js?303"></script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=epic&amp;*"></script>
<!-- Served in 0.061 secs. -->		<img src="https://tracking.unrealengine.com/track.png" width="1" height="1">
		<!--<script type="text/javascript">
			setTimeout(function () {
				var a = document.createElement("script");
				var b = document.getElementsByTagName("script")[0];
				a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
				a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
			}, 1);
		</script>-->
	</body>
</html>

		