<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[f.now()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],d="api-",l=d+"ixn-";a(p,function(e,t){s[t]=o(d+t,!0,"api")}),s.addPageAction=o(d+"addPageAction",!0),s.setCurrentRouteName=o(d+"routeName",!0),t.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(l+"tracer",[f.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[f.now(),r,o],n),o)try{return t.apply(this,arguments)}catch(e){throw c.emit("fn-err",[arguments,this,e],n),e}finally{c.emit("fn-end",[f.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){m[t]=o(l+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,f.now()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],4:[function(e,t,n){t.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?c(e,u,i):i()}function n(n,r,o,i){if(!d.aborted||i){e&&e(n,r,o);for(var a=t(o),u=m(n),c=u.length,f=0;f<c;f++)u[f].apply(a,r);var p=s[y[n]];return p&&p.push([b,n,r,a]),a}}function l(e,t){v[e]=m(e).concat(t)}function m(e){return v[e]||[]}function w(e){return p[e]=p[e]||o(n)}function g(e,t){f(e,function(e,n){t=t||"feature",y[n]=t,t in s||(s[t]=[])})}var v={},y={},b={on:l,emit:n,get:w,listeners:m,context:t,buffer:g,abort:a,aborted:!1};return b}function i(){return new r}function a(){(s.api||s.feature)&&(d.aborted=!0,s=d.backlog={})}var u="nr@context",c=e("gos"),f=e(2),s={},p={},d=t.exports=o();d.backlog=s},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!x++){var e=h.info=NREUM.info,t=d.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return s.abort();f(y,function(t,n){e[t]||(e[t]=n)}),c("mark",["onload",a()+h.offset],null,"api");var n=d.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}function o(){"complete"===d.readyState&&i()}function i(){c("mark",["domContent",a()+h.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(u=Math.max((new Date).getTime(),u))-h.offset}var u=(new Date).getTime(),c=e("handle"),f=e(2),s=e("ee"),p=window,d=p.document,l="addEventListener",m="attachEvent",w=p.XMLHttpRequest,g=w&&w.prototype;NREUM.o={ST:setTimeout,SI:p.setImmediate,CT:clearTimeout,XHR:w,REQ:p.Request,EV:p.Event,PR:p.Promise,MO:p.MutationObserver};var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1071.min.js"},b=w&&g&&g[l]&&!/CriOS/.test(navigator.userAgent),h=t.exports={offset:u,now:a,origin:v,features:{},xhrWrappable:b};e(1),d[l]?(d[l]("DOMContentLoaded",i,!1),p[l]("load",r,!1)):(d[m]("onreadystatechange",o),p[m]("onload",r)),c("mark",["firstbyte",u],null,"api");var x=0,E=e(4)},{}]},{},["loader"]);</script>
<title>Component Visualizers - Epic Wiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Component_Visualizers","wgTitle":"Component Visualizers","wgCurRevisionId":375,"wgRevisionId":375,"wgArticleId":187,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Code","Tutorials"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Component_Visualizers","wgRelevantArticleId":187,"wgRequestId":"27cbbb2a9ec659e52f37b66b","wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[]});mw.loader.state({"site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"loading","user.tokens":"loading","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready"});mw.loader.implement("user.options@0bhc5ha",function($,jQuery,require,module){mw.user.options.set([]);});mw.loader.implement("user.tokens@1xxwts3",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/

});mw.loader.load(["site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector"/>
<script async="" src="/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<meta name="generator" content="MediaWiki 1.30.0"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd"/>
<link rel="license" href="https://www.epicgames.com/tos"/>
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<!--[if lt IE 9]><script src="/resources/lib/html5shiv/html5shiv.min.js?40bd4"></script><![endif]-->
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Component_Visualizers rootpage-Component_Visualizers skin-vector action-view"><!DOCTYPE html><html data-baseurl="https://www.unrealengine.com"><head><meta charSet="UTF-8"><meta httpEquiv="X-UA-Compatible" content="IE=9;IE=10;IE=11;IE=Edge,chrome=1"><meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no, minimal-ui"><meta name="host" content="ue-website-node-prod07-i-02a815c95fb568b8b"><meta name="worker" content="79"><link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"><link rel="manifest" href="/manifest.json"><link rel="mask-icon" href="/safari-pinned-tab.svg" color="#2a2a2a"><meta name="apple-mobile-web-app-title" content="Unreal Engine"><meta name="application-name" content="Unreal Engine"><meta name="msapplication-TileColor" content="#0aaff1"><meta name="msapplication-TileImage" content="/mstile-144x144.png"><meta name="theme-color" content="#0aaff1"><title data-react-helmet="true"></title></head><body><div id="epicGamesNavigation"></div><script>(function () {
    var config = {"serverUrl":"https://www.unrealengine.com","locale":"en-US","localeOptions":[{"lang":"en-US","name":"English"},{"lang":"ko","name":"한국어"},{"lang":"ja","name":"日本語"},{"lang":"zh-CN","name":"简体中文"}],"euCookieStrings":{"cookieString":"We use cookies to ensure the best experience on all Epic Games websites. To learn more, please see our {0}.","policyString":"privacy policy","closeString":"Close","policyUrl":"https://www.epicgames.com/privacypolicy"},"epicPropertyName":"unreal_engine","_createdBy":"tony.rossi","callToAction":{"_type":"Epic Header Call To Action","useCustomCallback":true,"href":"http://unrealengine.com/register","title":"Download"},"hideCallToAction":false,"hideLocale":true,"hideShieldDownload":false,"logoLink":{"_type":"Epic Header Action Link","useCustomCallback":true,"href":"http://unrealengine.com/what-is-unreal-engine-4","key":"logo"},"alert":{"msg":"","_type":"Epic Header Alert","id":"","type":"info","statusHref":""},"_activeDate":"2018-08-06T09:11:04.633Z","links":[{"isBarDivider":false,"_type":"Epic Header Link","useCustomCallback":true,"href":"http://unrealengine.com/blog","title":"News","key":"blog"},{"isBarDivider":false,"_type":"Epic Header Link","useCustomCallback":false,"title":"About","key":"about","kids":[{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/what-is-unreal-engine-4","title":"Overview"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/features","title":"Features"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/vr","title":"VR / AR"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/release-notes/","title":"What's New"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/faq","title":"FAQ"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/eula","title":"EULA"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/previous-versions","title":"Previous Versions"}]},{"isBarDivider":false,"_type":"Epic Header Link","collapseTarget":"More","useCustomCallback":false,"title":"Learn","key":"learn","kids":[{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://docs.unrealengine.com/","title":"Documentation"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://academy.unrealengine.com/","title":"Video Tutorials","key":""},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/education","title":"Education"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/support","title":"Support"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://trello.com/b/TTAVI7Ny/ue4-roadmap","title":"Roadmap","target":"_blank"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://issues.unrealengine.com/","title":"Issues"}]},{"isBarDivider":false,"_type":"Epic Header Link","collapseTarget":"More","useCustomCallback":false,"title":"Community","key":"community","kids":[{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://forums.unrealengine.com/","title":"Forums"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://wiki.unrealengine.com/Main_Page","title":"Wiki"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://answers.unrealengine.com/","title":"AnswerHub"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/unrealdevgrants","title":"Unreal Dev Grants","key":""},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/user-groups","title":"User Groups","key":""},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/events","title":"Events"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/programs/nvidia-edge","title":"Nvidia Edge","key":"programs"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/programs/intel-unreal","title":"Intel + Unreal","key":""}]},{"isBarDivider":false,"_type":"Epic Header Link","collapseTarget":"More","useCustomCallback":false,"title":"Marketplace","key":"marketplace","kids":[{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"http://unrealengine.com/marketplace","title":"Browse"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://publish.unrealengine.com/","title":"Submit Content"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/marketplace-faq","title":"Marketplace FAQ"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/marketplace-guidelines","title":"Marketplace Guidelines"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://forums.unrealengine.com/forumdisplay.php?56-Marketplace","title":"Marketplace Forums"}]},{"isBarDivider":false,"_type":"Epic Header Link","collapseTarget":"More","useCustomCallback":false,"title":"Enterprise","key":"enterprise","kids":[{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/studio","title":"Unreal Studio","key":"studio-overview"},{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/enterprise/contact-us","title":"Enterprise Contact","key":"contact"}]}],"hideSearch":false,"_version":{"_comment":"Common content type reverted to 1.37.2.100 version by tony.rossi","_createdBy":"tony.rossi"},"_currentVersion":"1.37.2.101.0","_type":"Epic Games Nav","hideSignIn":true,"pcDownloadUrl":"https://launcher-public-service-prod06.ol.epicgames.com/launcher/api/installer/download/EpicGamesLauncherInstaller.msi?productName=unrealengine","_uuid":"a0357fbf-1bd5-4eca-bbbf-48ea56e4ddb1","accountLinks":{"signOutLink":{"_type":"Epic Header Action Link","useCustomCallback":true,"href":"http://unrealengine.com/logout","key":"signout"},"dropdownLinks":[{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"http://unrealengine.com/account/personal?lang=en-US","title":"Personal","key":"personal"},{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":"https://publish.unrealengine.com","title":"Seller","key":"seller"}],"signInLinks":[{"_type":"Epic Header Submenu Item","useCustomCallback":true,"href":"http://unrealengine.com/login","title":"Sign In","key":"signin"}],"_type":"Epic Header Account Links"},"_futureVersion":"none","downloadLink":{"_type":"Epic Header Submenu Item","useCustomCallback":false,"href":""},"_created":"2017-08-21T08:59:33.648Z","macDownloadUrl":"https://launcher-public-service-prod06.ol.epicgames.com/launcher/api/installer/download/EpicGamesLauncher.dmg?productName=unrealengine","messages":{"search":"Search","default_download":"Get Epic Games","default_username":"Account","_type":"Epic Header Messages","locale":"English","sign_in":"Sign In","sign_out":"Sign Out"},"hideShieldDropdown":false,"properties":[{"propertyKey":"paragon","_type":"Epic Games Property","egDisabled":true,"egSkip":true}],"_locale":"en_US","useServerUrl":true,"isEu":false};

    if (typeof window._egNavBeforeConfigSet === 'function') {
        window._egNavBeforeConfigSet();
        window._egNavBeforeConfigSetRun = true;
    }
    window._egNavBeforeConfigSetCalled = true;

    if (typeof window._epicGamesNav === 'undefined') {
        window._epicGamesNav = config;
    } else {
        var missingAssumeFalsey = ['hideLocale', 'hideSearch', 'hideSignIn', 'hideCallToAction'];
        for (var key in config) {
            if (typeof key === 'string') {
                if (!window._epicGamesNav[key] && config[key] !== null && missingAssumeFalsey.indexOf(key) === -1) {
                    window._epicGamesNav[key] = config[key];
                }
            }
        }
    }

    window._epicGamesNav.onSearch = function(query) {
        window.location.href = 'https://www.unrealengine.com' + '/bing-search?keyword=' + query;
    };

    if (typeof window._egNavAfterConfigSet === 'function') {
        window._egNavAfterConfigSet();
        window._egNavAfterConfigSetRun = true;
    }
    window._egNavAfterConfigSetCalled = true;
})();
window.__locale = '';
</script><link key="header-css" rel="stylesheet" href="https://static-assets-prod.epicgames.com/unrealengine/static/webpack/./header.epic-unreal-engine.100bcb10fc821c7c23f8.css"><script src="https://static-assets-prod.epicgames.com/unrealengine/static/webpack/./header.epic-unreal-engine.100bcb10fc821c7c23f8.js"></script></body></html>		<div class="container">
			<div id="mw-navigation">
				<h2>Navigation menu</h2>

				<div id="mw-head">
					<!-- 					<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Component+Visualizers" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
					 -->
					<div class="homelink_container">
                        <a href="/" title="UE4 Wiki Home" class="homelink">HOME</a>
                    </div>
                    <div class="notice">
                    	We have temporarily disabled editing while we working on a new Wiki!
                    </div>
					<div id="left-navigation">
											<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
														<li id="ca-nstab-main" class="selected"><span><a href="/index.php?title=Component_Visualizers" title="View the content page [c]" accesskey="c">Page</a></span></li>
							<li id="ca-talk" class="new"><span><a href="/index.php?title=Talk:Component_Visualizers&amp;action=edit&amp;redlink=1" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
						</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<h3 id="p-variants-label">
							<span>Variants</span>
						</h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										</div>
					<div id="right-navigation">
											<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
														<li id="ca-view" class="selected"><span><a href="/index.php?title=Component_Visualizers">Read</a></span></li>
							<li id="ca-viewsource"><span><a href="/index.php?title=Component_Visualizers&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
							<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Component_Visualizers&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
						</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<h3 id="p-cactions-label"><span>More</span></h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>

						<form action="/index.php" id="searchform">
							<div id="simpleSearch">
							<input type="search" name="search" placeholder="Search Epic Wiki" title="Search Epic Wiki [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
										</div>
				</div>
				
			</div>
			<div id="content" class="mw-body" role="main">
				<a id="top"></a>

								<div class="mw-indicators mw-body-content">
</div>
				<h1 id="firstHeading" class="firstHeading" lang="en">Component Visualizers</h1>
												<div id="bodyContent" class="mw-body-content">
											<div id="siteSub" class="noprint">From Epic Wiki</div>
										
															<div id="jump-to-nav" class="mw-jump">
						Jump to:						<a href="#mw-head">navigation</a>, 						<a href="#p-search">search</a>
					</div>
					<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><p><a href="/index.php?title=Template:Rating&amp;action=edit&amp;redlink=1" class="new" title="Template:Rating (page does not exist)">Template:Rating</a>
</p>
<div id="toc" class="toc"><div class="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Setting_Up"><span class="tocnumber">2</span> <span class="toctext">Setting Up</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Laser_Cannon_Class_Example"><span class="tocnumber">3</span> <span class="toctext">Laser Cannon Class Example</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Creating_a_Visualization_Class"><span class="tocnumber">4</span> <span class="toctext">Creating a Visualization Class</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="#Hit_Proxies"><span class="tocnumber">4.1</span> <span class="toctext">Hit Proxies</span></a>
<ul>
<li class="toclevel-3 tocsection-6"><a href="#Implement_Hit_Proxy_Macro"><span class="tocnumber">4.1.1</span> <span class="toctext">Implement Hit Proxy Macro</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-7"><a href="#Drawing_our_Visualization"><span class="tocnumber">4.2</span> <span class="toctext">Drawing our Visualization</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Receiving_Clicks"><span class="tocnumber">4.3</span> <span class="toctext">Receiving Clicks</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Set_Widget_Location"><span class="tocnumber">4.4</span> <span class="toctext">Set Widget Location</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Handle_Input_Delta"><span class="tocnumber">4.5</span> <span class="toctext">Handle Input Delta</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Receiving_Key_Input"><span class="tocnumber">4.6</span> <span class="toctext">Receiving Key Input</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Generate_a_Context_Menu"><span class="tocnumber">4.7</span> <span class="toctext">Generate a Context Menu</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Registering_Your_Visualizer"><span class="tocnumber">5</span> <span class="toctext">Registering Your Visualizer</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#Conclusion"><span class="tocnumber">6</span> <span class="toctext">Conclusion</span></a></li>
</ul>
</div>

<p><br />
</p>
<h2><span class="mw-headline" id="Overview">Overview</span></h2>
<p>Component visualizers are a good way to visualize non-rendering component data in the editor viewport. You can even make the visualizer interactive, you can right click and get a context menu, capture mouse input and create keyboard commands. 
</p><p>A good example of this in the engine is the spline component. When you click on a spline, the spline path, points and handles are all visualized and interactive. 
</p><p>This is good if you have light weight structs or data types in your component that need to be easily edited in the viewport. For example you might have a laser cannon with a set of target points, you can store the target point as a FVector and use a visualizer to make a line going from the cannon to the target and draw a point at the target. The alternative would be using a separate component for the target which would use up a lot more memory and increase code complexity. 
</p><p>Disclaimer: The code provided is not a full working example. It is only supposed to illustrate what can be done.
</p>
<h2><span class="mw-headline" id="Setting_Up">Setting Up</span></h2>
<p>Before you can use a component visualizer you will need to create an editor module for your game. This separates out the editor only functionality from your game module reducing the size of your cooked game and preventing linking errors when the editor module isn't included.
</p><p>Start by following the instructions on <a href="/index.php?title=Creating_an_Editor_Module" title="Creating an Editor Module">this page</a> to create an editor module for your game. Once you've got it all working come back to this page. Make sure you add the components visualizer module to the dependencies in your Build.cs file.
</p><p><a href="/index.php?title=Template:Warning&amp;action=edit&amp;redlink=1" class="new" title="Template:Warning (page does not exist)">Template:Warning</a>
</p>
<h2><span class="mw-headline" id="Laser_Cannon_Class_Example">Laser Cannon Class Example</span></h2>
<p>Lets continue with the laser cannon example from above for this tutorial. The cannon is probably an actor that has a Targeting Component which other actors can use as well. Lets say we have a class that looks like this in our game module:
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
class MYGAME_API UTargetingComponent&#160;: public ActorComponent
{
...
</p>
<pre>   UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Cannon)
   TArray&lt;FVector&gt; Targets;
</pre>
<pre>   UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Cannon)
   float TimeBetweenAttacks;
</pre>
<pre>   UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Cannon)
   int32 CurrentAttackIndex;
</pre>
<p>...
}
&lt;/syntaxhighlight&gt;
</p><p><br />
To edit this component effectively we're going to want to be able to:
</p>
<ul><li> Add and remove target points</li>
<li> Move the target points in the world</li></ul>
<p>Since the property is exposed this can be done in the details panel but it's hard to visualize where in the world it will be targeting just by looking at a row of numbers. It would be better if we could draw this information in the viewport end edit it using a translation widget. Well with component visualizers we can!
</p><p>Of course this example is a little contrived since we could simply make this in a blueprint and show the widget for the vector array. But it will work as an example to illustrate what can be done.
</p>
<h2><span class="mw-headline" id="Creating_a_Visualization_Class">Creating a Visualization Class</span></h2>
<p>Create a new class in your editor module. This class will need to extend <a rel="nofollow" class="external text" href="https://docs.unrealengine.com/latest/INT/API/Editor/UnrealEd/FComponentVisualizer/index.html">FComponentVisualizer</a>. We'll call it something sensible such as 'FTargetingComponentVisualizer' when it's visualising 'UTargetingComponent'. A minimum header will look something like this. It's probably best to copy in all the override method stubs and comment them out until you need them.
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
</p>
<ol><li>pragma once</li></ol>
<ol><li>include "ComponentVisualizer.h"</li>
<li>include "TargetComponent.h"</li></ol>
<p>class FTargetingComponentVisualizer&#160;: public FComponentVisualizer
{
public:
	FTargetingComponentVisualizer();
	virtual ~FTargetingComponentVisualizer();
</p><p>	// Begin FComponentVisualizer interface
	virtual void OnRegister() override;
	virtual void DrawVisualization(const UActorComponent* Component, const FSceneView* View, FPrimitiveDrawInterface* PDI) override;
	virtual bool VisProxyHandleClick(FLevelEditorViewportClient* InViewportClient, HComponentVisProxy* VisProxy, const FViewportClick&amp; Click) override;
	virtual void EndEditing() override;
	virtual bool GetWidgetLocation(const FEditorViewportClient* ViewportClient, FVector&amp; OutLocation) const override;
	virtual bool GetCustomInputCoordinateSystem(const FEditorViewportClient* ViewportClient, FMatrix&amp; OutMatrix) const override;
	virtual bool HandleInputDelta(FEditorViewportClient* ViewportClient, FViewport* Viewport, FVector&amp; DeltaTranslate, FRotator&amp; DeltaRotate, FVector&amp; DeltaScale) override;
	virtual bool HandleInputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event) override;
	virtual TSharedPtr&lt;SWidget&gt; GenerateContextMenu() const override;
	// End FComponentVisualizer interface
</p><p>	/** Get the target component we are currently editing */
	UTargetingComponent* GetEditedTargetingComponent() const;
</p><p>private:
</p>
<pre>       /**Index of target in selected component*/
       int32 CurrentlySelectedTarget;
</pre>
<p>	/**Output log commands*/
	TSharedPtr&lt;FUICommandList&gt; TargetingComponentVisualizerActions;
...
&lt;/syntaxhighlight&gt;
</p><p>Note by <a href="/index.php?title=User:Darkgaze&amp;action=edit&amp;redlink=1" class="new" title="User:Darkgaze (page does not exist)">Darkgaze</a> (<a href="/index.php?title=User_talk:Darkgaze&amp;action=edit&amp;redlink=1" class="new" title="User talk:Darkgaze (page does not exist)">talk</a>): As for version 4.18, these changes have been made to the interface:
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
// New available methods
virtual void DrawVisualizationHUD(const UActorComponent* Component, const FViewport* Viewport, const FSceneView* View, FCanvas* Canvas);
virtual bool IsVisualizingArchetype();*/
</p><p>//Changed method: InViewportClient is now FEditorViewportClient, instead of FLevelEditorViewportClient
virtual bool VisProxyHandleClick(FEditorViewportClient* InViewportClient, HComponentVisProxy* VisProxy, const FViewportClick&amp; Click);
&lt;/syntaxhighlight&gt;
</p><p><br />
To achieve full functionality we'll need to override most of the functions of the base class. We've also created a variable storing the index of the target from the Targets array in the currently selected component. How do we work out what target is selected? Using hit proxies!
</p>
<h3><span class="mw-headline" id="Hit_Proxies">Hit Proxies</span></h3>
<p>Hit proxies are a way of collecting data about what was clicked on in the viewport. If a hit proxy that we drew into the viewport is clicked on the VisProxyHandleClick() function in our class will be called passing in that hit proxy. We can then collect data that we wrote into the hit proxy when we drew it. If you only want to draw things to the view port and not interact with them you can skip this section.
</p><p>First declare a base struct for all your hit proxies to extend from. Even though we only have one in this instance this is still a good idea in case we want to add more later. This base will extend HComponentVisProxy and then we can extend our base for different proxies:
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
/**Base class for clickable targeting editing proxies*/
struct HTargetingVisProxy&#160;: public HComponentVisProxy
{
	DECLARE_HIT_PROXY();
</p><p>	HTargetingVisProxy (const UActorComponent* InComponent)
	: HComponentVisProxy(InComponent, HPP_Wireframe)
	{}
};
</p><p>/**Proxy for target*/
struct HTargetProxy&#160;: public HTargetingVisProxy 
{
	DECLARE_HIT_PROXY();
</p><p>	HTargetProxy (const UActorComponent* InComponent, int32 InTargetIndex)
	: HTargetingVisProxy (InComponent)
	, TargetIndex(InTargetIndex)
	{}
</p><p>	int32 TargetIndex;
};
&lt;/syntaxhighlight&gt;
</p><p><br />
As you can see the base HComponentVisProxy takes the component that's being edited as an argument. Our target sub struct will also store the index of the target point so we know which one has been selected. 
</p>
<h4><span class="mw-headline" id="Implement_Hit_Proxy_Macro">Implement Hit Proxy Macro</span></h4>
<p>Another important thing is to use the the IMPLEMENT_HIT_PROXY macro at the top of your .cpp file. For this example it would look like this:
</p><p>IMPLEMENT_HIT_PROXY(HTargetingVisProxy,  HComponentVisProxy)
</p><p>IMPLEMENT_HIT_PROXY(HTargetProxy, HTargetingVisProxy )
</p><p>The first argument is the sub type and the second is the base.
</p>
<h3><span class="mw-headline" id="Drawing_our_Visualization">Drawing our Visualization</span></h3>
<p>Drawing is done in the DrawVisualization function. As parameters for this function we get the component being edited, a scene view and a primitive draw interface. Check out the documentation for each of these if you want more info. For this example let's just draw a line from our component to each target and a point where the target is.
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
void FTargetingComponentVisualiser::DrawVisualization(const UActorComponent* Component, const FSceneView* View, FPrimitiveDrawInterface* PDI)
{
	//cast the component into the expected component type
	if(const UTargetingComponent* TargetingComponent = Cast&lt;const UTargetingComponent&gt;(Component))
	{
		//get colors for selected and unselected targets
		//This is an editor only uproperty of our targeting component, that way we can change the colors if we can't see them against the background
		const FLinearColor SelectedColor = TargetingComponent-&gt;EditorSelectedColor;
		const FLinearColor UnselectedColor = TargetingComponent-&gt;EditorUnselectedColor;
</p><p>		const FVector Locaction = TargetingComponent-&gt;GetComponentLocaction();
</p><p>		//Iterate over each target drawing a line and dot
		for(int i = 0; i &lt; TargetingComponent-&gt;Targets.Num(); i++)
		{
			FLinearColor Color = (i == SelectedTargetIndex)&#160;? SelectedColor&#160;: UnselectedColor;
</p><p>			//Set our hit proxy
			PDI-&gt;SetHitProxy(new HTargetProxy(Component, i));
			PDI-&gt;DrawLine(Locaction, TargetingComponent-&gt;Targets[i], Color, SDPG_Foreground);
			PDI-&gt;DrawPoint(TargetingComponent-&gt;Targets[i], Color, 20.f, SDPG_Foreground);
			PDI-&gt;SetHitProxy(NULL);
		}
	}
}
&lt;/syntaxhighlight&gt;
</p><p><br />
A couple things to note here, firstly we're getting a color out of the component. By allowing designers to change the color of the visualization we can allow for a case where the default color is blending with the background. Also note how we set and unset the hit proxy before and after drawing, this means that if either the line or point is clicked we can receive the click. 
</p><p>If all you wanted to do was draw your components you can probably skip to the bottom at <a href="#Registering_Your_Visualizer">#Registering Your Visualizer</a>. Checkout the primitive draw interface documentation for other draw commands. 
</p>
<h3><span class="mw-headline" id="Receiving_Clicks">Receiving Clicks</span></h3>
<p>You can receive hits from your hit proxy by overriding the VisProxyHandleClick() function. This function receives the viewport client and the clicked vis proxy as parameters. It returns a bool indicating whether you have handled the click or not. For our simple example we just want to set our SelectedTargetIndex proxy to the clicked target. 
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
bool FTargetingComponentVisualiser::VisProxyHandleClick(FLevelEditorViewportClient* InViewportClient, HComponentVisProxy* VisProxy, const FViewportClick&amp; Click)
{
	bool bEditing = false;
</p><p>	if (VisProxy &amp;&amp; VisProxy-&gt;Component-&gt;IsValid())
	{
		bEditing = true;
</p><p>		if(VisProxy-&gt;IsA(HTargetProxy::StaticGetType()))
		{
			HTargetProxy* Proxy = (HTargetProxy*) VisProxy;
</p><p>			SelectedTargetIndex = VisProxy-&gt;TargetIndex;
		}
	}
	else
	{
		SelectedTargetIndex = INDEX_NONE;
	}
</p><p>	return bEditing;
}
&lt;/syntaxhighlight&gt;
</p><p><br />
All we need to do is make sure that all our data is valid, a bit of casting and then we can access the data we stored in the hit proxy we created in a draw function above.
</p>
<h3><span class="mw-headline" id="Set_Widget_Location">Set Widget Location</span></h3>
<p>Earlier I mentioned that we want to be able to interact with our targets in the view port. So far we are drawing our targets on the view port, we can select a target and see which is selected, but we can't interact with them at all. What would be nice is to be able to move our targets with a translation widget like we would with a normal actor or component. 
</p><p>The first step to doing this is overriding the widget location so it appears on our target instead of the selected actor/component. This can be done overriding the GetWidgetLocation() method. This method returns a bool to indicate if it's provided the location and has an FVector out parameter for providing it.
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
bool FTargetingComponentVisualiser::GetWidgetLocation(const FEditorViewportClient* ViewportClient, FVector&amp; OutLocaction) const
{
	if (GetEditedTargetingComponent().IsValid() &amp;&amp; SelectedTargetIndex&#160;!= INDEX_NONE)
	{
		OutLocaction = GetEditedTargetingComponent()-&gt;Targets[SelectedTargetIndex];
</p><p>		return true;
	}
</p><p>	return false;
}
&lt;/syntaxhighlight&gt;
</p><p><br />
We simply check our selected component and selected index are valid and then set the out location to that target. We really should check that our index is valid in the targeting array before accessing it as well.
</p>
<h3><span class="mw-headline" id="Handle_Input_Delta">Handle Input Delta</span></h3>
<p>We can also override the behavior of the widget by receiving it's input in HandleInputDelta. This function gives us a delta translation, scale and rotation that we can use as we will to edit our components. Once again we need to return a bool to indicate whether or not we handled this input. For our example lets just move the selected target by the delta translation.
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
bool FTargetingComponentVisualiser::HandleInputDelta(FEditorViewportClient* ViewportClient,
	FViewport* Viewport, FVector&amp; DeltaTranslate, FRotator&amp; DeltaRotate, FVector&amp; DeltaScale)
{
	bool bHandled = false;
</p><p>	if (GetEditedTargetingComponent().IsValid() &amp;&amp; SelectedTargetIndex&#160;!= INDEX_NONE)
	{
		GetEditedTargetingComponent()-&gt;Targets[SelectedTargetIndex] += DeltaTranslate;
		bHandled = true;
	}
</p><p>	return bHandled;
}
&lt;/syntaxhighlight&gt;
</p><p><br />
What makes this really useful is that we can restrict the effect of the widget. For example if you want to make sure that the target can't move more than 1000 units away from the cannon you can check for this and simply set the Target to an appropriate value. If you try to move the target further than this in the editor the widget and your cursor just won't move.
</p>
<h3><span class="mw-headline" id="Receiving_Key_Input">Receiving Key Input</span></h3>
<p>You can also receive key input with your visualizer. For example we can make it so that the delete key deletes the selected target with some callback function in our component. 
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
bool FTargetingComponentVisualiser::HandleInputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)
{
	bool bHandled = false;
</p><p>	if (Key == EKeys::Delete)
	{
		if(GetEditedTargetingComponent().IsValid() &amp;&amp; SelectedTargetIndex&#160;!= INDEX_NONE)
		{
			GetEditedTargetingComponent()-&gt;DeleteTarget(SelectedTargetIndex);
			bHandled = true;
		}
	}
}
&lt;/syntaxhighlight&gt;
</p><p><br />
</p>
<h3><span class="mw-headline" id="Generate_a_Context_Menu">Generate a Context Menu</span></h3>
<p>One last really useful thing we can do is generate a context menu if one of our hit proxies is right clicked. This is a bit more complicated but lets make it so we can right click on a target and selected 'duplicate' to create a new target in the same spot. Be sure to read up on slate if you want to create more complex menus. 
</p><p>First we need to make a commands class to hold our command list, this should go at the top of your .cpp file:
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
class FTargetingVisualizerCommands&#160;: public TCommands &lt; FTargetingVisualizerCommands &gt;
{
public:
	FTargetingVisualizerCommands()&#160;: TCommands &lt;FTargetingVisualizerCommands&gt;
	(
		"TargetingComponentVisualizer",
		LOCTEXT("TagetingComponentVisualizer", "Targeting Component Visualizer"),
		NAME_None,
		FEditorStyle::GetStyleSetName()
	){}
</p><p>	virtual void RegisterCommands() override
	{
		UI_COMMAND(Duplicate, "Duplicate Target", "Duplicate the current target.", EUserInterfaceActionType::Button, FInputGesture());
	}
</p><p>public:
	/** Duplicate Target */
	TSharedPtr&lt;FUICommandInfo&gt; Duplicate;
</p><p>};
&lt;/syntaxhighlight&gt;
</p><p><br />
Don't worry to much about the syntax of this, if all you want to do is create clickable buttons on the menu simply create a new TSharedPtr&lt;FUICommandInfo&gt; member to hold the command and add a new call to the UI_COMMAND macro in RegisterCommands changing the first 3 arguments appropriately. These arguments are, the command, the text that will appear on the menu, and long text for the command. 
</p><p>We also need to bind our commands to a function that will get called when selected. Do this in the OnRegister function of the visualizer.
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
void FTargetingComponentVisualiser::OnRegister()
{
</p>
<pre>       TargetingComponentVisualizerActions = MakeSharable&lt;new FUICommandList&gt;
</pre>
<p>	const auto&amp; Commands = FTargetingVisualizerCommands::Get();
</p><p>	TargetingComponentVisualizerActions-&gt;MapAction(
		Commands.Duplicate,
		FExecuteAction::CreateSP(this, &amp;FTargetingComponentVisualizer::OnDuplicateTarget),
		true));
}
&lt;/syntaxhighlight&gt;
</p><p><br />
You will need to call MapAction for every command you declared above. The parameters are: The command you are mapping, a binding to a function to call when the command is selected and if the action can be performed. That last one really should be another function pointer so we can dynamically determine this. 
</p><p>Lastly we have to generate the context menu in the GenerateContextMenu() function. 
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
TSharedPtr&lt;SWidget&gt; FTargetingComponentVisualiser::GenerateContextMenu() const
{
	FMenuBuilder MenuBuilder(true, TargetingComponentVisualizerActions);
	{
		MenuBuilder.BeginSection("Target Actions");
		{
			MenuBuilder.AddMenuEntry(FTargetingVisualizerCommands::Get().Duplicate);
		}
		MenuBuilder.EndSection();
	}
</p><p>	TSharedPtr&lt;SWidget&gt; MenuWidget = MenuBuilder.MakeWidget();
	return MenuWidget;
}
&lt;/syntaxhighlight&gt;
</p><p><br />
Now when a hit proxy is right clicked we can select a duplicate option. When this is clicked the function we bound above, OnDuplicateTarget, will be called. This function can call a callback function in the targeting component to duplicate the target and create a new one.
</p>
<h2><span class="mw-headline" id="Registering_Your_Visualizer">Registering Your Visualizer</span></h2>
<p>That's all the code you need for a basic visualizer! Before you can use it you need to register it. This tutorial assumes that you've set up an editor module and overridden the startup and shutdown module function. If not go back to <a href="#Setting_Up">#Setting Up</a> and do so.
</p><p>As of 4.7 there is a bug in the component visualizer module that prevents you from registering it in the 'correct' way. We'll need to use a work around which may break in a future release. In your startup module function add the following code:
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
if (GUnrealEd&#160;!= NULL)
{
	TSharedPtr&lt;FComponentVisualizer&gt; Visualizer = MakeShareable(new FTargetingComponentVisualizer());
</p><p>	if (Visualizer.IsValid())
	{
	        GUnrealEd-&gt;RegisterComponentVisualizer(UTargetingComponent::StaticClass()-&gt;GetFName(), Visualizer);
		Visualizer-&gt;OnRegister();
	}
</p><p>}
&lt;/syntaxhighlight&gt;
</p><p><br />
And in shutdown module add:
</p><p>&lt;syntaxhighlight lang="cpp"&gt;
if (GUnrealEd&#160;!= NULL)
{
	GUnrealEd-&gt;UnregisterComponentVisualizer(UTargetingComponent::StaticClass()-&gt;GetFName());
}
&lt;/syntaxhighlight&gt;
</p><p><br />
The unreal devs have indicated in the past that you really shouldn't access GUnrealEd directly. They may remove support for this in the future but hopefully if they do they'll fix the bug that prevents the correct method of registering.
</p>
<h2><span class="mw-headline" id="Conclusion">Conclusion</span></h2>
<p>Component visualizers are a great way to add functionality to the editor. You can quickly set up powerful editing systems for your components without adding lots of unnecessary metadata to your component classes. 
</p><p><a href="/index.php?title=User:Karltheawesome&amp;action=edit&amp;redlink=1" class="new" title="User:Karltheawesome (page does not exist)">Karltheawesome</a> (<a href="/index.php?title=User_talk:Karltheawesome&amp;action=edit&amp;redlink=1" class="new" title="User talk:Karltheawesome (page does not exist)">talk</a>)
</p>
<!-- 
NewPP limit report
Cached time: 20181031144629
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.024 seconds
Real time usage: 0.039 seconds
Preprocessor visited node count: 60/1000000
Preprocessor generated node count: 110/1000000
Post‐expand include size: 41/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%    6.751      1 -total
 50.30%    3.396      1 Template:Rating
 44.94%    3.034      1 Template:Warning
-->
</div>
<!-- Saved in parser cache with key wiki_pd05v2:pcache:idhash:187-0!canonical and timestamp 20181031144629 and revision id 375
 -->
</div>						<div class="printfooter">
							Retrieved from "<a dir="ltr" href="https://wiki.unrealengine.com/index.php?title=Component_Visualizers&amp;oldid=375">https://wiki.unrealengine.com/index.php?title=Component_Visualizers&amp;oldid=375</a>"						</div>
					<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/index.php?title=Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/index.php?title=Category:Code" title="Category:Code">Code</a></li><li><a href="/index.php?title=Category:Tutorials&amp;action=edit&amp;redlink=1" class="new" title="Category:Tutorials (page does not exist)">Tutorials</a></li></ul></div></div>					<div class="visualClear"></div>
									</div>
			</div>
		</div>
		<div id="eg-footer" role="contentinfo">
			<!DOCTYPE html><html data-baseurl="https://www.unrealengine.com"><head><meta charSet="UTF-8"><meta httpEquiv="X-UA-Compatible" content="IE=9;IE=10;IE=11;IE=Edge,chrome=1"><meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no, minimal-ui"><meta name="host" content="ue-website-node-prod07-i-0a137bf8b82e8a632"><meta name="worker" content="139"><link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"><link rel="manifest" href="/manifest.json"><link rel="mask-icon" href="/safari-pinned-tab.svg" color="#2a2a2a"><meta name="apple-mobile-web-app-title" content="Unreal Engine"><meta name="application-name" content="Unreal Engine"><meta name="msapplication-TileColor" content="#0aaff1"><meta name="msapplication-TileImage" content="/mstile-144x144.png"><meta name="theme-color" content="#0aaff1"><title data-react-helmet="true"></title></head><body><div id="epicGamesFooter"></div><script>window._epicGamesFooter = {"serverUrl":"https://www.unrealengine.com","socialLinks":[{"_type":"Epic Footer Social Link","id":"twitter","href":"https://twitter.com/unrealengine"},{"_type":"Epic Footer Social Link","id":"facebook","href":"https://www.facebook.com/UnrealEngine"},{"_type":"Epic Footer Social Link","href":"http://www.twitch.tv/unrealengine","id":"twitch"},{"_type":"Epic Footer Social Link","id":"instagram","href":"http://instagram.com/UnrealEngine"},{"_type":"Epic Footer Social Link","href":"http://www.youtube.com/unrealengine","id":"youtube"},{"_type":"Epic Footer Social Link","href":"https://www.unrealengine.com/rss","id":"rss"}],"_currentVersion":"1.31","copyrights":["© 2004-{YEAR}, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic’s trademarks or registered trademarks in the US and elsewhere."],"newsLetterConfigs":{"enableNewsLetterCMS":true,"titleMsg":"Sign Up for Unreal Engine News","btnTxt":"Subscribe","_type":"Epic Footer News Letter","logo":"https://cdn2.unrealengine.com/Unreal+Engine%2FUE-Logo-988x988-1dee3bc7f6714edf3c21ee71826ebab54ae02077.png","successMsg":"You have successfully subscribed to Unreal Engine Newsletter.","loginRequired":false},"_type":"Epic Games Footer","newLineCopyrights":false,"epicPropertyName":"unreal_engine","_createdBy":"tony.rossi","_uuid":"dbad9ee8-9ebd-49e5-a448-e930feda5b65","logos":[{"_type":"Epic Footer Logo","href":"https://epicgames.com","id":"eg","title":"Epic Games"},{"_type":"Epic Footer Logo","id":"ue"}],"callToAction":{"_type":"Epic Header Call To Action","useCustomCallback":false,"title":""},"_futureVersion":"none","_created":"2017-08-21T08:59:33.817Z","messages":{"_type":"Epic Footer Messages","tos":"Terms of Service","privacy":"Privacy Policy"},"links":[{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/features","title":"Features"},{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/branding","title":"Logo & Branding"},{"_type":"Epic Footer Link","useCustomCallback":false,"href":"https://trello.com/b/gHooNW9I/ue4-roadmap","title":"Roadmap"},{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/education","title":"Education"},{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/academic-partners","title":"Academic Partners"},{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/resources","title":"More Resources"},{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/awards","title":"Awards"},{"_type":"Epic Footer Link","useCustomCallback":true,"href":"http://unrealengine.com/custom-licensing","title":"Custom License Terms"}],"hideDefaultTermsPolicy":false,"_version":{"_comment":"Edit the global content type","_createdBy":"tony.rossi"},"_locale":"en_US","isEu":false,"useServerUrl":true};
window.__locale = '';
</script><link key="footer-css" rel="stylesheet" href="https://static-assets-prod.epicgames.com/unrealengine/static/webpack/./footer.epic-unreal-engine.100bcb10fc821c7c23f8.css"><script src="https://static-assets-prod.epicgames.com/unrealengine/static/webpack/./footer.epic-unreal-engine.100bcb10fc821c7c23f8.js"></script></body></html>		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.024","walltime":"0.039","ppvisitednodes":{"value":60,"limit":1000000},"ppgeneratednodes":{"value":110,"limit":1000000},"postexpandincludesize":{"value":41,"limit":2097152},"templateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value":2,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"timingprofile":["100.00%    6.751      1 -total"," 50.30%    3.396      1 Template:Rating"," 44.94%    3.034      1 Template:Warning"]},"cachereport":{"timestamp":"20181031144629","ttl":86400,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":199});});</script>
	<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","licenseKey":"93a8bd5691","applicationID":"145396307","transactionName":"MlxXbUBZWkJUAkVQCgsWdFpGUVtfGgBSTQwKVxpPW11D","queueTime":0,"applicationTime":242,"atts":"HhtUGwhDSUw=","errorBeacon":"bam.nr-data.net","agent":""}</script></body>
</html>
