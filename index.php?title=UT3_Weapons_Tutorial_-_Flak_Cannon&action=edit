<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>View source for UT3 Weapons Tutorial - Flak Cannon - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,nofollow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=epic&amp;*" />
<link rel="stylesheet" href="/extensions/EpicVideoSystem/CSS/VideoSystem.css" />
<link rel="stylesheet" href="/skins/epic/resources/screen.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/epic.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/prettify.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/jquery.qtip.css?303" media="screen" /><meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=epic&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"UT3_Weapons_Tutorial_-_Flak_Cannon","wgTitle":"UT3 Weapons Tutorial - Flak Cannon","wgCurRevisionId":10610,"wgRevisionId":0,"wgArticleId":1947,"wgIsArticle":false,"wgIsRedirect":false,"wgAction":"edit","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":true,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"UT3_Weapons_Tutorial_-_Flak_Cannon","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"epic","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:2197af7670c41256853f340e275ede1b */
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=skins.epic.extras.js%7Cskins.epic.fancybox.js%7Cskins.epic.js%7Cskins.epic.qtip.js%7Cskins.epic.slimscroll.js&amp;only=scripts&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/epic/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
var experimentID = false;
var cxApi = null;
var variation = 0;
var fancyTitle = "";
var CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML;
$(document).ready(function(){
	if(experimentID != false)
	{
		$(head).append('<script src="//www.google-analytics.com/cx/api.js?experiment=' + experimentID + '" />' + '</scr' + 'ipt>');
		HandleExperiment();
	}
	else
	{
		CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);	
	}
});
function HandleExperiment()
{
	CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
	if(cxApi != null)
	{
		variation = cxApi.chooseVariation();
		cxApi.setChosenVariation(variation, experimentID);
		if(variation != cxApi.ORIGINAL_VARIATION && variation != cxApi.NO_CHOSEN_VARIATION && variation != cxApi.NOT_PARTICIPATING)
		{
			//var URL = document.location.href + (document.location.search != '' ? '&var=' : '?var=') + variation;
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
			//document.location.href = URL; 
			CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML + ' (variation ' + variation + ')';
			var test = "";
		}
		else
		{
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
		}
		ToggleExperimentContent(variation);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);
	}
	else
	{
		setTimeout("HandleExperiment()", 500);
	}
}

function ToggleExperimentContent(variation)
{
	$('.AB').hide();
	$('#variation_' + variation).show();
}
</script></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-UT3_Weapons_Tutorial_-_Flak_Cannon skin-epic action-edit vector-animateLayout">
		<!--<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>-->
		<!-- Google Tag Manager -->
		<noscript>
			<iframe src="//www.googletagmanager.com/ns.html?id=GTM-KWRD6D"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
		<script>
		(function (w, d, s, l, i) {
		w[l] = w[l] || []; w[l].push({
		'gtm.start':
		new Date().getTime(), event: 'gtm.js'
		}); var f = d.getElementsByTagName(s)[0],
		j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
		'//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
		})(window, document, 'script', 'dataLayer', 'GTM-KWRD6D');</script>
		<!-- End Google Tag Manager -->
		<div id="webThree">
		<div id="head">
		





<input type="hidden" id="updateenable" value="true">

    <script src="https://cdn1.unrealengine.com/2670222/unifiedHeaderBundle-c133cbefbece60d20fd29c5b1819fa39.js" defer></script>
    <link rel="stylesheet" href="https://cdn1.unrealengine.com/2670222/unifiedHeader-dd083735d5017970978496baee5b916e.css">


<header id="header" data-path="/" data-sitepath="https://www.unrealengine.com">
<input type="hidden" id="isUnified" value="1" />
    <input type="hidden" id="current_locale" value="en_US"/>
    <input type="hidden" id="header-host" value="https://www.unrealengine.com" />
    <nav class="main-menu">
        <div class="menu-mobile">
            <span class="menu-mobile-icon"></span>
            <ul>

                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">About</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/what-is-unreal-engine-4">Overview</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/unreal-engine-4">Features</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/vr-page">Virtual Reality</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/showcase">Showcase</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/49-release-notes-overview">What&#39;s New</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/faq">FAQ / EULA</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/previous-versions">Previous Versions</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Learn</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://docs.unrealengine.com/" target="_blank">Documentation</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://wiki.unrealengine.com/Videos " target="_blank">Video Tutorials</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://wiki.unrealengine.com/Main_Page" target="_blank">Wiki</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Community</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/blog">Blog</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://forums.unrealengine.com/" target="_blank">Forums</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://answers.unrealengine.com/" target="_blank">AnswerHub</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://trello.com/b/gHooNW9I/ue4-roadmap" target="_blank">Roadmap</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/unrealdevgrants">Unreal Dev Grants</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="http://www.unrealtournament.com/blog/" target="_blank">Unreal Tournament</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Marketplace</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/marketplace">Browse</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://publish.unrealengine.com/faq" target="_blank">Business Terms</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://publish.unrealengine.com/submission-guidelines" target="_blank">Submission Guidelines</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://publish.unrealengine.com/welcome" target="_blank">Submit Your Content</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://forums.unrealengine.com/forumdisplay.php?56-Marketplace" target="_blank">Marketplace Forums</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                    

                        
                            <li class="menu-mobile-sub">
                                <a href="#" class="mobile-link">Academia</a>
                                <ul>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/education">Education Program</a>
                                            
                                        </li>
                                    
                                        <li>
                                            
                                                <a href="https://www.unrealengine.com/academic-partners">Academic Partners</a>
                                            
                                        </li>
                                    
                                </ul>
                            </li>
                        

                    
                
                
                <li class="btn-account ignore" style="display: none">
                    <a href="https://www.unrealengine.com/dashboard">Account</a>
                </li>
                <li class="btn-signout ignore" style="display: none">
                    <a class="sso-sign-out" href="">Log Out</a>
                </li>
                <li class="btn-signin ignore" style="display: none">
                    <a class="sso-sign-in" href="">Sign in</a>
                </li>
            </ul>
        </div>

        <ul class="menu-items">
            <li class="logo ignore">
                
                    <a href="https://www.unrealengine.com/blog"></a>
                
            </li>

            
                

                    
                        <li>
                            
                                <a>About</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/what-is-unreal-engine-4">Overview</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/unreal-engine-4">Features</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/vr-page">Virtual Reality</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/showcase">Showcase</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/49-release-notes-overview">What&#39;s New</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/faq">FAQ / EULA</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/previous-versions">Previous Versions</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Learn</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://docs.unrealengine.com/" target="_blank">Documentation</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://wiki.unrealengine.com/Videos " target="_blank">Video Tutorials</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://wiki.unrealengine.com/Main_Page" target="_blank">Wiki</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Community</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/blog">Blog</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://forums.unrealengine.com/" target="_blank">Forums</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://answers.unrealengine.com/" target="_blank">AnswerHub</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://trello.com/b/gHooNW9I/ue4-roadmap" target="_blank">Roadmap</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/unrealdevgrants">Unreal Dev Grants</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="http://www.unrealtournament.com/blog/" target="_blank">Unreal Tournament</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Marketplace</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/marketplace">Browse</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://publish.unrealengine.com/faq" target="_blank">Business Terms</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://publish.unrealengine.com/submission-guidelines" target="_blank">Submission Guidelines</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://publish.unrealengine.com/welcome" target="_blank">Submit Your Content</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://forums.unrealengine.com/forumdisplay.php?56-Marketplace" target="_blank">Marketplace Forums</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
                

                    
                        <li>
                            
                                <a>Academia</a>
                            

                            <ul>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/education">Education Program</a>
                                        
                                    </li>
                                
                                    <li>
                                        
                                            <a href="https://www.unrealengine.com/academic-partners">Academic Partners</a>
                                        
                                    </li>
                                
                            </ul>
                        </li>
                    

                
            
        </ul>


        <div class="menu-download" data-sub="dl">
            <a class="sso-register" href="">
                <span class="isUpdateEnabled">Get Unreal</span>
            </a>
        </div>
        

        <div id="search" class="menu-search ignore">
                <span></span>
        </div>
        
        <div class="search-header">
            <div class="input-search">
                <div id="search-tips" class="search-tips-en_US">
                    You may be unable to view the results of this search unless you connect to a VPN first.
                </div>
                <span></span>
                <input type="text" name="search" value="" style="background:none !important" id="isearch" class="text" placeholder="Search..." />
                <p class="search-btn">Search</p>
            </div>
        </div>

        <ul class="menu-icons">
            <li id="btn-account" class="ignore" data-sub="account" style="display: none">
                <a href="/dashboard">Account</a>
                <ul class="account-sub-menu">
                    <li>
                        <a href="/dashboard">Personal</a>
                    </li>
                    <li>
                        <a href="https://publish.unrealengine.com/">Seller</a>
                    </li>
                </ul>
            </li>
            <li id="btn-signout" class="ignore" data-sub="account" style="display: none">
                <a class="sso-sign-out last-border" href="">Log Out</a>
            </li>
            <li id="btn-signin" class="ignore" data-sub="account" style="display: none">
                <a class="sso-sign-in last-border" href="">Sign in</a>
            </li>
        </ul>
        
    </nav>
</header>

		</div>
		<div id="pagedefault">		
                    <div id="pagenav">
                        <div>
                            <!-- Start of Other language links -->
                            <!-- End of Other language links -->
                            <div class="homelink_container">
                                <a href="https://wiki.unrealengine.com" title="UE4 Wiki Home" class="homelink">HOME</a>
                            </div>
                        </div>
                        <div style="clear:both;">
                        </div>
                    </div>	
		<div id="mw-navigation" style="max-width:972px;margin:1em auto 0 auto;">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="jumplink" onclick="$('#sidebar').toggle();">
					Navigation
				</div>
				<div id="sidebar">
					<!-- Start of jump page links -->
					<div class="largetitle">
						Quick Links
					</div>
					<div class="arrowlist">
						<!-- End of jump page links -->
						<!-- Start of related page links -->
						<!-- End of related page links -->								
						<div id="mw-panel">
							<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Videos"><a href="/Videos">Videos</a></li>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Code"><a href="/Category:Code">Code</a></li>
			<li id="n-Games"><a href="/Category:Games">Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/UT3_Weapons_Tutorial_-_Flak_Cannon" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/UT3_Weapons_Tutorial_-_Flak_Cannon" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-info"><a href="/index.php?title=UT3_Weapons_Tutorial_-_Flak_Cannon&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
						</div>
					</div>
				</div>				
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/UT3_Weapons_Tutorial_-_Flak_Cannon"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/index.php?title=Talk:UT3_Weapons_Tutorial_-_Flak_Cannon&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view"><span><a href="/UT3_Weapons_Tutorial_-_Flak_Cannon" >View</a></span></li>
					<li id="ca-viewsource" class="selected"><span><a href="/index.php?title=UT3_Weapons_Tutorial_-_Flak_Cannon&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=UT3_Weapons_Tutorial_-_Flak_Cannon&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=UT3+Weapons+Tutorial+-+Flak+Cannon&amp;returntoquery=action%3Dedit&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=UT3+Weapons+Tutorial+-+Flak+Cannon&amp;returntoquery=action%3Dedit" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				</div>
			</div>
		</div>
		<div id="maincol">
		<div class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- Start of crumbs links -->
			<div class="crumbs">
			<p>
							</p>
			</div>
			<!-- End of crumbs links -->
			<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">View source for UT3 Weapons Tutorial - Flak Cannon</span></h1>
			<div id="bodyContent">
				<div id="contentSub">← <a href="/UT3_Weapons_Tutorial_-_Flak_Cannon" title="UT3 Weapons Tutorial - Flak Cannon">UT3 Weapons Tutorial - Flak Cannon</a></div>
																<div id="mw-content-text"><p>You do not have permission to edit this page, for the following reason:
</p>
<div class="permissions-errors">
<p>The action you have requested is limited to users in the group: <a href="/index.php?title=Epic_Wiki:Users&amp;action=edit&amp;redlink=1" class="new" title="Epic Wiki:Users (page does not exist)">Users</a>.
</p>
</div>
<hr />
<p>You can view and copy the source of this page:
</p><textarea readonly="" accesskey="," id="wpTextbox1" cols="80" rows="25" style="" lang="en" dir="ltr" name="wpTextbox1">[[Category:Unreal Tournament]]
[[Category:UT Content Creation]]
= UT3 Weapons Tutorial - Flak Cannon =

This tutorial will show you how to create Flak Cannon from Unreal Tournament 3 using C++ only.

NOTE:
* UT has just upgraded to UE 4.2.1, this tutorial will be verified for compatibility shortly.


== Requirements ==

Some existing C++ &amp; Unreal Engine knowledge is needed.

* Engine version: 4.2
* Skill level: intermediate
* Unreal Tournament commit: [https://github.com/EpicGames/UnrealTournament/commit/9fe9fc679a26a0ea816e9fd3db080255394bf4dc 9fe9fc679a26a0ea816e9fd3db080255394bf4dc]


== Features ==
* Spawnng multiple projectiles at once
* Controlled firing pattern for multiple projectiles
* Making projectiles spawn other projectiles upon explosion
* Adjusting projectile damage based on distance and hit location
* Adjusting projectile damage over time


== Notes ==
* When overriding a function in subclass always add a definition to the header file as well.
* Functions with [https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Reference/Functions/Specifiers/BlueprintNativeEvent/index.html BlueprintNativeEvent] attribute generate additional virtual function called "FunctionName_Implementation". Override the _Implementation one instead.
* Code snippets are located in grey expandable boxes. Click Expand on the right to see the code.
* Yellow lines in code snippets highlight only the code that needs to be changed.


== Contact ==
* [https://forums.unrealtournament.com/showthread.php?11233-UT3-Flak-Cannon-Tutorial&amp;p=82857#post82857 unrealtournament.com forum thread] 
--[[User:Neai|Neai]] ([[User talk:Neai|talk]]) 17:49, 30 June 2014 (UTC)


== Flak Cannon ==
We'll start by defining what features we want to implement:

=== Primary Fire ===
# Fire 9 shard projectiles at once
# Main shard should be fired at crosshair
# Remaining shards should be fired in a random'ish circle around the main shard
# The firing pattern should spread shards evenly inside the firing cone

=== Secondary Fire ===
# Fire an explosive shell projectile

=== Shard Projectile ===
# Bounces up to 2 times
# Is not affected by gravity until it bounces
# Can deal damage only when moving fast enough

=== Main Shard Projectile ===
Same as shard projectile except that:
# Bounces up to 3 times
# Deals additional damage &amp; momentum when firing at point blank at center of enemy 

=== Shell Projectile ===
# High trajectory
# Explodes upon contact
# Upon explosion spawns 5 shards


== Implementation == 

To implement such projectile weapon we should create subclasses of '''AUTWeapon''', '''AUTProjectile''', '''UUTDamageType''' and '''AUTWeaponAttachment'''.

=== Common code ===
We will implement some of the features in generic classes which can be later used for other weapons. To keep the tutorial code friendly to engine &amp; game code updates, we will create our own generic subclasses of UTWeapon &amp; UTProjectile instead of modifying them.

&lt;div class="toccolours mw-collapsible">
Lets start by creating an abstract subclass of '''AUTWeapon''' called '''AUTWeapon_Boom'''. This will be our common base class for UT3 weapons.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.
#pragma once

#include "UTWeapon.h"
#include "UTWeapon_Boom.generated.h"

UCLASS(Abstract, NotPlaceable)
class AUTWeapon_Boom : public AUTWeapon
{
	GENERATED_UCLASS_BODY()
};
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>
&lt;div class="toccolours mw-collapsible">
We will also need an abstract subclass of '''AUTProjectile''' called '''AUTProjectile_Boom'''. This will be our common base class for UT3 projectiles.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.
#pragma once

#include "UTProjectile.h"
#include "UTProjectile_Boom.generated.h"

UCLASS(Abstract, NotPlaceable)
class AUTProjectile_Boom : public AUTProjectile
{
	GENERATED_UCLASS_BODY()
};
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible">
Since we are going to use property values from UT3, we will need to adjust them to UT4 player scale. In UT3 player is 88 units high, in UT4 player is 192 units high. Therefore we need to multiply all projectile velocities, damage radiuses, momentums, etc, to get the same results in UT4. Add the following definition to '''UnrealTournament.h''' so it's accessible from everywhere:
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
// Ratio for scaling UT3 distance-related values
// See AUTCharacter CapsuleComponent HalfHeight
#define UT3_TO_UT4_SCALE (96.f / 44.f)
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Creating Flak Cannon Classes ===
&lt;div class="toccolours mw-collapsible">
Next, lets create classes for all the elements of Flak Cannon:
&lt;div class="mw-collapsible-content">
# Weapon
## Create subclass of '''AUTWeapon_Boom''' called '''AUTWeap_FlakCannon'''
# 3rd person weapon attachment
## Create subclass of '''AUTWeaponAttachment''' called '''AUTAttachment_FlakCannon'''
# Projectiles
## Create subclass of '''AUTProjectile_Boom''' called '''AUTProj_FlakShell'''
## Create subclass of '''AUTProjectile_Boom''' called '''AUTProj_FlakShard'''
## Create subclass of '''AUTProj_FlakShard''' called '''AUTProj_FlakShardMain'''
# Damage Types
## Create subclass of '''UUTDamageType''' called '''UTDmgType_FlakShell'''
## Create subclass of '''UUTDamageType''' called '''UTDmgType_FlakShard'''
&lt;/div>
&lt;/div>


=== Setting up weapon asset references ===
It's a good idea to have a functional weapon at the start, even if the custom logic isn't there yet. We will link all the parts together and assign visual properties. Assigning asset references to properties is very easy in blueprints, but we can do it in C++ as well.

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeap_FlakCannon.cpp''' - Setup asset references
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.

#include "UnrealTournament.h"
#include "UTWeap_FlakCannon.h"
#include "UTProj_FlakShard.h"
#include "UTProj_FlakShell.h"
#include "UTProj_FlakShardMain.h"
#include "UTAttachment_FlakCannon.h"

AUTWeap_FlakCannon::AUTWeap_FlakCannon(const FPostConstructInitializeProperties&amp; PCIP)
: Super(PCIP)
{ 
	// Asset references
	struct FConstructorStatics
	{
		ConstructorHelpers::FObjectFinder&lt;USkeletalMesh> SkeletalMesh;
		ConstructorHelpers::FObjectFinder&lt;UAnimBlueprintGeneratedClass> AnimBlueprintGeneratedClass;
		ConstructorHelpers::FObjectFinder&lt;UAnimMontage> FireAnimation0;
		ConstructorHelpers::FObjectFinder&lt;UAnimMontage> FireAnimation1;
		ConstructorHelpers::FObjectFinder&lt;UAnimMontage> BringUpAnim;
		ConstructorHelpers::FObjectFinder&lt;UAnimMontage> PutDownAnim;
		ConstructorHelpers::FObjectFinder&lt;USoundCue> FireSound0;
		ConstructorHelpers::FObjectFinder&lt;USoundCue> FireSound1;
		ConstructorHelpers::FObjectFinder&lt;USoundCue> PickupSound;
		ConstructorHelpers::FObjectFinder&lt;UParticleSystem> MuzzleFlash;
		FConstructorStatics()
			: SkeletalMesh(TEXT("SkeletalMesh'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Meshes/SK_WP_FlakCannon_1P.SK_WP_FlakCannon_1P'"))
			, AnimBlueprintGeneratedClass(TEXT("AnimBlueprintGeneratedClass'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Anim/Flak_AnimBP.Flak_AnimBP_C'"))
			, FireAnimation0(TEXT("AnimMontage'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Anim/Flak_Fire_Montage.Flak_Fire_Montage'"))
			, FireAnimation1(TEXT("AnimMontage'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Anim/Flak_Fire_Montage.Flak_Fire_Montage'"))
			, BringUpAnim(TEXT("AnimMontage'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Anim/Flak_Equip.Flak_Equip'"))
			, PutDownAnim(TEXT("AnimMontage'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Anim/Flak_PutDown.Flak_PutDown'"))
			, FireSound0(TEXT("SoundCue'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Audio/CUE/A_FlakCannon_FireCue.A_FlakCannon_FireCue'"))
			, FireSound1(TEXT("SoundCue'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Audio/CUE/A_FlakCannon_FireAltCue.A_FlakCannon_FireAltCue'"))
			, PickupSound(TEXT("SoundCue'/Game/RestrictedAssets/Proto/UT3_Pickups/Audio/Weapons/Cue/A_Pickup_Weapons_Flak_Cue.A_Pickup_Weapons_Flak_Cue'"))MuzzleFlash(TEXT("ParticleSystem'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Effects/P_WP_FlakCannon_Muzzle_Flash.P_WP_FlakCannon_Muzzle_Flash'"))
		{
		}
	};
	static FConstructorStatics ConstructorStatics;


	// Mesh

	Mesh->SkeletalMesh = ConstructorStatics.SkeletalMesh.Object;
	Mesh->AnimBlueprintGeneratedClass = ConstructorStatics.AnimBlueprintGeneratedClass.Object;
	Mesh->RelativeLocation = FVector(-2.349056, -3.957190, -5.411549);
	Mesh->RelativeScale3D = FVector(0.750000, 0.750000, 0.750000);

	FireAnimation.SetNumZeroed(2);
	FireAnimation[0] = ConstructorStatics.FireAnimation0.Object;
	FireAnimation[1] = ConstructorStatics.FireAnimation1.Object;

	BringUpAnim = ConstructorStatics.BringUpAnim.Object;
	PutDownAnim = ConstructorStatics.PutDownAnim.Object;


	// Muzzle Flash

	TSubobjectPtr&lt;UParticleSystemComponent> MuzzleComponent = PCIP.CreateDefaultSubobject&lt;UParticleSystemComponent>(this, TEXT("FlakCannon-MuzzleFlash"));
	MuzzleComponent->Template = ConstructorStatics.MuzzleFlash.Object;
	MuzzleComponent->AttachTo(Mesh, FName(TEXT("MuzzleFlashSocket")));

	MuzzleFlash.SetNumZeroed(2);
	MuzzleFlash[0] = MuzzleComponent;
	MuzzleFlash[1] = MuzzleComponent;


	// 3rd person

	AttachmentType = AUTAttachment_FlakCannon::StaticClass();


	// Sounds

	FireSound.SetNumZeroed(2);
	FireSound[0] = ConstructorStatics.FireSound0.Object;
	FireSound[1] = ConstructorStatics.FireSound1.Object;

	PickupSound = ConstructorStatics.PickupSound.Object;


	// UI

	Group = 7;
	IconCoordinates = FTextureUVs(131.000000, 429.000000, 132.000000, 52.000000);

}
&lt;/syntaxhighlight>
&lt;/div>
Notice that assets are loaded statically only once. Asset paths can be copy-pasted straight from editor.
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTAttachment_FlakCannon.cpp''' - Setup asset references
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
#include "UnrealTournament.h"
#include "UTAttachment_FlakCannon.h"

AUTAttachment_FlakCannon::AUTAttachment_FlakCannon(const class FPostConstructInitializeProperties&amp; PCIP)
	: Super(PCIP)
{
	// Structure to hold one-time initialization
	struct FConstructorStatics
	{
		ConstructorHelpers::FObjectFinder&lt;USkeletalMesh> SkeletalMesh;
		FConstructorStatics()
			: SkeletalMesh(TEXT("SkeletalMesh'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Meshes/SK_WP_FlakCannon_3P_Mid.SK_WP_FlakCannon_3P_Mid'"))
		{
		}
	};
	static FConstructorStatics ConstructorStatics;

	Mesh->SkeletalMesh = ConstructorStatics.SkeletalMesh.Object;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShell.cpp''' - Setup asset references
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
#include "UnrealTournament.h"
#include "UTProjectileMovementComponent.h"
#include "UTProj_FlakShell.h"
#include "UTProj_FlakShard.h"
#include "UTDmgType_FlakShell.h"

AUTProj_FlakShell::AUTProj_FlakShell(const class FPostConstructInitializeProperties&amp; PCIP)
	: Super(PCIP)
{
	// Structure to hold one-time initialization
	struct FConstructorStatics
	{
		ConstructorHelpers::FObjectFinder&lt;UParticleSystem> ExplosionEffect;
		ConstructorHelpers::FObjectFinder&lt;USoundCue> ExplosionSound;
		ConstructorHelpers::FObjectFinder&lt;USoundCue> AmbientSound;
		ConstructorHelpers::FObjectFinder&lt;UParticleSystem> TrailEffect;
		FConstructorStatics()
			: ExplosionEffect(TEXT("ParticleSystem'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Effects/P_WP_Flak_Alt_Explosion.P_WP_Flak_Alt_Explosion'"))
			, ExplosionSound(TEXT("SoundCue'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Audio/CUE/A_FlakCannon_FireAltImpactExplodeCue.A_FlakCannon_FireAltImpactExplodeCue'"))
			, AmbientSound(TEXT("SoundCue'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Audio/CUE/A_FlakCannon_FireAltInAirCue.A_FlakCannon_FireAltInAirCue'"))
			, TrailEffect(TEXT("ParticleSystem'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Effects/P_WP_Flak_Alt_Smoke_Trail.P_WP_Flak_Alt_Smoke_Trail'"))
		{
		}
	};
	static FConstructorStatics ConstructorStatics;

	// Visuals

	TSubobjectPtr&lt;UAudioComponent> AmbientSound = PCIP.CreateDefaultSubobject&lt;UAudioComponent>(this, TEXT("FlakShell-Ambient"));
	AmbientSound->Sound = ConstructorStatics.AmbientSound.Object;
	AmbientSound->VolumeMultiplier = 0.5;
	AmbientSound->AttachTo(RootComponent);

	TSubobjectPtr&lt;UParticleSystemComponent> TrailComponent = PCIP.CreateDefaultSubobject&lt;UParticleSystemComponent>(this, TEXT("FlakShell-Trail"));
	TrailComponent->Template = ConstructorStatics.TrailEffect.Object;
	TrailComponent->SetRelativeLocation(FVector(-3, 0, 0));
	TrailComponent->SetRelativeScale3D(FVector(1.5, 1.5, 1.5));
	TrailComponent->AttachTo(RootComponent);

	TSubobjectPtr&lt;UPointLightComponent> LightComponent = PCIP.CreateDefaultSubobject&lt;UPointLightComponent>(this, TEXT("FlakShell-Light"));
	LightComponent->Intensity = 150;
	LightComponent->AttenuationRadius = 250;
	LightComponent->LightColor = FColor(47, 209, 255);
	LightComponent->SetCastShadows(false);
	LightComponent->AttachTo(RootComponent);

	ExplosionEffect = ConstructorStatics.ExplosionEffect.Object;
	ExplosionSound = ConstructorStatics.ExplosionSound.Object;
}
&lt;/syntaxhighlight>
The mesh is actually set up as part of particle emitter, hence there's no static mesh component.
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Setup asset references
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
#include "UnrealTournament.h"
#include "UTProjectileMovementComponent.h"
#include "UTProj_FlakShard.h"
#include "UTDmgType_FlakShard.h"

AUTProj_FlakShard::AUTProj_FlakShard(const class FPostConstructInitializeProperties&amp; PCIP)
	: Super(PCIP)
{
	// Structure to hold one-time initialization
	struct FConstructorStatics
	{
		ConstructorHelpers::FObjectFinder&lt;UParticleSystem> BounceEffect;
		ConstructorHelpers::FObjectFinder&lt;USoundCue> BounceSound;
		ConstructorHelpers::FObjectFinder&lt;UStaticMesh> StaticMesh;
		ConstructorHelpers::FObjectFinder&lt;UMaterial> StaticMeshMaterial0;
		ConstructorHelpers::FObjectFinder&lt;UParticleSystem> TrailEffect;
		FConstructorStatics()
			: BounceEffect(TEXT("ParticleSystem'/Game/RestrictedAssets/Weapons/Flak/Assets/Flak_Hit_Spark.Flak_Hit_Spark'"))
			, BounceSound(TEXT("SoundCue'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Audio/CUE/A_FlakCannon_FireImpactDirtCue.A_FlakCannon_FireImpactDirtCue'"))
			, StaticMesh(TEXT("StaticMesh'/Game/RestrictedAssets/Proto/UT3_Weapons/WP_FlakCannon/Meshes/S_Flak_Chunk.S_Flak_Chunk'"))
			, StaticMeshMaterial0(TEXT("Material'/Game/RestrictedAssets/Weapons/Flak/Assets/M_Shard.M_Shard'"))
			, TrailEffect(TEXT("ParticleSystem'/Game/RestrictedAssets/Weapons/Flak/Assets/Trail.Trail'"))
		{
		}
	};
	static FConstructorStatics ConstructorStatics;

	// Visuals

	TSubobjectPtr&lt;UStaticMeshComponent> StaticMeshComponent = PCIP.CreateDefaultSubobject&lt;UStaticMeshComponent>(this, TEXT("FlakShard-StaticMesh"));
	StaticMeshComponent->StaticMesh = ConstructorStatics.StaticMesh.Object;
	StaticMeshComponent->bGenerateOverlapEvents = false;
	StaticMeshComponent->SetCollisionProfileName(UCollisionProfile::NoCollision_ProfileName);
	StaticMeshComponent->SetMaterial(0, ConstructorStatics.StaticMeshMaterial0.Object);
	StaticMeshComponent->SetRelativeScale3D(FVector(0.25, 0.25, 0.25));
	StaticMeshComponent->AttachTo(RootComponent);

	TSubobjectPtr&lt;UParticleSystemComponent> TrailComponent = PCIP.CreateDefaultSubobject&lt;UParticleSystemComponent>(this, TEXT("FlakShard-Trail"));
	TrailComponent->Template = ConstructorStatics.TrailEffect.Object;
	TrailComponent->AttachTo(RootComponent);

	TSubobjectPtr&lt;UPointLightComponent> LightComponent = PCIP.CreateDefaultSubobject&lt;UPointLightComponent>(this, TEXT("FlakShard-Light"));
	LightComponent->Intensity = 100;
	LightComponent->AttenuationRadius = 100;
	LightComponent->LightColor = FColor(255, 133, 35);
	LightComponent->SetCastShadows(false);
	LightComponent->AttachTo(RootComponent);
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Basic Parameters ===
We're going to use parameter values from UT3. Set them in constructors:

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShell.cpp''' - We will use high TossZ value to give the projectile high trajectory. This way player can aim at distant opponents without having to aim at the sky.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	// Movement

	ProjectileMovement->InitialSpeed = 1200.f * UT3_TO_UT4_SCALE;
	ProjectileMovement->MaxSpeed = 1200.f * UT3_TO_UT4_SCALE;
	ProjectileMovement->ProjectileGravityScale = 1.0f;

	CollisionComp->InitSphereRadius(10);

	TossZ = 305 * UT3_TO_UT4_SCALE;


	// Damage

	MyDamageType = UUTDmgType_FlakShell::StaticClass();

	DamageParams.BaseDamage = 100;
	DamageParams.OuterRadius = 200 * UT3_TO_UT4_SCALE;

	Momentum = 75000 * UT3_TO_UT4_SCALE;

	InitialLifeSpan = 6;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Lets make it rotate
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>

	// Movement

	TSubobjectPtr&lt;URotatingMovementComponent> RotatingMovement = PCIP.CreateDefaultSubobject&lt;URotatingMovementComponent>(this, TEXT("FlakShard-RotatingMovement"));
	RotatingMovement->RotationRate = FRotator(0, 0, 270);

	ProjectileMovement->InitialSpeed = 3500.f * UT3_TO_UT4_SCALE;
	ProjectileMovement->MaxSpeed = 3500.f * UT3_TO_UT4_SCALE;
	ProjectileMovement->ProjectileGravityScale = 0.f;
	ProjectileMovement->bRotationFollowsVelocity = false;
	ProjectileMovement->bShouldBounce = true;


	// Damage

	MyDamageType = UUTDmgType_FlakShard::StaticClass();
	DamageParams.BaseDamage = 18.f;
	Momentum = 14000 * UT3_TO_UT4_SCALE;

	InitialLifeSpan = 2.f;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeap_FlakCannon.cpp''' - Setting up fire modes
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	// Firing

	ProjClass.SetNumZeroed(2);
	ProjClass[0] = AUTProj_FlakShardMain::StaticClass();
	ProjClass[1] = AUTProj_FlakShell::StaticClass();

	FireInterval.SetNumZeroed(2);
	FireInterval[0] = 1.1;
	FireInterval[1] = 1.1;

	AmmoCost.SetNumZeroed(2);
	AmmoCost[0] = 1;
	AmmoCost[1] = 1;

	Ammo = 10;
	MaxAmmo = 30;

	FireOffset = FVector(75.f, 18.f, -15.f);
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Playtesting ===
At this point we can test the weapon ingame, although it doesn't have custom logic yet. To test the weapon add an '''WeaponBase''' Blueprint to level and in its properties make it use our '''AUTWeap_FlakCannon'''.


=== Adding bounce effects ===

&lt;div class="toccolours mw-collapsible">
'''AUTProjectile_Boom.h''' - Add properties for Bounce Effect assets
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Bounce effect */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Projectile)
	UParticleSystem* BounceEffect;

	/** Sound played when projectile bounces off wall */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Projectile)
	USoundBase* BounceSound;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProjectile_Boom.cpp''' - Override OnBounce to make it play bounce effects
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
void AUTProjectile_Boom::OnBounce(const struct FHitResult&amp; ImpactResult, const FVector&amp; ImpactVelocity)
{
	Super::OnBounce(ImpactResult, ImpactVelocity);

	// Spawn bounce effect
	if (GetNetMode() != NM_DedicatedServer)
	{
		UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), BounceEffect, ImpactResult.Location, ImpactResult.ImpactNormal.Rotation(), true);
	}

	// Play bounce sound
	if (BounceSound != NULL)
	{
		UUTGameplayStatics::UTPlaySound(GetWorld(), BounceSound, this, SRT_IfSourceNotReplicated, false);
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Add default assets to constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	BounceEffect = ConstructorStatics.BounceEffect.Object;
	BounceSound = ConstructorStatics.BounceSound.Object;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

After those changes, shards will spark on bounce and play sound effect.


==== Bounce Effect Rotation ====

Notice that the sparks asset used will spawn in incorrect direction. This is because we're spawning in HitNormal direction, which has X axis pointing away from surface, and the emitter is spawning projectiles in Z axis direction, which in this case will be parallel to floor. The correct fix is to adjust the emitter asset so it spawns in X direction. We can however add a temporary workaround.

&lt;div class="toccolours mw-collapsible">
'''AUTProjectile_Boom.h''' - Lets add a BounceEffectRotation property
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Bounce effect */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Projectile)
	FRotator BounceEffectRotation;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProjectile_Boom.cpp''' - We will use it to rotate HitNormal used for BounceEffect spawn rotation
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="8">
void AUTProjectile_Boom::OnBounce(const struct FHitResult&amp; ImpactResult, const FVector&amp; ImpactVelocity)
{
	Super::OnBounce(ImpactResult, ImpactVelocity);

	// Spawn bounce effect
	if (GetNetMode() != NM_DedicatedServer)
	{
		UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), BounceEffect, ImpactResult.Location, BounceEffectRotation.RotateVector(ImpactResult.ImpactNormal).Rotation(), true);
	}

	// Play bounce sound
	if (BounceSound != NULL)
	{
		UUTGameplayStatics::UTPlaySound(GetWorld(), BounceSound, this, SRT_IfSourceNotReplicated, false);
	}

&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Set default BounceEffectRotation in constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	BounceEffectRotation = FRotator(90, 0, 0);
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Making projectile become affected by gravity after bounce ===

We want the shards to fly unaffected by gravity initially. Only after bounce they should fall towards floor.

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - To do so, lets override OnBounce
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
void AUTProj_FlakShard::OnBounce(const struct FHitResult&amp; ImpactResult, const FVector&amp; ImpactVelocity)
{
	Super::OnBounce(ImpactResult, ImpactVelocity);

	// Set gravity on bounce
	ProjectileMovement->ProjectileGravityScale = 1.f;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Limiting projectile bounce count ===
Next we will limit number of bounces to 2, as this is how UT3 Flak Shards work.

&lt;div class="toccolours mw-collapsible">
'''AUTProj_FlakShard.h''' - Add 2 new properties to define max number of bounces and current number of bounces
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Limit number of bounces */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	int32 BounceLimit;

	/** Current number of times this projectile bounced */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	int32 BounceCount;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Set default number of bounces in constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	BounceLimit = 2;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Count the number of bounces in OnBounce and disable bouncing once limit is reached
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="8-12">
void AUTProj_FlakShard::OnBounce(const struct FHitResult&amp; ImpactResult, const FVector&amp; ImpactVelocity)
{
	Super::OnBounce(ImpactResult, ImpactVelocity);

	// Set gravity on bounce
	ProjectileMovement->ProjectileGravityScale = 1.f;

	// Limit number of bounces
	if (++BounceCount == BounceLimit)
	{
		ProjectileMovement->bShouldBounce = false;
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Increasing projectile lifespan after bounce ===
We want to ensure that shards will fly for a bit after bouncing. Each projectile has a InitialLifeSpan property set that will limit how long this projectile can exist. Combined with velocity it affects maximum shooting distance.

&lt;div class="toccolours mw-collapsible">
'''AUTProj_FlakShard.h''' - Add 2 new properties for increasing lifespan after bounce and an extra one after final bounce
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Increment lifespan on bounce by this amount */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float BounceLifeSpanIncrement;

	/** Increment lifespan when projectile stops by this amount */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float BounceFinalLifeSpanIncrement;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Set default values for bonus lifespan
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	BounceLifeSpanIncrement = 0.5f;
	BounceFinalLifeSpanIncrement = 0.25f;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Count the number of bounces in OnBounce and disable bouncing once limit is reached
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="8-9,15">
void AUTProj_FlakShard::OnBounce(const struct FHitResult&amp; ImpactResult, const FVector&amp; ImpactVelocity)
{
	Super::OnBounce(ImpactResult, ImpactVelocity);

	// Set gravity on bounce
	ProjectileMovement->ProjectileGravityScale = 1.f;

	// Extend lifespan on bounce
	SetLifeSpan(GetLifeSpan() + BounceLifeSpanIncrement);

	// Limit number of bounces
	if (++BounceCount == BounceLimit)
	{
		ProjectileMovement->bShouldBounce = false;
		SetLifeSpan(GetLifeSpan() + BounceFinalLifeSpanIncrement);
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Reducing projectile's damage over time ===

Flak Shards lose 5 damage per second of flight. To implement that we'll need to add function that calculate actual damage instead of using only properties. While we're at it, we'll add dynamic momentum calculation as well, which will come handy later.

&lt;div class="toccolours mw-collapsible">
'''AUTProjectile_Boom.h''' - Add DamageAttenuation property that will deteermine amount of damage lost per second, and 2 new functions.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>

	/** Damage reduction per second, down to minimum damage*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Damage)
	float DamageAttenuation;

	/** Base damage calculation */
	UFUNCTION(BlueprintCallable, Category = Projectile)
	virtual float GetDamage(AActor* OtherActor, const FVector&amp; HitLocation);

	/** Momentum calculation */
	UFUNCTION(BlueprintCallable, Category = Projectile)
	virtual float GetMomentum(AActor* OtherActor, const FVector&amp; HitLocation);
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProjectile_Boom.cpp''' - If DamageAttenuation is set, GetDamage() will return reduced damage.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
float AUTProjectile_Boom::GetDamage(AActor* OtherActor, const FVector&amp; HitLocation)
{
	if (DamageAttenuation > 0)
	{
		return FMath::Max(DamageParams.BaseDamage - (GetWorld()->TimeSeconds - CreationTime) * DamageAttenuation, DamageParams.MinimumDamage);
	}
	return DamageParams.BaseDamage;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProjectile_Boom.cpp''' - GetMomentum() will return standard momentum by default.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
float AUTProjectile_Boom::GetMomentum(AActor* OtherActor, const FVector&amp; HitLocation)
{
	return Momentum;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProjectile_Boom.cpp''' - To adjust damage &amp; momentum of explosions, override Explode_Implementation(). 
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="12-14">
void AUTProjectile_Boom::Explode_Implementation(const FVector&amp; HitLocation, const FVector&amp; HitNormal)
{
	if (!bExploded)
	{
		if (DamageParams.OuterRadius > 0.0f)
		{
			TArray&lt;AActor*> IgnoreActors;
			if (ImpactedActor != NULL)
			{
				IgnoreActors.Add(ImpactedActor);
			}
			const float AdjustedDamage = GetDamage(NULL, HitLocation);
			const float AdjustedMomentum = GetMomentum(NULL, HitLocation);
			UUTGameplayStatics::UTHurtRadius(this, AdjustedDamage, DamageParams.MinimumDamage, AdjustedMomentum, HitLocation, DamageParams.InnerRadius, DamageParams.OuterRadius, DamageParams.DamageFalloff, MyDamageType, IgnoreActors, this, InstigatorController);
		}
		if (Role == ROLE_Authority)
		{
			bTearOff = true;
		}
		bExploded = true;
		UUTGameplayStatics::UTPlaySound(GetWorld(), ExplosionSound, this, ESoundReplicationType::SRT_IfSourceNotReplicated);
		if (GetNetMode() != NM_DedicatedServer)
		{
			UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation(), HitNormal.Rotation(), true);
		}
		ShutDown();
	}
}
&lt;/syntaxhighlight>
In current version of UT we had to copy paste entire function from AUT_projectile, as applying radius damage is not split into own function yet.
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - To adjust damage &amp; momentum of direct damage, override DamageImpactedActor_Implementation
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="2-4,10,13,17,22,26,27">
void AUTProjectile_Boom::DamageImpactedActor_Implementation(AActor* OtherActor, UPrimitiveComponent* OtherComp, const FVector&amp; HitLocation, const FVector&amp; HitNormal)
{
	const float AdjustedDamage = GetDamage(OtherActor, HitLocation);
	const float AdjustedMomentum = GetMomentum(OtherActor, HitLocation);
	// treat as point damage if projectile has no radius
	if (DamageParams.OuterRadius > 0.0f)
	{
		FUTRadialDamageEvent Event;
		Event.Params = DamageParams;
		Event.Params.MinimumDamage = AdjustedDamage; // force full damage for direct hit
		Event.DamageTypeClass = MyDamageType;
		Event.Origin = HitLocation;
		Event.BaseMomentumMag = AdjustedMomentum;
		new(Event.ComponentHits) FHitResult(OtherActor, OtherComp, HitLocation, HitNormal);
		Event.ComponentHits[0].TraceStart = HitLocation - GetVelocity();
		Event.ComponentHits[0].TraceEnd = HitLocation + GetVelocity();
		OtherActor->TakeDamage(AdjustedDamage, Event, InstigatorController, this);
	}
	else
	{
		FUTPointDamageEvent Event;
		Event.Damage = AdjustedDamage;
		Event.DamageTypeClass = MyDamageType;
		Event.HitInfo = FHitResult(OtherActor, OtherComp, HitLocation, HitNormal);
		Event.ShotDirection = GetVelocity().SafeNormal();
		Event.Momentum = Event.ShotDirection * AdjustedMomentum;
		OtherActor->TakeDamage(AdjustedDamage, Event, InstigatorController, this);
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Finally set default DamageAttentuation in Flak Shard constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	DamageAttenuation = 5.f;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Making projectile apply damage only when moving fast enough ===
Flak Shards deal damage only when moving over 400 UU/s. This way shards that lost much of the velocity after bounce won't hit you.

&lt;div class="toccolours mw-collapsible">
'''AUTProj_FlakShard.h''' - Add MinDamageSpeed property to determine minimum speed required to apply damage.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Minimum speed at which damage can be applied */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float MinDamageSpeed;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - Set default MinDamageSpeed in FlakShard constructor.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	MinDamageSpeed = 400.f * UT3_TO_UT4_SCALE;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShard.cpp''' - With our custom GetDamage() function in place, override it in FlakShard to adjust its damage.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
float AUTProj_FlakShard::GetDamage(AActor* OtherActor, const FVector&amp; HitLocation)
{
	// Apply damage only when moving fast enough
	if (GetVelocity().Size() > MinDamageSpeed)
	{
		return Super::GetDamage(OtherActor, HitLocation);
	}
	return 0.f;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Flak Cannon main shard ===
Flak Cannon fires a special shard at the center. It always fires at crosshair, can bounce 3 times and deals additional damage at close range.

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShardMain.cpp''' - Increase BounceLimit to 3 in FlakShardMain constructor.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	BounceLimit = 3;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


==== Adjusting damage based on how much in-the-face the shot was ====
Main Flak Shard deals bonus damage at very close range. Additionally it deals more damage when aiming at center of enemy.

&lt;div class="toccolours mw-collapsible">
'''AUTProj_FlakShardMain.h''' - Add properties for bonus damage and momentum. To check how far the projectile travelled we will use the same method as in UT3 - checking elapsed  LifeSpan
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Momentum bonus for point blank shots */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float CenteredMomentumBonus;

	/** Damage bonus for point blank shots */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float CenteredDamageBonus;

	/** Timeout for point blank shots */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float MaxBonusTime;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShardMain.cpp''' - Set default properties in constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	CenteredMomentumBonus = 90000 * UT3_TO_UT4_SCALE;
	CenteredDamageBonus = 100.0;
	MaxBonusTime = 0.2;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShardMain.cpp''' - Override GetDamage() &amp; GetMomentum() to return adjusted valued
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>

/**
* Increase damage to UTPawns based on how centered this shard is on target.  If it is within the time MaxBonusTime time period.
* e.g. point blank shot with the flak cannon you will do mega damage.  Once MaxBonusTime passes then this shard becomes a normal shard.
*/
float AUTProj_FlakShardMain::GetDamage(AActor* OtherActor, const FVector&amp; HitLocation)
{
	const float CalculatedDamage = Super::GetDamage(OtherActor, HitLocation);

	// When hitting a pawn within bonus point blank time
	AUTCharacter* OtherCharacter = Cast&lt;AUTCharacter>(OtherActor);
	const float BonusTime = GetLifeSpan() - InitialLifeSpan + MaxBonusTime;
	if (CalculatedDamage > 0.f &amp;&amp; OtherCharacter != NULL &amp;&amp; BonusTime > 0)
	{
		// Apply bonus damage
		const float CharacterRadius = OtherCharacter->GetSimpleCollisionRadius();
		const float OffCenterDistance = FMath::PointDistToLine(OtherActor->GetActorLocation(), GetVelocity().SafeNormal(), HitLocation);
		const float OffCenterMultiplier = FMath::Max(0.f, 2.f * (CharacterRadius - OffCenterDistance)) / CharacterRadius;
		const float BonusDamage = CenteredDamageBonus * BonusTime * OffCenterMultiplier;
		return CalculatedDamage + BonusDamage;
	}
	return CalculatedDamage;
}

/**
* Increase momentum imparted based on how recently this shard was fired
*/
float AUTProj_FlakShardMain::GetMomentum(AActor* OtherActor, const FVector&amp; HitLocation)
{
	// When hitting something within bonus point blank time
	const float Momentum = Super::GetMomentum(OtherActor, HitLocation);
	const float BonusTime = GetLifeSpan() - InitialLifeSpan + MaxBonusTime;
	if (BonusTime > 0)
	{
		// Apply bonus momentum
		return Momentum + CenteredMomentumBonus * BonusTime;
	}

	return Momentum;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Making Flak Shell spawn additional shards on explosion ===
Flak Shell should spawn 5 shards on explosion. The shards should fly away from hit surface.

&lt;div class="toccolours mw-collapsible">
'''AUTProj_FlakShell.h''' - Add properties to FlakShell for number of shards to spawn, angle to spawn and class to use.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Number of shards to spawn */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	int32 ShardSpawnCount;

	/** Angle for spawning shards, relative to hit normal */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	float ShardSpawnAngle;
	
	/** Shard class type */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Flak Cannon")
	TSubclassOf&lt;AUTProjectile> ShardClass;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShell.cpp''' - Set default properties in FlakShell constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	ShardClass = AUTProj_FlakShard::StaticClass();
	ShardSpawnCount = 5;
	ShardSpawnAngle = 85;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTProj_FlakShell.cpp''' - Override Explode_Implementation() to spawn additional projectiles
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
void AUTProj_FlakShell::Explode_Implementation(const FVector&amp; HitLocation, const FVector&amp; HitNormal)
{
	// On explosion spawn additional flak shards
	if (!bExploded &amp;&amp; Role == ROLE_Authority &amp;&amp; ShardClass &amp;&amp; ShardSpawnCount > 0)
	{
		// Setup spawn parameters
		FActorSpawnParameters Params;
		Params.Instigator = Instigator;
		Params.Owner = Instigator;
		Params.bNoCollisionFail = true;

		for (int32 i = 0; i &lt; ShardSpawnCount; ++i)
		{
			// Randomize spawn direction along hit normal
			const FRotator SpawnRotation = FMath::VRandCone(HitNormal, FMath::DegreesToRadians(ShardSpawnAngle)).Rotation();

			// Spawn shard
			GetWorld()->SpawnActor&lt;AUTProjectile>(ShardClass, HitLocation, SpawnRotation, Params);
		}
	}

	Super::Explode_Implementation(HitLocation, HitNormal);
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Spawning multiple shards at once ===
Last but not least, we're going to add ability to spawn multiple projectiles at once from a weapon.

&lt;div class="toccolours mw-collapsible">
'''AUTWeapon_Boom.h''' - Add properties for number of projectiles to fire and class for additional projectiles
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Number of projectiles to fire.
	  * When firing multiple projectiles at once, main projectile will be fired at crosshair.
	  * Remaining projectiles will be fired in a circle pattern */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt;int32> MultiShotCount;

	/** Projectile class to use when firing multiple projectiles at once.
	  * This is only for additional projectiles, main projectile will use ProjClass. 
	  * If not specified, ProjClass will be used. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt; TSubclassOf&lt;AUTProjectile> > MultiShotProjClass;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Override FireProjectile() to spawn multiple projectiles at once. In this snippet projectiles will be spawned using default weapon's spread.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
AUTProjectile* AUTWeapon_Boom::FireProjectile()
{
	if (GetUTOwner() == NULL)
	{
		UE_LOG(UT, Warning, TEXT("%s::FireProjectile(): Weapon is not owned (owner died during firing sequence)"));
		return NULL;
	}
	else if (Role == ROLE_Authority)
	{
		// try and fire a projectile
		checkSlow(ProjClass.IsValidIndex(CurrentFireMode) &amp;&amp; ProjClass[CurrentFireMode] != NULL);

		// increment 3rd person muzzle flash count
		UTOwner->IncrementFlashCount(CurrentFireMode);

		// Setup spawn parameters
		FActorSpawnParameters Params;
		Params.Instigator = UTOwner;
		Params.Owner = UTOwner;
		Params.bNoCollisionFail = true;

		// Get muzzle location and rotation
		const FVector SpawnLocation = GetFireStartLoc();
		const FRotator SpawnRotation = GetAdjustedAim(SpawnLocation);

		// Fire projectiles
		AUTProjectile* MainProjectile = NULL;
		if (MultiShotCount.IsValidIndex(CurrentFireMode) &amp;&amp; MultiShotCount[CurrentFireMode] > 1)
		{
			for (int32 i = 0; i &lt; MultiShotCount[CurrentFireMode]; ++i)
			{
				// Get firing location and rotation for this projectile
				const FVector MultiShotLocation = GetFireStartLoc();
				const FRotator MultiShotRotation = GetAdjustedAim(SpawnLocation);

				// Get projectile class
				TSubclassOf&lt;AUTProjectile> ProjectileClass = ProjClass[CurrentFireMode];
				if (i != 0 &amp;&amp; MultiShotProjClass.IsValidIndex(CurrentFireMode) &amp;&amp; MultiShotProjClass[CurrentFireMode] != NULL)
				{
					ProjectileClass = MultiShotProjClass[CurrentFireMode];
				}
					
				// Spawn projectile
				AUTProjectile* MultiShot = GetWorld()->SpawnActor&lt;AUTProjectile>(ProjectileClass, MultiShotLocation, MultiShotRotation, Params);
				if (MainProjectile == NULL)
				{
					MainProjectile = MultiShot;
				}
			}
		}
		else
		{
			// Spawn projectile
			MainProjectile = GetWorld()->SpawnActor&lt;AUTProjectile>(ProjClass[CurrentFireMode], SpawnLocation, SpawnRotation, Params);
		}
		return MainProjectile;
	}
	else
	{
		return NULL;
	}
}
&lt;/syntaxhighlight>
This will spawn MultiShotCount projectiles on firing. 
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeap_FlakCannon.cpp''' - Add multishot default properties
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	MultiShotCount.SetNumZeroed(1);
	MultiShotCount[0] = 9;

	MultiShotProjClass.SetNumZeroed(1);
	MultiShotProjClass[0] = AUTProj_FlakShard::StaticClass();
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


==== Projectile firing pattern ====
Flak Cannon fires shards in distinct semi-random pattern. Main shard is fired at crosshair. Each additional projectile then is fired at equally spaced fragment of firing cone circle. Slight location &amp; rotation randomization is still applied but the shards are guaranteed to cover entire firing cone. This makes the weapon more predictable which is good for pro gaming. We're going to implement this pattern as default for multi-shot weapons. 


&lt;div class="toccolours mw-collapsibled">
'''AUTWeapon_Boom.h''' - Add property for angle of firing pattern and two functions to return firing location &amp; rotation of individual projectiles.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Firing cone angle in degrees.
	  * Applies to individual projectiles when firing multiple at once. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt;FRotator> MultiShotAngle;

	/** Returns projectile spawn location when firing multiple projectiles at once */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Weapon")
	FVector GetFireLocationForMultiShot(int32 MultiShotIndex, const FVector&amp; FireLocation, const FRotator&amp; FireRotation);

	/** Returns projectile spawn rotation when firing multiple projectiles at once */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Weapon")
	FRotator GetFireRotationForMultiShot(int32 MultiShotIndex, const FVector&amp; FireLocation, const FRotator&amp; FireRotation);
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeap_FlakCannon.cpp''' - Add multishot default properties
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>

	MultiShotAngle.SetNumZeroed(1);
	MultiShotAngle[0] = FRotator(0, 3, 0);
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Implement GetFireLocationForMultiShot(). We will add randomization later.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
FVector AUTWeapon_Boom::GetFireLocationForMultiShot_Implementation(int32 MultiShotIndex, const FVector&amp; FireLocation, const FRotator&amp; FireRotation)
{
	// Main projectile fires straight from muzzle center
	return FireLocation;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Implement GetFireRotationForMultiShot(). We will add randomization later.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
FRotator AUTWeapon_Boom::GetFireRotationForMultiShot_Implementation(int32 MultiShotIndex, const FVector&amp; FireLocation, const FRotator&amp; FireRotation)
{
	if (MultiShotIndex > 0 &amp;&amp; MultiShotAngle.IsValidIndex(CurrentFireMode))
	{
		// Each additional projectile can have own fragment of firing cone.
		// This way there are no empty spots in firing cone due to randomness.
		// While still randomish, the pattern is predictable, which is good for pro gaming.

		// Get direction at fragment of firing cone
		const float Alpha = (float)(MultiShotIndex - 1) / (float)(MultiShotCount[CurrentFireMode] - 1);
		const FRotator ConeSector = FRotator(0, 0, 360.f * Alpha);
		FVector FireDirection = ConeSector.RotateVector(MultiShotAngle[CurrentFireMode].Vector());

		// Return firing cone rotated by player's firing rotation
		return FireRotation.RotateVector(FireDirection).Rotation();
	}

	// Main projectile fires straight at crosshair
	return FireRotation;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Modify FireProjectile() so it uses our functions
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="33-34">
AUTProjectile* AUTWeapon_Boom::FireProjectile()
{
	if (GetUTOwner() == NULL)
	{
		UE_LOG(UT, Warning, TEXT("%s::FireProjectile(): Weapon is not owned (owner died during firing sequence)"));
		return NULL;
	}
	else if (Role == ROLE_Authority)
	{
		// try and fire a projectile
		checkSlow(ProjClass.IsValidIndex(CurrentFireMode) &amp;&amp; ProjClass[CurrentFireMode] != NULL);

		// increment 3rd person muzzle flash count
		UTOwner->IncrementFlashCount(CurrentFireMode);

		// Setup spawn parameters
		FActorSpawnParameters Params;
		Params.Instigator = UTOwner;
		Params.Owner = UTOwner;
		Params.bNoCollisionFail = true;

		// Get muzzle location and rotation
		const FVector SpawnLocation = GetFireStartLoc();
		const FRotator SpawnRotation = GetAdjustedAim(SpawnLocation);

		// Fire projectiles
		AUTProjectile* MainProjectile = NULL;
		if (MultiShotCount.IsValidIndex(CurrentFireMode) &amp;&amp; MultiShotCount[CurrentFireMode] > 1)
		{
			for (int32 i = 0; i &lt; MultiShotCount[CurrentFireMode]; ++i)
			{
				// Get firing location and rotation for this projectile
				const FVector MultiShotLocation = GetFireLocationForMultiShot(i, SpawnLocation, SpawnRotation);
				const FRotator MultiShotRotation = GetFireRotationForMultiShot(i, SpawnLocation, SpawnRotation);

				// Get projectile class
				TSubclassOf&lt;AUTProjectile> ProjectileClass = ProjClass[CurrentFireMode];
				if (i != 0 &amp;&amp; MultiShotProjClass.IsValidIndex(CurrentFireMode) &amp;&amp; MultiShotProjClass[CurrentFireMode] != NULL)
				{
					ProjectileClass = MultiShotProjClass[CurrentFireMode];
				}
					
				// Spawn projectile
				AUTProjectile* MultiShot = GetWorld()->SpawnActor&lt;AUTProjectile>(ProjectileClass, MultiShotLocation, MultiShotRotation, Params);
				if (MainProjectile == NULL)
				{
					MainProjectile = MultiShot;
				}
			}
		}
		else
		{
			// Spawn projectile
			MainProjectile = GetWorld()->SpawnActor&lt;AUTProjectile>(ProjClass[CurrentFireMode], SpawnLocation, SpawnRotation, Params);
		}
		return MainProjectile;
	}
	else
	{
		return NULL;
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


===== Projectile firing pattern randomization =====

Right now projectiles are fired in perfect circle pattern. We're going to randomize starting location and rotation.

&lt;div class="toccolours mw-collapsible">
'''AUTWeapon_Boom.h''' - Add properrties for location &amp; rotation randomization
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	/** Firing location randomness, in unreal units.
	  * Applies to individual projectiles when firing multiple at once */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt;FVector> MultiShotLocationSpread;

	/** Firing direction randomness, in degrees. 
	  * Applies to individual projectiles when firing multiple at once */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt;float> MultiShotRotationSpread;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Modify GetFireLocationForMultiShot() so it returns adjusted location.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="3-7">
FVector AUTWeapon_Boom::GetFireLocationForMultiShot_Implementation(int32 MultiShotIndex, const FVector&amp; FireLocation, const FRotator&amp; FireRotation)
{
	if (MultiShotIndex > 0 &amp;&amp; MultiShotLocationSpread.IsValidIndex(CurrentFireMode))
	{
		// Randomise each projectile's spawn location if needed.
		return FireLocation + FireRotation.RotateVector(FMath::VRand() * MultiShotLocationSpread[CurrentFireMode]);
	}

	// Main projectile fires straight from muzzle center
	return FireLocation;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Modify GetFireRotationForMultiShot() so it returns adjusted rotation.
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line highlight="14-18">
FRotator AUTWeapon_Boom::GetFireRotationForMultiShot_Implementation(int32 MultiShotIndex, const FVector&amp; FireLocation, const FRotator&amp; FireRotation)
{
	if (MultiShotIndex > 0 &amp;&amp; MultiShotAngle.IsValidIndex(CurrentFireMode))
	{
		// Each additional projectile can have own fragment of firing cone.
		// This way there are no empty spots in firing cone due to randomness.
		// While still randomish, the pattern is predictable, which is good for pro gaming.

		// Get direction at fragment of firing cone
		const float Alpha = (float)(MultiShotIndex - 1) / (float)(MultiShotCount[CurrentFireMode] - 1);
		const FRotator ConeSector = FRotator(0, 0, 360.f * Alpha);
		FVector FireDirection = ConeSector.RotateVector(MultiShotAngle[CurrentFireMode].Vector());

		// Randomise each projectile's spawn rotation if needed 
		if (MultiShotRotationSpread.IsValidIndex(CurrentFireMode))
		{
			FireDirection = FMath::VRandCone(FireDirection, FMath::DegreesToRadians(MultiShotRotationSpread[CurrentFireMode]));
		}

		// Return firing cone rotated by player's firing rotation
		return FireRotation.RotateVector(FireDirection).Rotation();
	}

	// Main projectile fires straight at crosshair
	return FireRotation;
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeap_FlakCannon.cpp''' - Add firing pattern default properties
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>

	MultiShotLocationSpread.SetNumZeroed(1);
	MultiShotLocationSpread[0] = FVector(0, 3, 3);

	MultiShotRotationSpread.SetNumZeroed(1);
	MultiShotRotationSpread[0] = 3;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


=== Camera Shake ===
We can add camera shake as well to our base class. This way it can be used by all weapons.

&lt;div class="toccolours mw-collapsible">
'''AUTWeapon_Boom.h''' - Add camera shake properties and function
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
    
	/** delay between firing and camera shake being played */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt;float> CameraShakeDelay;

	/** how strong camera shake should be */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt;float> CameraShakeScale;

	/** camera shake type */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Weapon")
	TArray&lt; TSubclassOf&lt;class UCameraShake> > CameraShakeType;

	/** Plays camera shake immediately */
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Weapon")
	void PlayCameraShake();
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Add PlayCameraShake() implementation
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
void AUTWeapon_Boom::PlayCameraShake_Implementation()
{
	if (UTOwner != NULL)
	{
		AUTPlayerController* PC = Cast&lt;AUTPlayerController>(UTOwner->Controller);
		if (PC != NULL)
		{
			// Play camera shake
			if (CameraShakeType.IsValidIndex(CurrentFireMode) &amp;&amp; CameraShakeType[CurrentFireMode] != NULL &amp;&amp; CameraShakeScale.IsValidIndex(CurrentFireMode))
			{
				PC->ClientPlayCameraShake(CameraShakeType[CurrentFireMode], CameraShakeScale[CurrentFireMode]);
			}
		}
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeapon_Boom.cpp''' - Override PlayFiringEffects() so it calls our PlayCameraShake() function
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
void AUTWeapon_Boom::PlayFiringEffects()
{
	Super::PlayFiringEffects();

	// Play camera shake after optional delay
	if (CameraShakeDelay.IsValidIndex(CurrentFireMode) &amp;&amp; CameraShakeDelay[CurrentFireMode] > 0)
	{
		GetWorldTimerManager().SetTimer(this, &amp;AUTWeapon_Boom::PlayCameraShake, CameraShakeDelay[CurrentFireMode], false);
	}
	else
	{
		PlayCameraShake();
	}
}
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>

&lt;div class="toccolours mw-collapsible mw-collapsed">
'''AUTWeap_FlakCannon.cpp''' - Add CameraShake assets &amp; default properties to FlakCannon constructor
&lt;div class="mw-collapsible-content">
&lt;syntaxhighlight lang="cpp" line>
	struct FConstructorStatics
	{
		...
		ConstructorHelpers::FClassFinder&lt;UCameraShake> CameraShakeType0;
		ConstructorHelpers::FClassFinder&lt;UCameraShake> CameraShakeType1;
		FConstructorStatics()
			...
			, CameraShakeType0(TEXT("BlueprintGeneratedClass'/Game/RestrictedAssets/Blueprints/WIP/Nick/CameraAnims/Camerashake2.Camerashake2_C'"))
			, CameraShakeType1(TEXT("BlueprintGeneratedClass'/Game/RestrictedAssets/Blueprints/WIP/Nick/CameraAnims/Camerashake2.Camerashake2_C'"))
		{
		}
	};

	...

	CameraShakeType.SetNumZeroed(2);
	CameraShakeType[0] = ConstructorStatics.CameraShakeType0.Class;
	CameraShakeType[1] = ConstructorStatics.CameraShakeType1.Class;

	CameraShakeDelay.SetNumZeroed(2);
	CameraShakeDelay[0] = 0.05f;
	CameraShakeDelay[1] = 0.05f;

	CameraShakeScale.SetNumZeroed(2);
	CameraShakeScale[0] = 1.f;
	CameraShakeScale[1] = 1.f;
&lt;/syntaxhighlight>
&lt;/div>
&lt;/div>


== Source Code ==
 * https://github.com/roman-dzieciol/UnrealTournament/commit/1a148e6381233f654aa4a1b84b88e94496c6b0c8
 * https://github.com/EpicGames/UnrealTournament/pull/26
</textarea><div class="templatesUsed"></div><p id="mw-returnto">Return to <a href="/UT3_Weapons_Tutorial_-_Flak_Cannon" title="UT3 Weapons Tutorial - Flak Cannon">UT3 Weapons Tutorial - Flak Cannon</a>.</p>
</div>												<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/UT3_Weapons_Tutorial_-_Flak_Cannon">https://wiki.unrealengine.com/UT3_Weapons_Tutorial_-_Flak_Cannon</a>"				</div>
												<div id='catlinks' class='catlinks catlinks-allhidden'></div>												<div class="visualClear"></div>
							</div>
		</div>
		</div>
		</div>
		
		<div id="footer">
			<div id="brand">

			</div>
			<div id="legal">
				<div id="copyright">
					&copy; 2004-2015, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic's trademarks or registered trademarks in the US and elsewhere.
				</div>
				<div id="terms">
					<a target="_blank" href="http://epicgames.com/tou">TERMS OF USE</a> | <a target="_blank" href="http://epicgames.com/privacynotice">PRIVACY POLICY</a>
				</div>
			</div>
		</div>
	</div>
		<!--<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>-->
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.edit.collapsibleFooter","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="/extensions/EpicSearchSystem/Javascript/Search.js?303"></script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=epic&amp;*"></script>
<!-- Served in 0.096 secs. -->		<img src="https://tracking.unrealengine.com/track.png" width="1" height="1">
		<!--<script type="text/javascript">
			setTimeout(function () {
				var a = document.createElement("script");
				var b = document.getElementsByTagName("script")[0];
				a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
				a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
			}, 1);
		</script>-->
	</body>
</html>

		