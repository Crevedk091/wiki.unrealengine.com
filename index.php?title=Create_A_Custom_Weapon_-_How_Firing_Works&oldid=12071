<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>Create A Custom Weapon - How Firing Works - Epic Wiki</title>
<meta name="generator" content="MediaWiki 1.22.2" />
<meta name="robots" content="noindex,nofollow" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Epic Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.unrealengine.com/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Epic Wiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=epic&amp;*" />
<link rel="stylesheet" href="/extensions/EpicVideoSystem/CSS/VideoSystem.css" />
<link rel="stylesheet" href="/skins/epic/resources/screen.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/epic.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/prettify.css?303" media="screen" />
<link rel="stylesheet" href="/skins/epic/resources/jquery.qtip.css?303" media="screen" /><meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=epic&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: my_wiki:resourceloader:filter:minify-css:7:07b6a8ccf3fd62e770f192d0a6f8e123 */</style>

<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Create_A_Custom_Weapon_-_How_Firing_Works","wgTitle":"Create A Custom Weapon - How Firing Works","wgCurRevisionId":12071,"wgRevisionId":12071,"wgArticleId":3160,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Templates","Unreal Tournament","UT Content Creation","Tutorials","Code","Community Created Content"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Create_A_Custom_Weapon_-_How_Firing_Works","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":true,"previewDialog":false,"publish":true,"toc":false}});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"epic","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"wikieditor-publish":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: my_wiki:resourceloader:filter:minify-js:7:2197af7670c41256853f340e275ede1b */
}</script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=skins.epic.extras.js%7Cskins.epic.fancybox.js%7Cskins.epic.js%7Cskins.epic.qtip.js%7Cskins.epic.slimscroll.js&amp;only=scripts&amp;skin=epic&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["ext.voteNY","mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/epic/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
var experimentID = false;
var cxApi = null;
var variation = 0;
var fancyTitle = "";
var CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML;
$(document).ready(function(){
	if(experimentID != false)
	{
		$(head).append('<script src="//www.google-analytics.com/cx/api.js?experiment=' + experimentID + '" />' + '</scr' + 'ipt>');
		HandleExperiment();
	}
	else
	{
		CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);	
	}
});
function HandleExperiment()
{
	CE_SNAPSHOT_NAME = (fancyTitle != "" ? fancyTitle : document.getElementsByTagName("title")[0].innerHTML);
	if(cxApi != null)
	{
		variation = cxApi.chooseVariation();
		cxApi.setChosenVariation(variation, experimentID);
		if(variation != cxApi.ORIGINAL_VARIATION && variation != cxApi.NO_CHOSEN_VARIATION && variation != cxApi.NOT_PARTICIPATING)
		{
			//var URL = document.location.href + (document.location.search != '' ? '&var=' : '?var=') + variation;
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
			//document.location.href = URL; 
			CE_SNAPSHOT_NAME = document.getElementsByTagName("title")[0].innerHTML + ' (variation ' + variation + ')';
			var test = "";
		}
		else
		{
			ga('send', 'event', 'A/B', 'ID: ' + experimentID, 'Variation: ' + variation, {'nonInteraction': 1});
		}
		ToggleExperimentContent(variation);
		setTimeout(function () {
			var a = document.createElement("script");
			var b = document.getElementsByTagName("script")[0];
			a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
			a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
		}, 1);
	}
	else
	{
		setTimeout("HandleExperiment()", 500);
	}
}

function ToggleExperimentContent(variation)
{
	$('.AB').hide();
	$('#variation_' + variation).show();
}
</script></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Create_A_Custom_Weapon_-_How_Firing_Works skin-epic action-view vector-animateLayout">
		<!--<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>-->
		<!-- Google Tag Manager -->
		<noscript>
			<iframe src="//www.googletagmanager.com/ns.html?id=GTM-KWRD6D"
					height="0" width="0" style="display:none;visibility:hidden"></iframe>
		</noscript>
		<script>
		(function (w, d, s, l, i) {
		w[l] = w[l] || []; w[l].push({
		'gtm.start':
		new Date().getTime(), event: 'gtm.js'
		}); var f = d.getElementsByTagName(s)[0],
		j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
		'//www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
		})(window, document, 'script', 'dataLayer', 'GTM-KWRD6D');</script>
		<!-- End Google Tag Manager -->
		<div id="webThree">
		<div id="head"></div>
		<div id="pagedefault">		
                    <div id="pagenav">
                        <div>
                            <!-- Start of Other language links -->
                            <!-- End of Other language links -->
                            <div class="homelink_container">
                                <a href="https://wiki.unrealengine.com" title="UE4 Wiki Home" class="homelink">HOME</a>
                            </div>
                        </div>
                        <div style="clear:both;">
                        </div>
                    </div>	
		<div id="mw-navigation" style="max-width:972px;margin:1em auto 0 auto;">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="jumplink" onclick="$('#sidebar').toggle();">
					Navigation
				</div>
				<div id="sidebar">
					<!-- Start of jump page links -->
					<div class="largetitle">
						Quick Links
					</div>
					<div class="arrowlist">
						<!-- End of jump page links -->
						<!-- Start of related page links -->
						<!-- End of related page links -->								
						<div id="mw-panel">
							<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Community' aria-labelledby='p-Community-label'>
	<h3 id='p-Community-label'>Community</h3>
	<div class="body">
		<ul>
			<li id="n-UE4-Games"><a href="/Category:Games">UE4 Games</a></li>
			<li id="n-Dev-Blogs"><a href="/Developer_Blogs">Dev Blogs</a></li>
			<li id="n-Dev-Livestreams"><a href="/Developer_Livestreams">Dev Livestreams</a></li>
			<li id="n-Code-Sharing-Hub"><a href="/GitHub_Sharing_Hub">Code Sharing Hub</a></li>
			<li id="n-UE-User-Groups"><a href="/User_Group_Map">UE User Groups</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Learning_Resources' aria-labelledby='p-Learning_Resources-label'>
	<h3 id='p-Learning_Resources-label'>Learning Resources</h3>
	<div class="body">
		<ul>
			<li id="n-Tutorials"><a href="/Category:Tutorials">Tutorials</a></li>
			<li id="n-Example-Projects"><a href="/Category:Example_Projects">Example Projects</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Software_and_Tools' aria-labelledby='p-Software_and_Tools-label'>
	<h3 id='p-Software_and_Tools-label'>Software and Tools</h3>
	<div class="body">
		<ul>
			<li id="n-Plug-ins"><a href="/Category:Plug-ins">Plug-ins</a></li>
			<li id="n-Art:-3D"><a href="/3D_Art_Resources">Art: 3D</a></li>
			<li id="n-Art:-2D"><a href="/2D_Art_Resources">Art: 2D</a></li>
			<li id="n-Audio"><a href="/Audio_Resources">Audio</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Modding' aria-labelledby='p-Modding-label'>
	<h3 id='p-Modding-label'>Modding</h3>
	<div class="body">
		<ul>
			<li id="n-Modding-Resources"><a href="/Category:Modding_Resources">Modding Resources</a></li>
			<li id="n-Moddable-Games"><a href="/Category:Moddable_Games">Moddable Games</a></li>
			<li id="n-Unreal-Tournament"><a href="/Category:Unreal_Tournament">Unreal Tournament</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Epic_Official' aria-labelledby='p-Epic_Official-label'>
	<h3 id='p-Epic_Official-label'>Epic Official</h3>
	<div class="body">
		<ul>
			<li id="n-Website"><a href="https://www.unrealengine.com" rel="nofollow">Website</a></li>
			<li id="n-Learning-Resources"><a href="https://docs.unrealengine.com/latest/INT/" rel="nofollow">Learning Resources</a></li>
			<li id="n-Forums"><a href="https://forums.unrealengine.com/" rel="nofollow">Forums</a></li>
			<li id="n-Blog"><a href="https://www.unrealengine.com/blog" rel="nofollow">Blog</a></li>
			<li id="n-YouTube"><a href="https://www.youtube.com/UnrealEngine" rel="nofollow">YouTube</a></li>
			<li id="n-Twitch"><a href="http://www.twitch.tv/unrealengine" rel="nofollow">Twitch</a></li>
			<li id="n-Twitter"><a href="https://twitter.com/UnrealEngine" rel="nofollow">Twitter</a></li>
			<li id="n-Facebook"><a href="https://www.facebook.com/UnrealEngine" rel="nofollow">Facebook</a></li>
			<li id="n-Instagram"><a href="https://instagram.com/unrealengine/" rel="nofollow">Instagram</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Create_A_Custom_Weapon_-_How_Firing_Works" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Create_A_Custom_Weapon_-_How_Firing_Works" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-print"><a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;oldid=12071&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;oldid=12071" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
						</div>
					</div>
				</div>				
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/Create_A_Custom_Weapon_-_How_Firing_Works"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/index.php?title=Talk:Create_A_Custom_Weapon_-_How_Firing_Works&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/Create_A_Custom_Weapon_-_How_Firing_Works" >View</a></span></li>
					<li id="ca-viewsource"><span><a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="/index.php?title=Special:UserLogin&amp;returnto=Create+A+Custom+Weapon+-+How+Firing+Works&amp;returntoquery=oldid%3D12071&amp;type=signup">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Create+A+Custom+Weapon+-+How+Firing+Works&amp;returntoquery=oldid%3D12071" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				</div>
			</div>
		</div>
		<div id="maincol">
		<div class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- Start of crumbs links -->
			<div class="crumbs">
			<p>
							</p>
			</div>
			<!-- End of crumbs links -->
			<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Create A Custom Weapon - How Firing Works</span></h1>
			<div id="bodyContent">
				<div id="contentSub"><div id="mw-revision-info">Revision as of 18:57, 1 March 2015 by <a href="/index.php?title=User:Wail&amp;action=edit&amp;redlink=1" class="new mw-userlink" title="User:Wail (page does not exist)">Wail</a>  <span class="mw-usertoollinks">(<a href="/index.php?title=User_talk:Wail&amp;action=edit&amp;redlink=1" class="new" title="User talk:Wail (page does not exist)">Talk</a> | <a href="/Special:Contributions/Wail" title="Special:Contributions/Wail">contribs</a>)</span></div><br />
				<div id="mw-revision-nav">(<a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;diff=prev&amp;oldid=12071" title="Create A Custom Weapon - How Firing Works">diff</a>) <a href="/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;direction=prev&amp;oldid=12071" title="Create A Custom Weapon - How Firing Works">← Older revision</a> | Latest revision (diff) | Newer revision → (diff)</div></div>
																<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="aux">
<div>
<b>Rate this Tutorial:</b> <div id="rating_"><div class="rating-score"><div class="voteboxrate">4.00</div></div><div class="rating-section"><img class="vote-rating-star" data-vote-the-vote="1" data-vote-id="" data-vote-action="3" data-vote-rating="4.00" data-vote-voted="0" id="rating__1" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="2" data-vote-id="" data-vote-action="3" data-vote-rating="4.00" data-vote-voted="0" id="rating__2" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="3" data-vote-id="" data-vote-action="3" data-vote-rating="4.00" data-vote-voted="0" id="rating__3" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="4" data-vote-id="" data-vote-action="3" data-vote-rating="4.00" data-vote-voted="0" id="rating__4" src="/extensions/VoteNY/images/star_on.gif" alt="" /><img class="vote-rating-star" data-vote-the-vote="5" data-vote-id="" data-vote-action="3" data-vote-rating="4.00" data-vote-voted="0" id="rating__5" src="/extensions/VoteNY/images/star_off.gif" alt="" /> <span class="rating-total">(one vote)</span></div>
				<div class="rating-clear">
			</div></div>
</div>
<div>
<p>Approved for Versions:4.6, 4.7
</p>
</div>
</div>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Intro:_How_Firing_Works_in_Unreal_Tournament"><span class="tocnumber">1</span> <span class="toctext">Intro: How Firing Works in Unreal Tournament</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Requirements"><span class="tocnumber">1.1</span> <span class="toctext">Requirements</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Classes_Overview"><span class="tocnumber">1.2</span> <span class="toctext">Classes Overview</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#From_Player_to_Weapon"><span class="tocnumber">2</span> <span class="toctext">From Player to Weapon</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Weapon_States"><span class="tocnumber">3</span> <span class="toctext">Weapon States</span></a></li>
</ul>
</div>

<h3><span class="mw-headline" id="Intro:_How_Firing_Works_in_Unreal_Tournament">Intro: How Firing Works in Unreal Tournament</span></h3>
<p>So you want to create a custom weapon, but you're unsure how to implement in C++/Blueprints the functionality of your weapon design?
</p><p>This tutorial is intended to cover some basics in conceptualizing how the pieces of weapon code work together to create the desired weapon behavior. This can be useful if you want to try implementing weapon behavior that may not exist in any known weapons, and thus extending from those weapons is not appropriate.
</p><p><br />
</p>
<h4><span class="mw-headline" id="Requirements">Requirements</span></h4>
<ul>
<li> Access to Unreal Tournament C++ Source / GitHub, &amp; Unreal Engine 4 Editor.
</li>
<li> Engine version: 4.6
</li>
<li> Skill level: Beginner
</li>
</ul>
<p>At this stage I assume you have all of the Unreal Tournament source files and have successfully compiled the project from source.
</p>
<h4><span class="mw-headline" id="Classes_Overview">Classes Overview</span></h4>
<p>This tutorial assumes a fairly basic level of knowledge of Unreal Engine classes, so for that purpose I will be outlining the classes featured in this tutorial and their basic functionality.
</p>
<ul>
<li> UTPlayerController: The UTPlayerController is an abstract entity that acts as an interface between the player and the world. Think of the PlayerController as a 'spirit' that inhabits bodies within the game world.
</li>
<li> UTCharacter: The UTCharacter class is the basic class that defines a "body" in the game world. Typically this might be a human, but it may also be an alien, a monster, etc. A character is generally 'possessed' by a PlayerController (or a BotController, if it's an AI Bot).
</li>
<li> UTCharacterMovement: This object is a component of the Character, it defines movement related properties of a UTCharacter
</li>
<li> UTWeapon: A UTWeapon is an inventory item, it is held by a UTCharacter.
</li>
<li> UTWeaponState: A UTWeaponState is an object within UTWeapon used to define its state (being held, being fired, being put away, etc).
</li>
</ul>
<p><br />
</p><p><br />
</p>
<h3><span class="mw-headline" id="From_Player_to_Weapon">From Player to Weapon</span></h3>
<p>What happens between the player pressing the mouse button and the firing of a weapon? How does a mouse click translate into a shock beam or a cluster of flak shards?
When you want to implement behavior that differs from standard weapons this is a question you might find yourself asking. Other tutorials demonstrate that we can call the functions <b>UTWeapon::FireInstantHit()</b> or <b>UTWeapon::FireProjectile()</b> to fire a hitscan beam or to fire a projectile. We can override these functions to change the behavior of each function individually, but how do we get there?
</p><p>The first step is to open the Editor and look under the menu <b>Edit</b> -&gt; <b>Project Settings</b>.
In the <b>Project Settings</b> window we should look at the <b>Input</b> section.
</p><p>As of the writing of this tutorial, the <b>Input</b> section for the Unreal Tournament project looks like so:
</p><p><a href="/File:Editorinput.jpg" class="image"><img alt="Editorinput.jpg" src="https://d26ilriwvtzlb.cloudfront.net/b/be/Editorinput.jpg" width="559" height="675" /></a>
</p><p>This can also be seen in the <b>UnrealTournament/UnrealTournament/Config/DefaultInput.ini</b> file:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StartFire&quot;</span>, Key<span class="sy1">=</span>LeftMouseButton<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StopFire&quot;</span>, Key<span class="sy1">=</span>LeftMouseButton<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StartFire&quot;</span>, Key<span class="sy1">=</span>Gamepad_RightTrigger<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StopFire&quot;</span>, Key<span class="sy1">=</span>Gamepad_RightTrigger<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StartFire&quot;</span>, Key<span class="sy1">=</span>RightControl<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StopFire&quot;</span>, Key<span class="sy1">=</span>RightControl<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StartAltFire&quot;</span>, Key<span class="sy1">=</span>RightMouseButton<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StopAltFire&quot;</span>, Key<span class="sy1">=</span>RightMouseButton<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StartAltFire&quot;</span>, Key<span class="sy1">=</span>Gamepad_LeftTrigger<span class="br0">&#41;</span>
<span class="sy2">+</span>ActionMappings<span class="sy1">=</span><span class="br0">&#40;</span>ActionName<span class="sy1">=</span><span class="st0">&quot;StopAltFire&quot;</span>, Key<span class="sy1">=</span>Gamepad_LeftTrigger<span class="br0">&#41;</span></pre></div></div>
<p><br />
Whether you're looking in the Editor or at DefaultInput.ini, you'll see that the important thing that occurs when the player presses the default fire input is the action called "StartFire." So what does StartFire do? Using Visual Studio we can search the entire Unreal Tournament solution (Ctrl+Shift+F) for "StartFire." These results will be found in <b>UTPlayerController::SetupInputComponent()</b>&#160;:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1">	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAction<span class="br0">&#40;</span><span class="st0">&quot;StartFire&quot;</span>, IE_Pressed, <span class="kw3">this</span>, <span class="sy3">&amp;</span>AUTPlayerController<span class="sy4">::</span><span class="me2">OnFire</span><span class="br0">&#41;</span><span class="sy4">;</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAction<span class="br0">&#40;</span><span class="st0">&quot;StopFire&quot;</span>, IE_Released, <span class="kw3">this</span>, <span class="sy3">&amp;</span>AUTPlayerController<span class="sy4">::</span><span class="me2">OnStopFire</span><span class="br0">&#41;</span><span class="sy4">;</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAction<span class="br0">&#40;</span><span class="st0">&quot;StartAltFire&quot;</span>, IE_Pressed, <span class="kw3">this</span>, <span class="sy3">&amp;</span>AUTPlayerController<span class="sy4">::</span><span class="me2">OnAltFire</span><span class="br0">&#41;</span><span class="sy4">;</span>
	InputComponent<span class="sy2">-</span><span class="sy1">&gt;</span>BindAction<span class="br0">&#40;</span><span class="st0">&quot;StopAltFire&quot;</span>, IE_Released, <span class="kw3">this</span>, <span class="sy3">&amp;</span>AUTPlayerController<span class="sy4">::</span><span class="me2">OnStopAltFire</span><span class="br0">&#41;</span><span class="sy4">;</span></pre></div></div>
<p>From here we can see the InputComponent of the PlayerController is binding an action called "StartFire" to the function <b>UTPlayerController::OnFire()</b>. This tells us that when the player presses left mouse button, the StartFire binding is called and our <b>UTPlayerController::OnFire()</b> function is called.
</p><p>Looking at the implementation of <b>UTPlayerController::OnFire()</b> we will see
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTPlayerController<span class="sy4">::</span><span class="me2">OnFire</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>GetPawn<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw3">new</span><span class="br0">&#40;</span>DeferredFireInputs<span class="br0">&#41;</span> FDeferredFireInput<span class="br0">&#40;</span><span class="nu0">0</span>, <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>IsInState<span class="br0">&#40;</span>NAME_Spectating<span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>PlayerState <span class="sy1">==</span> nullptr <span class="sy3">||</span> <span class="sy3">!</span>PlayerState<span class="sy2">-</span><span class="sy1">&gt;</span>bOnlySpectator<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> 
			bPlayerIsWaiting<span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			ServerRestartPlayer<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span>
		<span class="br0">&#123;</span>
			ServerViewNextPlayer<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span>
	<span class="br0">&#123;</span>
		ServerRestartPlayer<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>This might look a little confusing at first, but the key element to point out here is the code that executes when we have a pawn. The majority of this code handles spectating only, so only the line 
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1">		<span class="kw3">new</span><span class="br0">&#40;</span>DeferredFireInputs<span class="br0">&#41;</span> FDeferredFireInput<span class="br0">&#40;</span><span class="nu0">0</span>, <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy4">;</span></pre></div></div>
<p>Is relevant to the actual firing behavior while the player is alive.
What does this line do? In short, it creates an object of type FDeferredFireInput, passing along the FireMode, in this case 0, and whether this input was the start or end of the input.
</p><p>The definition for the FDefferedFireInput can be seen in the UTPlayerController.h
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">struct</span> FDeferredFireInput
<span class="br0">&#123;</span>
	<span class="coMULTI">/** the fire mode */</span>
	<span class="kw4">uint8</span> FireMode<span class="sy4">;</span>
	<span class="coMULTI">/** if true, call StartFire(), false call StopFire() */</span>
	<span class="kw4">bool</span> bStartFire<span class="sy4">;</span>
&#160;
	FDeferredFireInput<span class="br0">&#40;</span><span class="kw4">uint8</span> InFireMode, <span class="kw4">bool</span> bInStartFire<span class="br0">&#41;</span>
		<span class="sy4">:</span> FireMode<span class="br0">&#40;</span>InFireMode<span class="br0">&#41;</span>, bStartFire<span class="br0">&#40;</span>bInStartFire<span class="br0">&#41;</span>
	<span class="br0">&#123;</span><span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p>The FDeferredFireInput struct was created so that fire inputs can be applied in a slightly different order than they would normally occur. If you trace down where the DeferredFireInputs are used, you'll see that they are typically processed in the movement component of the UTCharacter, UTCharacterMovement::TickComponent(). This entire process is a bit circuitous, but the long and short of it is that DeferredFireInputs are ultimately resolved in <b>UTPlayerController::ApplyDeferredFireInputs()</b>.
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTPlayerController<span class="sy4">::</span><span class="me2">ApplyDeferredFireInputs</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>FDeferredFireInput<span class="sy3">&amp;</span> Input <span class="sy4">:</span> DeferredFireInputs<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>Input.<span class="me1">bStartFire</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>UTCharacter <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				<span class="kw1">if</span> <span class="br0">&#40;</span>StateName <span class="sy1">==</span> NAME_Playing<span class="br0">&#41;</span>
				<span class="br0">&#123;</span>
					UTCharacter<span class="sy2">-</span><span class="sy1">&gt;</span>StartFire<span class="br0">&#40;</span>Input.<span class="me1">FireMode</span><span class="br0">&#41;</span><span class="sy4">;</span>
				<span class="br0">&#125;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>GetPawn<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> nullptr<span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				GetPawn<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>PawnStartFire<span class="br0">&#40;</span>Input.<span class="me1">FireMode</span><span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>UTCharacter <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			UTCharacter<span class="sy2">-</span><span class="sy1">&gt;</span>StopFire<span class="br0">&#40;</span>Input.<span class="me1">FireMode</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	DeferredFireInputs.<span class="me1">Empty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Now we're getting somewhere. In <b>UTPlayerController::ApplyDeferredFireInputs()</b> the standard processing of our player input will have us calling a function on our UTCharacter called StartFire, passing along a numerical value for the firemode we're calling. <b>UTCharacter::StartFire()</b> looks like so:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTCharacter<span class="sy4">::</span><span class="me2">StartFire</span><span class="br0">&#40;</span><span class="kw4">uint8</span> FireModeNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	UE_LOG<span class="br0">&#40;</span>LogUTCharacter, Verbose, TEXT<span class="br0">&#40;</span><span class="st0">&quot;StartFire&#160;%d&quot;</span><span class="br0">&#41;</span>, FireModeNum<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>IsLocallyControlled<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		UE_LOG<span class="br0">&#40;</span>LogUTCharacter, Warning, TEXT<span class="br0">&#40;</span><span class="st0">&quot;StartFire() can only be called on the owning client&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="co1">// when feigning death, attempting to fire gets us out of it</span>
	<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>bFeigningDeath<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		FeignDeath<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>Weapon <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span> <span class="sy3">&amp;&amp;</span> EmoteCount <span class="sy1">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		Weapon<span class="sy2">-</span><span class="sy1">&gt;</span>StartFire<span class="br0">&#40;</span>FireModeNum<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The important bits here is how UTCharacter passes input to the Weapon class, getting us to our destination at last, calling <b>UTWeapon::StartFire()</b>.
</p><p>Here is a small diagram outlining the input flow through these initial classes.
</p><p><a href="/File:InputDiagramTrim1.jpg" class="image"><img alt="InputDiagramTrim1.jpg" src="https://d26ilriwvtzlb.cloudfront.net/a/ad/InputDiagramTrim1.jpg" width="688" height="256" /></a>
</p><p><br />
</p>
<h3><span class="mw-headline" id="Weapon_States">Weapon States</span></h3>
<p>You might be thinking, "That's great, you've shown how a single button press translates into a single function call in my weapon, but what happens next?"
This section will walk through the steps of what happens once our player input reaches our weapon.
</p><p>Starting off, our first point of entry into the Weapon class is the <b>UTWeapon::StartFire()</b> function:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTWeapon<span class="sy4">::</span><span class="me2">StartFire</span><span class="br0">&#40;</span><span class="kw4">uint8</span> FireModeNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>UTOwner<span class="sy2">-</span><span class="sy1">&gt;</span>IsFiringDisabled<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw4">bool</span> bClientFired <span class="sy1">=</span> BeginFiringSequence<span class="br0">&#40;</span>FireModeNum, <span class="kw2">false</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>Role <span class="sy1">&lt;</span> ROLE_Authority<span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			ServerStartFire<span class="br0">&#40;</span>FireModeNum, bClientFired<span class="br0">&#41;</span><span class="sy4">;</span> 
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>As you can see, in games where the client is not the authority (e.g. all online games), this redirects to <b>UTWeapon::ServerStartFire()</b>. Lets take a brief look there as well:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTWeapon<span class="sy4">::</span><span class="me2">ServerStartFire_Implementation</span><span class="br0">&#40;</span><span class="kw4">uint8</span> FireModeNum, <span class="kw4">bool</span> bClientFired<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>UTOwner<span class="sy2">-</span><span class="sy1">&gt;</span>IsFiringDisabled<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		BeginFiringSequence<span class="br0">&#40;</span>FireModeNum, bClientFired<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Both the clientside and serverside functions here call <b>UTWeapon::BeginFiringSequence()</b>, so it's important to see how input is passed along through this function to produce the firing behavior.
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> AUTWeapon<span class="sy4">::</span><span class="me2">BeginFiringSequence</span><span class="br0">&#40;</span><span class="kw4">uint8</span> FireModeNum, <span class="kw4">bool</span> bClientFired<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>UTOwner<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		UTOwner<span class="sy2">-</span><span class="sy1">&gt;</span>SetPendingFire<span class="br0">&#40;</span>FireModeNum, <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>FiringState.<span class="me1">IsValidIndex</span><span class="br0">&#40;</span>FireModeNum<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> CurrentState <span class="sy3">!</span><span class="sy1">=</span> EquippingState <span class="sy3">&amp;&amp;</span> CurrentState <span class="sy3">!</span><span class="sy1">=</span> UnequippingState<span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			FiringState<span class="br0">&#91;</span>FireModeNum<span class="br0">&#93;</span><span class="sy2">-</span><span class="sy1">&gt;</span>PendingFireStarted<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw4">bool</span> bResult <span class="sy1">=</span> CurrentState<span class="sy2">-</span><span class="sy1">&gt;</span>BeginFiringSequence<span class="br0">&#40;</span>FireModeNum, bClientFired<span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>CurrentState<span class="sy2">-</span><span class="sy1">&gt;</span>IsFiring<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> CurrentFireMode <span class="sy3">!</span><span class="sy1">=</span> FireModeNum<span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			OnMultiPress<span class="br0">&#40;</span>FireModeNum<span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">return</span> bResult<span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The next step to pay attention to is in AUTWeapon::BeginFiringSequence involves looking at this next set of lines to execute,
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw1">if</span> <span class="br0">&#40;</span>FiringState.<span class="me1">IsValidIndex</span><span class="br0">&#40;</span>FireModeNum<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> CurrentState <span class="sy3">!</span><span class="sy1">=</span> EquippingState <span class="sy3">&amp;&amp;</span> CurrentState <span class="sy3">!</span><span class="sy1">=</span> UnequippingState<span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			FiringState<span class="br0">&#91;</span>FireModeNum<span class="br0">&#93;</span><span class="sy2">-</span><span class="sy1">&gt;</span>PendingFireStarted<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span></pre></div></div>
<p>If you look only at the name of this variable you might think to yourself that the FiringState is a state that controls certain firing behaviors of the weapon. If you've looked through the class structure you've likely seen such things as UTWeaponStateFiringBeam, UTWeaponStateFiringBurst, UTWeaponStateFiringSpinUp. It might seem confusing that somehow your weapon already has a so-called FiringState even though we haven't even fired a shot yet!
</p><p>The important thing to recognize here is that FiringState is an object of type UUTWeaponState. UUTWeaponState is an object defined to exist within each UTWeapon, but each UTWeaponState corresponds to more than just a particular firing behavior in a weapon. Imagine that you are playing a game and you have in your inventory the Impact Hammer, the Enforcer, the Shock Rifle, and the Rocket Launcher. If we were to call UTWeapon::BeginFiringSequence() on all of these weapons, they would all have a 'firing state.' However, in Unreal Tournament where the player can only have one active weapon at a time, three of those weapons would be in WeaponState UTWeaponStateInactive. The one "currently-held" weapon would be in UTWeaponStateActive. There are also transitional states used for equipping and unequipping weapons, as we can see from UTWeapon::BeginFiringSequence().
</p><p>Moving on, our code above indicates we should call the PendingFireStarted function of our Weapon State class. As I stated above, a held weapon is in the UTWeaponStateActive class, so looking at the function definition <b>UTWeaponStateActive::PendingFireStarted()</b> we see:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> UUTWeaponStateActive<span class="sy4">::</span><span class="me2">BeginFiringSequence</span><span class="br0">&#40;</span><span class="kw4">uint8</span> FireModeNum, <span class="kw4">bool</span> bClientFired<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>FiringState.<span class="me1">IsValidIndex</span><span class="br0">&#40;</span>FireModeNum<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>HasAmmo<span class="br0">&#40;</span>FireModeNum<span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>CurrentFireMode <span class="sy1">=</span> FireModeNum<span class="sy4">;</span>
		GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GotoState<span class="br0">&#40;</span>GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>FiringState<span class="br0">&#91;</span>FireModeNum<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Fortunately this is straightforward, knowing that our weapon initially is in state UTWeaponStateActive, we'll want to use the <b>UTWeapon::GotoState()</b> function to go to the state specified by our CurrentFireMode/FireModeNum. These actually will vary per weapon, but in all current examples these Firing States are subclasses of UTWeaponStateFiring.
</p><p>Looking first at <b>UTWeapon::GotoState()</b>:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTWeapon<span class="sy4">::</span><span class="me2">GotoState</span><span class="br0">&#40;</span>UUTWeaponState<span class="sy2">*</span> NewState<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>NewState <span class="sy1">==</span> <span class="kw2">NULL</span> <span class="sy3">||</span> <span class="sy3">!</span>NewState<span class="sy2">-</span><span class="sy1">&gt;</span>IsIn<span class="br0">&#40;</span><span class="kw3">this</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		UE_LOG<span class="br0">&#40;</span>UT, Warning, TEXT<span class="br0">&#40;</span><span class="st0">&quot;Attempt to send&#160;%s to invalid state&#160;%s&quot;</span><span class="br0">&#41;</span>, <span class="sy2">*</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy2">*</span>GetFullNameSafe<span class="br0">&#40;</span>NewState<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>ensureMsgf<span class="br0">&#40;</span>UTOwner <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span> <span class="sy3">||</span> NewState <span class="sy1">==</span> InactiveState, TEXT<span class="br0">&#40;</span><span class="st0">&quot;Attempt to send&#160;%s to state&#160;%s while not owned&quot;</span><span class="br0">&#41;</span>, <span class="sy2">*</span>GetName<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy2">*</span>GetNameSafe<span class="br0">&#40;</span>NewState<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>CurrentState <span class="sy3">!</span><span class="sy1">=</span> NewState<span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			UUTWeaponState<span class="sy2">*</span> PrevState <span class="sy1">=</span> CurrentState<span class="sy4">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>CurrentState <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				CurrentState<span class="sy2">-</span><span class="sy1">&gt;</span>EndState<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// NOTE: may trigger another GotoState() call</span>
			<span class="br0">&#125;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>CurrentState <span class="sy1">==</span> PrevState<span class="br0">&#41;</span>
			<span class="br0">&#123;</span>
				CurrentState <span class="sy1">=</span> NewState<span class="sy4">;</span>
				CurrentState<span class="sy2">-</span><span class="sy1">&gt;</span>BeginState<span class="br0">&#40;</span>PrevState<span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// NOTE: may trigger another GotoState() call</span>
				StateChanged<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Again, for the time being we're assuming we will be going to a Weapon State that extends UTWeaponStateFiring. This is the standard base class for firing behavior. <b>UTWeaponStateFiring::BeginState()</b> shows us:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> UUTWeaponStateFiring<span class="sy4">::</span><span class="me2">BeginState</span><span class="br0">&#40;</span><span class="kw4">const</span> UUTWeaponState<span class="sy2">*</span> PrevState<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetWorldTimerManager<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">SetTimer</span><span class="br0">&#40;</span><span class="kw3">this</span>, <span class="sy3">&amp;</span>UUTWeaponStateFiring<span class="sy4">::</span><span class="me2">RefireCheckTimer</span>, GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetRefireTime<span class="br0">&#40;</span>GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>GetCurrentFireMode<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="kw2">true</span><span class="br0">&#41;</span><span class="sy4">;</span>
	ToggleLoopingEffects<span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span><span class="sy4">;</span>
	PendingFireSequence <span class="sy1">=</span> <span class="sy2">-</span><span class="nu0">1</span><span class="sy4">;</span>
	bDelayShot <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
	GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>OnStartedFiring<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	FireShot<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>bNetDelayedShot <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Here we can see that the function <b>UTWeaponStateFiring::FireShot()</b> is called.
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> UUTWeaponStateFiring<span class="sy4">::</span><span class="me2">FireShot</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="co1">//float CurrentMoveTime = (GetUTOwner() &amp;&amp; GetUTOwner()-&gt;UTCharacterMovement)&#160;? GetUTOwner()-&gt;UTCharacterMovement-&gt;GetCurrentSynchTime()&#160;: GetWorld()-&gt;GetTimeSeconds();</span>
	<span class="co1">//UE_LOG(UT, Warning, TEXT(&quot;Fire SHOT at&#160;%f (world time&#160;%f)&quot;), CurrentMoveTime, GetWorld()-&gt;GetTimeSeconds());</span>
	GetOuterAUTWeapon<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>FireShot<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>In UTWeaponStateFiring the most basic case of firing behavior is implemented. One button press immediately fires the gun, and on release the gun firing behavior ceases. UTWeaponStateFiring::FireShot() thus calls <b>UTWeapon::FireShot()</b>:
</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">void</span> AUTWeapon<span class="sy4">::</span><span class="me2">FireShot</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	UTOwner<span class="sy2">-</span><span class="sy1">&gt;</span>DeactivateSpawnProtection<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
	ConsumeAmmo<span class="br0">&#40;</span>CurrentFireMode<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy3">!</span>FireShotOverride<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> GetUTOwner<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span> <span class="co1">// script event may kill user</span>
	<span class="br0">&#123;</span>
		PlayFiringEffects<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>ProjClass.<span class="me1">IsValidIndex</span><span class="br0">&#40;</span>CurrentFireMode<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> ProjClass<span class="br0">&#91;</span>CurrentFireMode<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			FireProjectile<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>InstantHitInfo.<span class="me1">IsValidIndex</span><span class="br0">&#40;</span>CurrentFireMode<span class="br0">&#41;</span> <span class="sy3">&amp;&amp;</span> InstantHitInfo<span class="br0">&#91;</span>CurrentFireMode<span class="br0">&#93;</span>.<span class="me1">DamageType</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
		<span class="br0">&#123;</span>
			FireInstantHit<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>GetUTOwner<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="kw2">NULL</span><span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="kw4">static</span> FName NAME_FiredWeapon<span class="br0">&#40;</span>TEXT<span class="br0">&#40;</span><span class="st0">&quot;FiredWeapon&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		GetUTOwner<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>InventoryEvent<span class="br0">&#40;</span>NAME_FiredWeapon<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>From this point on our weapon code will branch to either <b>UTWeapon::FireProjectile()</b> or <b>UTWeapon::FireInstantHit()</b>. Other tutorials provide ample examples of utilizing these functions for custom firing behavior, so I leave it to the reader to decide how to implement those functions as necessary to achieve desired behavior.
For examples of how the Weapon State is used I recommend looking at the <b>UTWeaponStateFiringBurst</b> code to see how overriding the Weapon State can allow the user to create functionality where one button press does not necessarily correspond to one shot, but rather to an arbitrary number of shots. Overriding this functionality can allow the user to implement all kinds of exotic and never-before-seen types of functionality!
</p>
<!-- 
NewPP limit report
CPU time usage: 0.138 seconds
Real time usage: 0.209 seconds
Preprocessor visited node count: 121/1000000
Preprocessor generated node count: 394/1000000
Post‐expand include size: 172/2097152 bytes
Template argument size: 16/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->
</div>												<div class="printfooter">
				Retrieved from "<a href="https://wiki.unrealengine.com/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;oldid=12071">https://wiki.unrealengine.com/index.php?title=Create_A_Custom_Weapon_-_How_Firing_Works&amp;oldid=12071</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/Category:Unreal_Tournament" title="Category:Unreal Tournament">Unreal Tournament</a></li><li><a href="/Category:UT_Content_Creation" title="Category:UT Content Creation">UT Content Creation</a></li><li><a href="/Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="/Category:Code" title="Category:Code">Code</a></li><li><a href="/Category:Community_Created_Content" title="Category:Community Created Content">Community Created Content</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden category: <ul><li><a href="/Category:Templates" title="Category:Templates">Templates</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		</div>
		</div>
		
		<div id="footer">
			<div id="brand">

			</div>
			<div id="legal">
				<div id="copyright">
					&copy; 2004-2015, Epic Games, Inc. All rights reserved. Unreal and its logo are Epic's trademarks or registered trademarks in the US and elsewhere.
				</div>
				<div id="terms">
					<a target="_blank" href="http://epicgames.com/tou">TERMS OF USE</a> | <a target="_blank" href="http://epicgames.com/privacynotice">PRIVACY POLICY</a>
				</div>
			</div>
		</div>
	</div>
		<!--<div id="footer" role="contentinfo">
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<div name="copyright">&#169; 2004-2014, Epic Games, Inc. All rights reserved. Epic Games, Unreal, Unreal Engine, Unreal Tournament, and their respective logos are Epic's trademarks or registered trademarks in the US and elsewhere.</div>
					</li>
					<li id="footer-termsofuseico">
						<div name="termsofuse"><a href="http://epicgames.com/tou" target="_blank">Terms of Use</a></div>
					</li>
					<li id="footer-privacynoticeico">
						<div name="privacynotice"><a href="http://epicgames.com/privacynotice" target="_blank">Privacy Policy</a></div>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>-->
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="/extensions/EpicSearchSystem/Javascript/Search.js?303"></script>
<script src="https://wiki.unrealengine.com/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=epic&amp;*"></script>
<!-- Served in 0.287 secs. -->		<img src="https://tracking.unrealengine.com/track.png" width="1" height="1">
		<!--<script type="text/javascript">
			setTimeout(function () {
				var a = document.createElement("script");
				var b = document.getElementsByTagName("script")[0];
				a.src = document.location.protocol + "//script.crazyegg.com/pages/scripts/0028/4572.js?" + Math.floor(new Date().getTime() / 3600000);
				a.async = true; a.type = "text/javascript"; b.parentNode.insertBefore(a, b)
			}, 1);
		</script>-->
	</body>
</html>

		